#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1024] =
    {   0,
        0,    0,    2,    2,  150,  148,    4,    4,  148,  148,
      141,  148,  141,  141,  144,  141,  141,  141,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  141,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    4,  136,    0,    0,  147,    1,  144,  143,  142,
      138,  137,  135,  139,  146,  146,  146,  146,  146,  146,

      118,  146,  119,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  120,  146,
      146,  121,  122,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  123,  124,  125,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  126,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  140,    2,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      145,  142,  104,  146,  105,  146,  146,  106,  146,  107,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  108,
      146,  130,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  109,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  110,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  111,  146,  146,  112,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      113,  146,  146,  114,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  115,  146,  146,  146,
      146,  116,  146,  146,  146,  146,  117,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  146,  146,
      146,  146,  146,  146,   76,  146,   77,   78,  146,  146,

      146,  146,   79,  146,  146,  146,  146,   80,  146,  146,
      146,   81,   82,  146,  146,  146,  146,  146,  146,  146,
       83,  146,   84,   85,  146,  146,   86,  146,   87,  146,
      129,  146,  146,  146,  146,  146,  146,   88,  146,   89,
       90,   91,  146,   93,  146,   94,  146,  146,  146,  146,
       95,  146,  146,  146,  146,  146,   96,  146,  146,  146,
      146,  146,  146,  146,  146,   97,  146,  146,  146,  146,
       98,   99,  100,  133,  146,  146,  146,  146,  146,  146,
      146,  146,  101,  146,  102,  146,  103,  132,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   56,   57,
      146,   58,  146,  146,  146,  146,  146,  146,   59,  146,

      146,  146,   60,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  134,   61,  146,   62,  146,  146,   92,  146,
       63,   64,  146,  146,  146,  146,   65,   66,   67,   68,
      146,  131,  146,  146,  146,   69,   70,  146,  146,  146,
      146,  146,   71,  146,  146,  146,  146,  146,   72,  146,
      146,  146,   73,  146,  146,  146,   74,  146,  146,  146,
       75,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  146,   31,  146,  146,   32,  146,
       33,  146,  146,   34,   35,  146,   36,   37,   38,  146,
       39,  146,  146,   41,   42,  146,   43,   44,  146,  146,
       45,  128,  146,  146,   46,  146,  146,  146,   47,  146,
       48,  127,   49,   50,  146,   51,  146,  146,  146,   52,
       53,   54,   55,  146,  146,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   14,   15,   16,   17,
       18,  146,   19,  146,   20,   21,   40,   22,   23,  146,
       24,  146,  146,   25,   26,  146,   27,   28,  146,  146,
      146,   29,   30,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      146,   10,  146,   11,  146,   12,  146,  146,   13,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  146,    7,
      146,    8,    9,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static const flex_int16_t yy_base[1031] =
    {   0,
        0,    0,   67,    0,  481, 4068,  133,  135,  465,    0,
     4068,  466,  131,  460,  133,  132,  428,  398,  129,  129,
      137,  135,  145,  196,  176,  184,  217,  124,  141,  201,
      213,  238,  255,  250,    0,  243,  269,  312,  251,  191,
      273,  144,  332,    0,  200,  212,  357,  353,    0,  342,
      212,  334,  207,  247,  308,  294,  370,  437,  491,  543,
      591,  643,  355,  301,  691,  300,  266,  366,  429,  743,
      791,  438,  367,  442,  841,  893,  479,  537,  450,  388,
      236,  333, 4068,  291,  270, 4068, 4068,  338,  257,  245,
     4068, 4068, 4068, 4068,    0,  147,  178,  365,  445,  195,

      316,  481,    0,  371,  323,  491,  492,  306,  488,  544,
      360,  374,  381,  395,  417,  442,  544,  440,  441,  473,
      482,  497,  539,  539,  540,  548,  579,  536,    0,  550,
      576,  631,  585,  591,  576,  596,  593,  608,  589,  598,
      599,  594,  626,  635,  652,  648,    0,  652,  637,  641,
      659,  658,  679,  658,  691,  699,  685,  683,  705,  705,
      696,  723,  707,  700,  698,  694,  740,  714,  741,  739,
      748,  749,  735,  755, 4068,    0,  349,    0,  242,  201,
        0,    0,  353,  190,  161,    0,    0,    0,    0,  762,
      795,  781,  830,  806,  835,  860,  894,  793,  884,  912,

      937,  836,  928,  927,  989,  966,  961,  991,  929,  995,
      999, 1049, 1025, 1034, 1055, 1031, 1057, 1063, 1079, 1085,
     1100, 1109, 1108,  854, 1111, 1119, 1168, 1134, 1133, 1066,
     1171, 1197, 1216, 1149, 1193, 1222, 1159, 1208, 1226, 1251,
     1237, 1207, 1262, 1266, 1267, 1272, 1296, 1297, 1283, 1301,
     1322, 1325, 1326, 1340, 1354, 1350, 1371, 1341, 1375, 1365,
     1380, 1404, 1394, 1405, 1426, 1429, 1428, 1430, 1444,    0,
     4068,  145,    0,  756,    0,  757,  778,    0,  801,    0,
      788,  798,  842, 1002,  846,  849,  884,  942,  937,    0,
      960,    0,  976, 1039, 1148, 1100, 1165, 1158, 1187, 1210,

     1275,    0, 1295, 1305, 1357, 1345, 1382, 1421, 1429, 1447,
     1458,    0, 1450, 1452, 1465, 1447, 1462, 1464, 1463, 1464,
     1467, 1476, 1473, 1484, 1487, 1488, 1493, 1478, 1487,    0,
     1482, 1498, 1495, 1501, 1505, 1500, 1502, 1492, 1497, 1497,
        0, 1509, 1504, 1504, 1519, 1522, 1536, 1524, 1523, 1528,
     1541, 1523, 1538, 1542, 1537, 1548,    0, 1532, 1536, 1537,
     1546,    0, 1543, 1540, 1547, 1557,    0, 1558, 1560, 1552,
     1570, 1562, 1557, 1578, 1568, 1572, 1579, 1587, 1578,    0,
      140, 1596, 1601, 1602, 1604, 1605, 1606, 1634, 1620, 1635,
     1638, 1659, 1644, 1650, 1660, 1674, 1688, 1678, 1675, 1700,

     1704, 1710, 1713, 1714, 1728, 1712, 1723, 1749, 1752, 1754,
     1758, 1766, 1764, 1782, 1783, 1788, 1806, 1798, 1767, 1820,
     1817, 1828, 1831, 1852, 1834, 1866, 1870, 1868, 1885, 1871,
     1902, 1894, 1860, 1862, 1903, 1906, 1920, 1919, 1924, 1937,
     1934, 1938, 1960, 1972, 1973, 1974, 1962, 1991, 1988, 1970,
     2016, 2012, 2010, 2014, 2022, 2044, 2045, 2055, 2060, 2074,
     2058, 2076, 2084, 2088, 2089, 2090, 2112, 2099, 2113, 2122,
     2118, 2143, 2147, 2144, 2148, 2152, 2173, 2176, 2177, 2202,
     2192, 2210, 2207, 2218, 2231, 2235, 2240, 2256, 1596, 1597,
     1621, 1626, 1705, 1777,    0, 1804,    0,    0, 1824, 1943,

     2011, 2015,    0, 2117, 2118, 2143, 2188,    0, 2208, 2237,
     2240,    0,    0, 2239, 2241, 2243, 2246, 2268, 2270, 2272,
        0, 2265,    0,    0, 2285, 2273,    0, 2276,    0, 2279,
        0, 2290, 2279, 2275, 2282, 2284, 2296,    0, 2293,    0,
        0,    0, 2286,    0, 2295,    0, 2304, 2291, 2307, 2300,
        0, 2316, 2315, 2305, 2307, 2315,    0, 2330, 2334, 2326,
     2322, 2323, 2331, 2334, 2346,    0, 2346, 2344, 2349, 2341,
        0,    0, 2338,    0, 2356, 2346, 2340, 2362, 2344, 2358,
     2363, 2361,    0, 2351,    0, 2368,    0,    0, 2380, 2384,
     2369, 2372, 2388, 2398, 2402, 2410, 2412, 2414, 2436, 2438,

     2440, 2448, 2423, 2446, 2472, 2454, 2490, 2464, 2500, 2502,
     2514, 2477, 2503, 2531, 2532, 2540, 2553, 2566, 2576, 2508,
     2518, 2577, 2544, 2554, 2588, 2594, 2582, 2598, 2590, 2606,
     2620, 2622, 2631, 2636, 2639, 2648, 2660, 2630, 2665, 2654,
     2664, 2670, 2693, 2676, 2698, 2694, 2702, 2716, 2724, 2706,
     2728, 2739, 2742, 2747, 2752, 2768, 2750, 2782, 2784, 2773,
     2801, 2798, 2816, 2810, 2834, 2806, 2822, 2835, 2838, 2850,
     2844, 2847, 2872, 2856, 2875, 2884, 2889, 2910, 2908, 2924,
     2898, 2938, 2907, 2940, 2939, 2942, 2943, 2952,    0,    0,
     2431,    0, 2509, 2512, 2586, 2725, 2746, 2785,    0, 2780,

     2789, 2852,    0, 2873, 2881, 2921, 2946, 2932, 2934, 2947,
     2960, 2977,    0,    0, 2970,    0, 2976, 2967,    0, 2966,
        0,    0, 2967, 2984, 2978, 2986,    0,    0,    0,    0,
     2994,    0, 2999, 2993, 2982,    0,    0, 2998, 2987, 2988,
     3003, 3002,    0, 3014, 3013, 2998, 3015, 3019, 3002, 3004,
     3003, 3030,    0, 3029, 3032, 3032,    0, 3020, 3039, 3040,
        0, 3046, 3047, 3048, 3050, 3051, 3052, 3065, 3080, 3101,
     3082, 3083, 3104, 3106, 3088, 3105, 3119, 3136, 3117, 3122,
     3147, 3150, 3159, 3171, 3160, 3168, 3176, 3201, 3184, 3210,
     3209, 3193, 3199, 3205, 3224, 3227, 3233, 3245, 3243, 3255,

     3258, 3261, 3264, 3267, 3273, 3283, 3295, 3289, 3297, 3299,
     3301, 3327, 3332, 3323, 3329, 3335, 3338, 3364, 3351, 3369,
     3377, 3387, 3386, 3388, 3409, 3392, 3417, 3421, 3418, 3422,
     3440, 3450, 3455, 3452, 3049,    0, 3045, 3057, 3046, 3147,
        0, 3157, 3175,    0,    0, 3314,    0,    0,    0, 3353,
        0, 3366, 3368,    0,    0, 3411,    0,    0, 3440, 3457,
        0,    0, 3452, 3465,    0, 3447, 3463, 3446,    0, 3473,
     3460,    0,    0,    0, 3469,    0, 3487, 3489, 3476,    0,
        0,    0,    0, 3479, 3487, 3495, 3496, 3500, 3504, 3514,
     3506, 3505, 3537, 3529, 3538, 3539, 3548, 3550, 3554, 3560,

     3563, 3569, 3579, 3578, 3582, 3591, 3592, 3594, 3603, 3604,
     3608, 3613, 3622, 3627, 3636, 3637, 3652, 3646, 3648, 3658,
     3682, 3676, 3671, 3677, 3681, 3706, 3692, 3714, 3715, 3716,
     3700, 3725, 3730, 3744, 3746, 3748,    0,    0,    0,    0,
        0, 3549,    0, 3628,    0,    0,    0,    0,    0, 3664,
        0, 3709, 3751,    0,    0, 3739,    0,    0, 3743, 3752,
     3765,    0,    0, 3769, 3770, 3774, 3779, 3780, 3788, 3785,
     3798, 3802, 3803, 3804, 3814, 3819, 3838, 3828, 3844, 3833,
     3842, 3847, 3868, 3852, 3870, 3873, 3896, 3878, 3881, 3882,
     3795,    0, 3861,    0, 3874,    0, 3872, 3895,    0, 3907,

     3912, 3921, 3918, 3924, 3926, 3930, 3947, 3935, 3942,    0,
     3938,    0,    0, 3956, 3960, 3961, 3966, 3970,    0,    0,
     3972, 3978, 4068, 4043, 4047,  136, 4051, 4055, 4059, 4063
    } ;

static const flex_int16_t yy_def[1031] =
    {   0,
     1023,    1, 1023,    3, 1023, 1023, 1023, 1023, 1023, 1024,
     1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1023, 1027, 1027, 1023, 1027, 1028, 1027, 1029,
     1027, 1027, 1027, 1027, 1027, 1027, 1030, 1030,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1027, 1023, 1023, 1024, 1025, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1023, 1027, 1027, 1027, 1028, 1029,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58, 1027,
     1023, 1023, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027,
     1027,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,   58,

       58,   58,   58,   58,   58,   58,   58,   58, 1026, 1026,
     1026, 1026, 1026,   58,   58,   58,   58,   58, 1026, 1026,
       58,   58,    0, 1023, 1023, 1023, 1023, 1023, 1023, 1023
    } ;

static const flex_int16_t yy_nxt[4136] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   35,   42,   35,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   35,   42,   35,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,

       77,   78,   79,   73,   80,   73,   44,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       73,   80,   73,   81,   82,   82,   82,   82,   87,   95,
       88,   90,   88,   91,   92,   96,  102,   97,  109,  381,
      104,  134,  110,   98,  272,   99,  111,  105,  135,  100,
      101,  174,  112,  273,  106,  113,  103,  107,  108,  114,
      381,  115,   96,  102,   97,  109,  116,  104,  134,  110,
       98,  117,   99,  111,  105,  135,  100,  101,  174,  112,
      273,  106,  113,  103,  107,  108,  114,  126,  115,  184,

      124,  177,   82,  116,  170,  127,  125,  181,  117,  118,
      274,  128,  171,   82,   82,  185,  183,  119,  136,  182,
      120,  183,  137,  121,  126,  279,  122,  124,  138,  123,
      139,  170,  127,  125,  140,  129,  118,  274,  128,  171,
      141,  130,  131,  132,  119,  136,  380,  120,  133,  137,
      121,  142,  279,  122,  272,  138,  123,  139,  186,  187,
      153,  140,  129,  150,  154,  143,   89,  141,  130,  131,
      132,  144,  145,  146,  151,  133,   86,  167,  142,  168,
      152,  147,  169,  230,  155,  148,  156,  153,  149,  157,
      150,  154,  143,  172,  173,  271,  158,  159,  144,  145,

      146,  151,  270,  190,  167,  189,  168,  152,  147,  169,
      230,  155,  148,  156,  221,  149,  157,  190,  190,  188,
      172,  173,  222,  158,  159,  160,  161,  229,  223,  162,
      190,  280,  163,  164,   82,   82,  285,  190,  190,  165,
      290,  221,  166,  184,  190,  190,   90,   88,  181,  222,
      177,   82,  160,  161,  229,  223,  162,  176,  280,  163,
      164,  185,  183,  285,  190,  190,  165,  290,  178,  166,
      176,  176,  190,  176,  176,  176,  176,  176,  176,  219,
      176,  176,  176,  231,  190,  220,  191,  232,  192,  275,
      297,  298,  190,  233,  193,  283,  194,  276,  175,  190,

      195,  196,  284,  190,  190,  269,  219,  299,  300,   94,
      231,  190,  220,  191,  232,  192,  275,  297,  298,  190,
      233,  193,  283,  194,  276,  190,  301,  195,  196,  284,
      190,  190,  269,  302,  299,  300,  176,  176,  176,   93,
      176,  176,  176,  176,  176,  176,  234,  176,  176,  176,
      235,  245,  190,  301,  197,  190,  236,  303,  277,  248,
      302,  278,  246,  249,  309,  310,  190,  190,  247,   89,
      267,  268,   86,  234,  198,  190,   83,  235,  245,  190,
     1023,  197,  190,  236,  303,  277,  248,  190,  278,  246,
      249,  309,  310,  190,  190,  247,  190,  267,  268,  281,

      311,  198,  190,  176,  199,  262,  190,  263,  190,  288,
      264,  200,  312,  282,  190,  286,  190,  287,  201,  289,
      291,  202,  203,  190,  313,  292,  281,  311,  190, 1023,
     1023,  199,  262, 1023,  263,  190,  288,  264,  200,  312,
      282, 1023,  286,  190,  287,  201,  289,  291,  202,  203,
      265,  313,  292, 1023,  190,  190,  204,  293,  266,  304,
      205,  305,  294,  314,  206,  306,  315,  316,  295,  321,
      207,  322,  307,  208,  190,  296,  308,  265, 1023,  317,
      190,  190,  318,  204,  293,  266,  304,  205,  305,  294,
      314,  206,  306,  315,  316,  295,  321,  207,  322,  307,

      208,  190,  296,  308,  323,  319,  317,  190,  190,  318,
      320,  328,  329,  330,  331,  209,  332,  210,  333,  337,
     1023,  334,  211,  335,  338,  339,  340,  212,  190, 1023,
     1023,  323,  319, 1023,  336,  190, 1023,  320,  328,  329,
      330,  331,  209,  332,  210,  333,  337,  324,  334,  211,
      335,  338,  339,  340,  212,  190,  213,  325,  341,  342,
      190,  336,  326,  327,  214,  343,  344,  215,  345,  346,
      216,  347,  348,  217,  324,  349,  218,  353, 1023,  350,
      190, 1023, 1023,  213,  325,  341,  342,  190, 1023,  326,
      327,  214,  343,  344,  215,  345,  346,  216,  347,  348,

      217, 1023,  349,  218,  353,  351,  350,  190,  190,  224,
      352,  354,  358,  359,  355,  225,  226,  227,  360,  361,
      362, 1023,  228,  356,  365,  366,  367,  368,  190, 1023,
      371,  357,  351, 1023, 1023,  190,  224,  352,  354,  358,
      359,  355,  225,  226,  227,  360,  361,  362,  363,  228,
      356,  365,  366,  367,  368,  190,  237,  371,  357,  364,
      190,  369,  372,  373,  370,  375,  377,  378,  379,  374,
      238, 1023, 1023,  489,  490,  363,  239,  240,  376,  190,
      190, 1023, 1023,  237, 1023, 1023,  364,  190,  369,  372,
      373,  370,  375,  377,  378,  379,  374,  238,  190,  190,

      489,  490,  491,  239,  240,  376,  190,  190,  190,  241,
      190,  382,  190,  383,  492,  493, 1023,  242,  190,  386,
     1023,  243,  387,  190,  244,  190,  190, 1023,  190,  491,
      190, 1023,  190,  494, 1023,  190,  241,  190,  382,  190,
      383,  492,  493,  190,  242,  190,  386,  190,  243,  387,
      190,  244,  190,  397,  384,  190,  250,  190,  251,  190,
      494,  252,  385,  398, 1023,  388,  495,  190,  253,  254,
      190,  190,  190,  190,  190,  389,  498,  190,  190,  190,
      397,  384,  499,  250, 1023,  251, 1023, 1023,  252,  385,
      398,  190,  388,  495,  190,  253,  254,  190,  190,  190,

      190,  190,  389,  498,  190,  190,  255,  256,  392,  499,
      257,  190,  390,  258,  259,  393,  500, 1023,  190, 1023,
      260,  190, 1023,  261,  190,  394,  391, 1023,  190,  190,
      190,  190, 1023,  255,  256,  392, 1023,  257,  190,  390,
      258,  259,  393,  500,  190,  190,  190,  260,  190,  190,
      261, 1023,  394,  391,  190,  501,  190,  190,  190,  400,
      410,  395,  399,  396,  401,  190,  190, 1023,  502, 1023,
     1023,  190,  190,  190,  190, 1023,  190,  503,  190, 1023,
     1023,  190,  501,  190, 1023, 1023,  400,  410,  395,  399,
      396,  401,  190,  190,  408,  502,  406,  407,  190, 1023,

      504,  190,  402,  190,  503,  190,  190,  403,  190, 1023,
      190,  411,  190,  404,  412, 1023,  190,  496,  409,  497,
      405,  408, 1023,  406,  407,  190,  190,  504,  190,  402,
      190, 1023,  190,  190,  403,  190,  190, 1023,  411,  190,
      404,  412,  190,  190,  496,  409,  497,  405,  190,  418,
     1023,  190,  505,  190, 1023,  190, 1023, 1023,  419,  190,
     1023,  421,  190,  190,  413, 1023,  414, 1023,  190,  190,
      415,  190,  190, 1023,  190,  190,  418,  416,  190,  505,
      190,  417,  420,  190,  422,  419,  190,  423,  421,  190,
     1023,  413,  190,  414,  190,  190,  190,  415,  190,  190,

      190,  190,  190,  439,  416, 1023,  424,  190,  417,  420,
      190,  422,  425,  190,  423,  508,  190,  190, 1023,  190,
     1023,  190,  190,  190, 1023,  190,  190,  190,  190,  190,
      439,  426,  431,  424,  427,  428,  190,  190, 1023,  425,
      429,  430,  508,  190,  190,  190,  190,  432,  190,  190,
      190,  190,  190,  190,  438,  190,  190, 1023,  426,  431,
      437,  427,  428,  190,  190,  506,  190,  429,  430, 1023,
      190,  190,  190,  190,  432,  190,  190,  190,  190,  446,
      507,  438,  509,  190,  433,  190,  190,  437,  190,  440,
      510,  449,  506,  190,  434, 1023,  190,  190,  190,  435,

      436,  511, 1023,  190, 1023,  190,  446,  507,  190,  509,
      190,  433,  190,  190,  190,  190,  440,  510,  449,  447,
      441,  434,  442,  190,  190,  190,  435,  436,  511,  443,
      190,  444,  190,  190,  190,  190, 1023,  190,  512,  190,
      450,  190,  445,  190,  190,  190,  447,  441,  448,  442,
      451,  190,  190,  190,  190,  453,  443,  190,  444,  190,
      190,  190, 1023,  190,  452,  512,  190,  450,  190,  445,
      190,  190,  190, 1023,  190,  448, 1023,  451,  454,  190,
      190,  190,  453,  190,  190,  457,  190, 1023,  190,  190,
      190,  452,  513, 1023, 1023,  190, 1023,  456,  455,  190,

      190,  190,  462,  190,  190,  454,  190, 1023,  514,  190,
      190,  190,  457,  458,  190,  190,  190,  459,  190,  513,
      190,  463,  515,  460,  456,  455,  190,  190,  461,  462,
      190,  190, 1023,  190,  190,  514,  190,  464,  190,  190,
      458,  190,  190,  190,  459,  190,  465,  190,  463,  515,
      460, 1023,  467,  469,  466,  461,  468,  190,  474,  190,
      190,  190,  190,  190,  464,  190,  190,  190,  470,  190,
      190,  190,  516,  465,  471, 1023,  517,  190,  190,  467,
      469,  466,  190,  468,  190,  474,  190,  190,  190,  190,
      190,  190,  190,  476,  190,  470,  472,  190,  190,  516,

      475,  471,  190,  517,  190,  190,  518,  473,  190,  190,
      480,  190,  190,  477,  190,  190, 1023,  190,  190,  190,
      476,  190,  190,  472,  190,  478,  481,  475,  479,  190,
     1023,  190, 1023,  518,  473,  190, 1023,  480,  190,  190,
      477,  190,  190,  190,  190,  486,  484,  190,  190,  190,
      482,  519,  478,  481, 1023,  479,  483,  488,  190,  485,
      520,  190,  487,  190,  521,  190,  190,  190,  190,  190,
      190,  522,  486,  484,  190,  523,  524,  482,  519,  525,
      526,  190,  527,  483,  488,  528,  485,  520,  190,  487,
      190,  521,  190,  190,  190,  529,  530,  531,  522,  532,

      533,  534,  523,  524,  535,  536,  525,  526,  190,  527,
      537,  539,  528,  540,  541,  542,  543,  544,  545,  546,
      538,  547,  529,  530,  531,  548,  532,  533,  534,  549,
      550,  535,  536,  551,  552,  553,  554,  537,  539,  555,
      540,  541,  542,  543,  544,  545,  546,  538,  547,  556,
      557,  558,  548,  559,  560,  561,  549,  550,  562,  563,
      551,  552,  553,  554,  564,  565,  555,  566,  567,  568,
      569,  570,  571,  572,  573,  574,  556,  557,  558,  578,
      559,  560,  561,  579,  575,  562,  563,  576,  580,  577,
      581,  564,  565,  582,  566,  567,  568,  569,  570,  571,

      572,  573,  574,  583,  584,  585,  578,  587,  588,  586,
      579,  575, 1023,  190,  576,  580,  577,  581,  589,  190,
      582,  590,  190,  190, 1023, 1023,  689,  690, 1023,  591,
      583,  584,  585,  190,  587,  588,  586,  190,  190,  190,
      190,  190,  190,  190, 1023,  589,  190,  592,  590,  190,
      190,  190,  190,  689,  690,  190,  591,  190,  691,  596,
      190,  597,  593,  692,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  594,  592,  190,  190,  190,  190,  190,
      598,  190,  190,  595,  190,  691,  596,  190,  597,  593,
      692,  190,  190,  599,  190,  190,  190,  190,  190,  190,

      594,  601,  190,  190,  190,  190,  600,  598,  190,  602,
      595,  190,  190, 1023,  190,  190, 1023,  603,  190,  190,
      599,  190,  190,  190,  190,  190,  605,  190,  601,  609,
      190,  606,  190,  600,  604,  693,  602,  190,  190,  190,
      190,  190,  190,  608,  603,  190,  607,  190,  190,  190,
      190,  190,  190,  605,  190,  610,  609,  190,  606, 1023,
      190,  604,  693,  611,  190,  190,  190,  190,  190,  190,
      608,  613,  190,  607,  190,  190,  190,  190,  190,  614,
      612,  615,  610,  190,  621, 1023,  190,  190, 1023,  190,
      611,  190,  190,  190,  694,  190,  190,  616,  613,  190,

      190,  190,  190,  190,  190,  190,  614,  612,  615, 1023,
      190,  621,  618,  190,  617,  190,  190,  695,  190,  190,
      190,  694,  190,  190,  616,  190,  190,  190,  190,  620,
      190,  190,  190,  622,  190,  190,  619,  190, 1023,  618,
     1023,  617,  190,  190,  695,  190,  190,  190,  190,  696,
      190,  190,  190,  623,  190,  624,  620,  190, 1023, 1023,
      622,  190,  190,  619,  190,  190,  625,  626,  190,  190,
      190,  190,  190, 1023, 1023,  190,  696,  634,  190,  635,
      623,  190,  624,  190,  190,  190,  627,  190,  190,  190,
     1023,  628,  190,  625,  626,  190,  190,  190,  190,  190,

      629,  631,  190,  190,  634,  190,  635,  190,  190, 1023,
      190,  190,  190,  627,  190,  190,  190,  630,  628,  190,
      636,  633,  190,  637,  190,  632,  190,  629,  631,  190,
      190,  190,  190,  638,  190,  190,  190,  190,  190,  190,
      190,  190, 1023,  190,  630,  640,  190,  636,  633,  190,
      637,  642,  632,  639,  190,  190,  190,  190,  190,  643,
      638,  190, 1023,  190,  190, 1023,  190,  190,  190,  641,
      190,  190,  640,  697,  190,  190,  644,  190,  642,  190,
      639,  190,  190,  190,  190,  645,  643,  190,  190,  190,
      190,  190,  646,  647, 1023,  648,  641,  190,  190,  190,

      697,  190,  190,  644,  190,  190,  190,  190,  190,  190,
      190,  190,  645, 1023,  190, 1023,  190,  190,  190,  646,
      647,  650,  648,  649,  190,  190,  190,  190,  190,  190,
     1023,  654,  190,  190,  190,  190,  190,  190,  190,  655,
      651,  653,  652,  698, 1023, 1023,  699,  190,  650,  190,
      649,  190,  190,  190,  190,  190,  190,  656,  654,  190,
      190,  190,  190, 1023, 1023, 1023,  655,  651,  653,  652,
      698,  657,  190,  699,  190,  190,  190,  190,  190, 1023,
      190,  190,  190,  658,  656,  659,  190,  660,  190,  190,
      661,  190,  190,  190, 1023,  190,  662,  190,  657,  190,

     1023,  663,  190, 1023,  190,  190,  665,  190,  190,  190,
      658,  190,  659,  190,  660,  664,  190,  661,  190,  190,
      190,  190,  190,  662,  190,  190,  190,  190,  663,  190,
      190,  667,  190,  665,  190,  190,  190, 1023,  190,  190,
      190,  700,  664,  190, 1023,  668,  669,  666,  190,  190,
      190,  701,  190,  190,  190,  190,  190,  190,  667,  190,
      190,  190,  190,  190,  190,  673,  190, 1023,  700,  190,
      672,  670,  668,  669,  666,  702,  190,  190,  701,  671,
      190,  190,  190, 1023,  190,  190,  190,  190,  190,  190,
      674,  190,  673,  190,  190, 1023,  190,  672,  670,  675,

     1023,  703,  702,  676,  678,  677,  671,  190,  190,  190,
      190,  190,  190,  190,  190,  679,  190,  674,  680,  190,
      190,  190,  682,  704,  190, 1023,  675,  190,  703,  190,
      676,  678,  677, 1023, 1023,  190,  190,  190, 1023,  190,
      190,  190,  679,  681,  190,  680,  190,  190,  190,  682,
      704,  190,  190,  683,  190,  190,  190,  190,  705, 1023,
      687,  685,  190,  684,  706,  686,  190,  707,  190,  708,
      681,  190,  190,  190,  190,  190,  709,  190,  710,  190,
      683,  711,  190,  712,  190,  705,  688,  687,  685,  713,
      684,  706,  686,  190,  707,  190,  708,  714,  715,  190,

      190,  716,  717,  709,  190,  710,  718,  719,  711,  720,
      712,  721,  722,  688,  723,  724,  713,  726,  727,  728,
      190,  729,  730,  731,  714,  715,  725,  732,  716,  717,
      733,  734,  735,  718,  719,  736,  720,  737,  721,  722,
      738,  723,  724,  739,  726,  727,  728,  740,  729,  730,
      731,  741,  742,  725,  732,  743,  744,  733,  734,  735,
      745,  746,  736,  747,  737,  748,  749,  738,  750,  751,
      739,  752,  753,  754,  740,  755,  756,  757,  741,  742,
      758,  759,  743,  744,  760,  761,  190,  745,  746,  190,
      747, 1023,  748,  749, 1023,  750,  751,  190,  752,  753,

      754,  190,  755,  756,  757,  190,  764,  758,  759,  765,
      762,  760,  761,  190,  763,  767,  190,  190,  766,  190,
     1023,  190, 1023,  768,  190,  190, 1023,  190,  190,  190,
     1023,  190,  190,  764, 1023,  190,  765,  762, 1023,  190,
      190,  763,  767, 1023,  190,  766,  190,  190,  190,  190,
      768,  190,  190,  190,  190,  190,  190,  190,  190, 1023,
      190,  769,  190,  190, 1023,  190,  190,  190,  770,  835,
      773,  190,  771,  190,  190,  190,  190,  190,  190,  772,
      190,  190,  190,  190,  190,  190,  775,  190,  769,  190,
      190,  190,  190, 1023,  190,  770,  835,  773,  190,  771,

      190,  190,  190,  776,  190,  774,  772,  190,  190,  190,
      190, 1023,  190,  775,  190,  777,  190,  190,  190,  190,
      190,  190, 1023,  778, 1023,  786,  836,  190,  190,  837,
      776,  190,  774, 1023,  190,  190,  190,  190,  779,  190,
      190,  190,  777, 1023,  190,  190,  190,  190,  190,  190,
      778,  190,  786,  836,  190,  190,  837,  190,  190,  780,
      781,  190,  190, 1023,  190,  779,  190,  190,  190,  190,
      190,  190,  190,  782, 1023,  190,  190,  190,  190,  784,
     1023,  190,  190,  190,  190,  783,  780,  781,  190,  785,
      190,  190, 1023,  190,  190,  190,  190,  190,  190,  190,

      782,  788,  838,  190,  190,  190,  784,  190,  190,  787,
      190,  190,  783,  190,  190,  190,  785,  190,  190,  190,
      190,  190,  789,  190,  790,  190,  190,  190,  788,  838,
      190,  190,  190,  791,  190,  190,  787,  190,  190,  792,
      190,  190,  190,  190, 1023, 1023,  190,  190,  190,  789,
      190,  790,  190,  190,  190, 1023,  190,  190,  190,  190,
      791,  793,  190, 1023,  190,  190,  792,  190,  190,  795,
      190,  190,  794,  190,  190,  190,  190,  190,  796,  797,
      190,  190,  190,  190,  190,  190,  190,  190,  793,  799,
      798,  190,  190,  190,  190,  190,  795,  190,  190,  794,

      190,  190,  190,  190,  190,  796,  797,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  799,  798,  190,  802,
      190, 1023,  801,  190,  190,  800, 1023, 1023,  190,  190,
      190,  190, 1023,  190,  190,  190,  806,  190,  190,  190,
      190,  190,  190,  190,  805,  190,  802,  803,  804,  801,
      190,  839,  800,  190,  807, 1023,  190,  190,  190,  808,
      190,  190,  190,  806,  190,  190,  190,  190,  190,  190,
      190,  805,  190,  840,  803,  804,  190,  809,  839,  190,
      190,  807,  810,  190,  190,  190,  808,  190,  190,  190,
      190,  190,  190,  811,  190,  812,  190,  813,  814,  190,

      840,  190,  841,  190,  809,  190,  190,  842, 1023,  810,
      190,  190,  190,  843,  190,  190,  190,  190,  190,  190,
      811,  190,  812,  190,  813,  814,  190,  190,  190,  841,
      816,  815,  190,  190,  842,  190,  818,  190,  190,  820,
      843,  817,  190,  190, 1023,  190,  190,  190,  190,  819,
      190,  190,  190,  190,  190,  822,  821,  816,  815,  190,
      190,  190,  190,  818,  190,  190,  820,  190,  817,  844,
      190,  190,  190,  190,  190,  190,  819,  823,  190,  190,
      190,  190,  822,  821,  190, 1023,  190,  190,  190,  190,
      825,  190,  190,  190,  190, 1023,  844, 1023,  190,  190,

      190,  190,  190,  824,  823,  845,  190,  846,  190,  190,
      826,  190,  190, 1023,  190,  831,  190,  825, 1023,  190,
      190,  190,  827,  828,  190,  190,  190,  190,  190, 1023,
      824, 1023,  845,  190,  846,  190,  190,  826,  847,  190,
      829,  190,  831,  830,  190,  190, 1023,  190,  190,  827,
      828,  190,  190,  190,  190,  190,  190,  190,  832,  834,
      190,  190,  190,  848,  849,  847,  850,  829,  190,  190,
      830,  190,  190,  833,  190,  190,  190,  190,  851,  190,
      190,  852,  190,  190,  190,  832,  834,  190,  190,  190,
      848,  849,  853,  850,  854,  855,  190,  856,  857,  858,

      833,  859,  190,  190,  190,  851,  190,  190,  852,  860,
      861,  862,  863,  864,  865,  866,  190,  867,  868,  853,
      869,  854,  855,  870,  856,  857,  858,  871,  859,  872,
      873,  874,  875,  876,  877,  878,  860,  861,  862,  863,
      864,  865,  866,  879,  867,  868,  880,  869,  881,  882,
      870,  883,  884,  885,  871, 1023,  872,  873,  874,  875,
      876,  877,  878,  190,  190,  190,  937,  190,  887,  888,
      879,  938, 1023,  880,  939,  881,  882,  940,  883,  884,
      885,  889,  190,  190,  190,  190,  886,  190,  190,  190,
      190,  190,  190,  937,  190,  887,  888,  190,  938,  892,

      190,  939,  190, 1023,  940,  895,  890, 1023,  889,  190,
      190,  190,  190,  886,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  892,  190,  891,  190,
      894,  893,  895,  890,  898, 1023,  190, 1023,  190,  899,
     1023,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  896,  190,  190,  190,  891,  190,  894,  893,  190,
     1023,  898,  897,  190,  190,  190,  899,  190,  190,  190,
      190,  941,  942,  190, 1023,  904,  190,  190,  896,  900,
      190,  190,  901,  190,  190,  190,  190,  190,  190,  897,
      902,  190,  903,  190,  190, 1023,  190,  190,  941,  942,

      190,  190,  904,  190,  190,  190,  900,  943,  190,  901,
      190,  190,  190,  190,  190,  190,  190,  902,  190,  903,
      190,  190,  190,  190,  190,  905,  190,  190,  190,  906,
      190,  908,  190, 1023,  943,  190,  190,  190,  190,  907,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      910, 1023,  905,  190,  190, 1023,  906,  190,  908,  909,
      190,  190,  190,  190,  190,  190,  907,  912,  190,  190,
      190,  190,  190,  190,  190,  190,  911,  910,  190, 1023,
      190,  190,  190, 1023,  913, 1023,  909,  190,  190,  190,
      190,  190,  190, 1023,  912,  190,  914,  190,  190,  190,

      190,  190,  190,  911,  190,  190,  190,  190,  190,  190,
      190,  913,  190, 1023,  190,  915,  190,  190,  917,  190,
      190,  916,  190,  914, 1023,  190,  190,  190,  190,  944,
     1023,  190,  190,  190,  190, 1023,  190,  190,  190,  190,
      920,  190,  915,  190,  190,  917,  190,  190,  916,  190,
      921,  922,  190,  190, 1023,  190,  944,  918, 1023,  190,
      190,  190,  919,  190,  190,  190,  190,  920,  190,  190,
      945,  190,  190,  190, 1023,  190,  190,  921,  922,  190,
      923,  190,  190,  924,  918,  925,  190,  190,  190,  919,
      926,  190,  946,  190,  190,  190,  190,  945, 1023,  190,

      947,  190,  190,  190,  190,  190,  190,  923,  190,  190,
      924, 1023,  925,  190,  190,  190,  928,  926,  927,  946,
      929,  190,  930,  190,  190,  190,  190,  947,  190,  190,
      190,  190,  190,  190,  931,  933,  190,  932,  190,  190,
     1023,  190, 1023,  928, 1023,  927,  190,  929,  948,  930,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
     1023,  931,  933,  935,  932,  190,  190,  190,  936,  190,
      949,  934,  190,  190,  950,  948,  951,  190,  952,  953,
      954,  190,  190,  955,  190,  190,  190,  190,  956,  190,
      935,  957,  190,  958,  190,  936,  190,  949,  934,  190,

      959,  950,  960,  951,  190,  952,  953,  954,  961,  962,
      955,  963,  964,  190,  190,  956,  190,  190,  957,  190,
      958,  966,  190,  190, 1023, 1023,  965,  959, 1023,  960,
      968,  190,  190,  190, 1023,  961,  962,  190,  963,  964,
      190,  190,  190,  190,  190,  967,  190, 1023,  966,  190,
      190,  190,  969,  965,  190,  190,  190,  968,  190,  190,
      190,  970,  991,  971,  190,  190,  190,  190,  190,  190,
      190,  190,  967,  190,  190,  190,  190,  190,  190,  969,
      972,  190,  190,  190, 1023,  190,  190,  190,  970,  991,
      971,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  973,  190,  972,  190,  190,
      974,  190,  190,  190,  190,  190,  190, 1023,  190,  190,
      190,  190,  190,  190,  190,  977,  190,  190,  190,  975,
      190,  190,  973,  190,  976,  190,  190,  974,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  979,
      190,  978,  977,  190,  190,  190,  975,  190,  190,  190,
      992,  976, 1023,  981,  190,  190,  190,  190,  190,  190,
     1023,  190,  190,  190,  190,  190,  979,  190,  978,  993,
      190,  190, 1023,  190,  980,  982,  190,  992,  190,  190,
      981,  190,  190,  190,  190,  190,  190,  983,  190,  190,

      190,  190,  190, 1023, 1023, 1023,  993,  984,  190,  190,
      190,  980,  982,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  983,  190,  190,  986,  987,  190,
      985,  190,  190,  190,  984,  190,  190,  190, 1023,  994,
      190,  190,  190,  190,  190,  190,  190,  190,  988, 1023,
      190,  190,  190,  190,  986,  987,  190,  985,  190,  190,
      190,  190,  190,  190,  190,  190,  994,  190,  995,  190,
      190,  996,  990,  997,  190,  988,  989,  998,  190,  190,
      190,  190,  999,  190, 1023,  190,  190,  190,  190,  190,
      190,  190,  190, 1023,  190,  995,  190,  190,  996,  990,

      997, 1000,  190,  989,  998,  190,  190,  190,  190,  999,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190, 1023, 1009, 1000,  190,
     1001,  190,  190,  190,  190,  190,  190, 1023,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
     1004,  190,  190, 1002, 1009,  190,  190, 1001,  190,  190,
     1023,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190, 1023,  190, 1023, 1003,  190, 1023, 1004,  190,  190,
     1002,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190, 1010, 1023, 1008,  190,  190,  190,  190,

     1005, 1003,  190, 1006, 1011,  190,  190,  190,  190, 1012,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
     1010, 1007, 1008, 1013,  190,  190,  190, 1005, 1023,  190,
     1006, 1011,  190,  190,  190,  190, 1012,  190,  190, 1014,
      190,  190,  190,  190,  190,  190,  190,  190, 1007,  190,
     1013,  190,  190, 1015, 1016,  190,  190, 1023,  190, 1019,
      190,  190,  190,  190,  190,  190, 1014, 1017,  190, 1020,
      190,  190,  190, 1021,  190, 1018,  190,  190,  190,  190,
     1015, 1016,  190,  190,  190,  190, 1019,  190,  190,  190,
      190,  190, 1022,  190, 1017,  190, 1020,  190,  190,  190,

     1021, 1023, 1018,  190,  190,  190, 1023,  190, 1023,  190,
      190,  190, 1023, 1023,  190,  190,  190, 1023, 1023, 1022,
      190, 1023,  190, 1023,  190,  190, 1023, 1023, 1023, 1023,
      190, 1023, 1023, 1023,  190, 1023,  190, 1023, 1023, 1023,
     1023, 1023,  190,   84, 1023, 1023,   84,   85, 1023,   85,
       85,  176, 1023,  176,  176,  179, 1023,  179,  179,  180,
     1023,  180,  180,  190, 1023,  190,  190,    5, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023
    } ;

static const flex_int16_t yy_chk[4136] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13, 1026,
       13,   15,   15,   16,   16,   19,   20,   19,   22,  381,
       21,   28,   22,   19,  272,   19,   22,   21,   29,   19,
       19,   42,   22,   96,   21,   22,   20,   21,   21,   23,
      185,   23,   19,   20,   19,   22,   23,   21,   28,   22,
       19,   23,   19,   22,   21,   29,   19,   19,   42,   22,
       96,   21,   22,   20,   21,   21,   23,   26,   23,  184,

       25,   45,   45,   23,   40,   26,   25,  180,   23,   24,
       97,   26,   40,   46,   46,   53,   53,   24,   30,   51,
       24,   51,   30,   24,   26,  100,   24,   25,   30,   24,
       31,   40,   26,   25,   31,   27,   24,   97,   26,   40,
       31,   27,   27,   27,   24,   30,  179,   24,   27,   30,
       24,   32,  100,   24,   90,   30,   24,   31,   54,   54,
       36,   31,   27,   34,   36,   32,   89,   31,   27,   27,
       27,   32,   32,   33,   34,   27,   85,   39,   32,   39,
       34,   33,   39,   67,   37,   33,   37,   36,   33,   37,
       34,   36,   32,   41,   41,   84,   37,   37,   32,   32,

       33,   34,   81,   67,   39,   56,   39,   34,   33,   39,
       67,   37,   33,   37,   64,   33,   37,   66,   64,   55,
       41,   41,   64,   37,   37,   38,   38,   66,   64,   38,
       67,  101,   38,   38,   82,   82,  105,   66,   64,   38,
      108,   64,   38,   52,   66,   64,   88,   88,   50,   64,
      177,  177,   38,   38,   66,   64,   38,   48,  101,   38,
       38,  183,  183,  105,   66,   64,   38,  108,   47,   38,
       57,   57,   63,   57,   57,   57,   57,   57,   57,   63,
       57,   57,   57,   68,   73,   63,   57,   68,   57,   98,
      111,  111,   63,   68,   57,  104,   57,   98,   43,   63,

       57,   57,  104,   68,   73,   80,   63,  112,  113,   18,
       68,   73,   63,   57,   68,   57,   98,  111,  111,   63,
       68,   57,  104,   57,   98,   80,  114,   57,   57,  104,
       68,   73,   80,  115,  112,  113,   57,   58,   58,   17,
       58,   58,   58,   58,   58,   58,   69,   58,   58,   58,
       69,   72,   80,  114,   58,   72,   69,  116,   99,   74,
      115,   99,   72,   74,  118,  119,   69,   79,   72,   14,
       79,   79,   12,   69,   58,   72,    9,   69,   72,   74,
        5,   58,   72,   69,  116,   99,   74,   79,   99,   72,
       74,  118,  119,   69,   79,   72,   77,   79,   79,  102,

      120,   58,   72,   58,   59,   77,   74,   77,   59,  107,
       77,   59,  121,  102,   79,  106,   77,  106,   59,  107,
      109,   59,   59,   77,  122,  109,  102,  120,   59,    0,
        0,   59,   77,    0,   77,   59,  107,   77,   59,  121,
      102,    0,  106,   77,  106,   59,  107,  109,   59,   59,
       78,  122,  109,    0,   78,   59,   60,  110,   78,  117,
       60,  117,  110,  123,   60,  117,  124,  125,  110,  128,
       60,  130,  117,   60,   78,  110,  117,   78,    0,  126,
       60,   78,  126,   60,  110,   78,  117,   60,  117,  110,
      123,   60,  117,  124,  125,  110,  128,   60,  130,  117,

       60,   78,  110,  117,  131,  127,  126,   60,   61,  126,
      127,  133,  134,  135,  136,   61,  137,   61,  137,  139,
        0,  138,   61,  138,  140,  141,  142,   61,   61,    0,
        0,  131,  127,    0,  138,   61,    0,  127,  133,  134,
      135,  136,   61,  137,   61,  137,  139,  132,  138,   61,
      138,  140,  141,  142,   61,   61,   62,  132,  143,  144,
       62,  138,  132,  132,   62,  145,  146,   62,  148,  149,
       62,  150,  151,   62,  132,  152,   62,  154,    0,  152,
       62,    0,    0,   62,  132,  143,  144,   62,    0,  132,
      132,   62,  145,  146,   62,  148,  149,   62,  150,  151,

       62,    0,  152,   62,  154,  153,  152,   62,   65,   65,
      153,  155,  157,  158,  156,   65,   65,   65,  159,  160,
      161,    0,   65,  156,  163,  164,  165,  166,   65,    0,
      168,  156,  153,    0,    0,   65,   65,  153,  155,  157,
      158,  156,   65,   65,   65,  159,  160,  161,  162,   65,
      156,  163,  164,  165,  166,   65,   70,  168,  156,  162,
       70,  167,  169,  170,  167,  171,  172,  173,  174,  170,
       70,    0,    0,  274,  276,  162,   70,   70,  171,  190,
       70,    0,    0,   70,    0,    0,  162,   70,  167,  169,
      170,  167,  171,  172,  173,  174,  170,   70,  192,  190,

      274,  276,  277,   70,   70,  171,  190,   70,   71,   71,
      198,  191,  191,  192,  279,  281,    0,   71,  192,  194,
        0,   71,  194,  194,   71,  192,  190,    0,   71,  277,
      198,    0,  191,  282,    0,   71,   71,  198,  191,  191,
      192,  279,  281,  194,   71,  192,  194,  193,   71,  194,
      194,   71,  195,  202,  193,   71,   75,  198,   75,  191,
      282,   75,  193,  202,    0,  195,  283,  193,   75,   75,
      194,  224,  195,  202,  193,  196,  285,  196,   75,  195,
      202,  193,  286,   75,    0,   75,    0,    0,   75,  193,
      202,  224,  195,  283,  193,   75,   75,  196,  224,  195,

      202,  199,  196,  285,  196,   75,   76,   76,  199,  286,
       76,  197,  197,   76,   76,  199,  287,    0,  224,    0,
       76,  199,    0,   76,  196,  200,  197,    0,  199,  200,
       76,  197,    0,   76,   76,  199,    0,   76,  197,  197,
       76,   76,  199,  287,  204,  203,  209,   76,  199,  200,
       76,    0,  200,  197,  201,  288,  200,   76,  197,  204,
      209,  201,  203,  201,  204,  203,  209,    0,  289,    0,
        0,  204,  203,  209,  201,    0,  200,  291,  207,    0,
        0,  201,  288,  206,    0,    0,  204,  209,  201,  203,
      201,  204,  203,  209,  207,  289,  206,  206,  207,    0,

      293,  201,  205,  206,  291,  207,  205,  205,  208,    0,
      206,  210,  210,  205,  211,    0,  211,  284,  208,  284,
      205,  207,    0,  206,  206,  207,  205,  293,  208,  205,
      206,    0,  210,  205,  205,  208,  211,    0,  210,  210,
      205,  211,  213,  211,  284,  208,  284,  205,  216,  213,
        0,  214,  294,  205,    0,  208,    0,    0,  214,  210,
        0,  216,  213,  211,  212,    0,  212,    0,  216,  213,
      212,  214,  215,    0,  217,  216,  213,  212,  214,  294,
      218,  212,  215,  230,  217,  214,  212,  218,  216,  213,
        0,  212,  215,  212,  217,  216,  219,  212,  214,  215,

      218,  217,  220,  230,  212,    0,  219,  218,  212,  215,
      230,  217,  220,  212,  218,  296,  219,  221,    0,  215,
        0,  217,  220,  219,    0,  223,  222,  218,  225,  220,
      230,  221,  225,  219,  221,  222,  226,  221,    0,  220,
      222,  223,  296,  219,  221,  223,  222,  226,  225,  220,
      229,  228,  223,  222,  229,  225,  226,    0,  221,  225,
      228,  221,  222,  226,  221,  295,  234,  222,  223,    0,
      229,  228,  223,  222,  226,  225,  237,  229,  228,  234,
      295,  229,  297,  226,  227,  227,  234,  228,  231,  231,
      298,  237,  295,  234,  227,    0,  237,  229,  228,  227,

      227,  299,    0,  237,    0,  227,  234,  295,  231,  297,
      235,  227,  227,  234,  232,  231,  231,  298,  237,  235,
      232,  227,  232,  237,  242,  238,  227,  227,  299,  233,
      235,  233,  227,  233,  232,  231,    0,  235,  300,  236,
      238,  232,  233,  239,  242,  238,  235,  232,  236,  232,
      239,  242,  238,  233,  241,  241,  233,  235,  233,  236,
      233,  232,    0,  239,  240,  300,  236,  238,  240,  233,
      239,  242,  238,    0,  241,  236,    0,  239,  243,  243,
      233,  241,  241,  244,  245,  246,  236,    0,  240,  246,
      239,  240,  301,    0,    0,  240,    0,  245,  244,  243,

      249,  241,  249,  244,  245,  243,  243,    0,  303,  246,
      244,  245,  246,  247,  248,  240,  246,  247,  250,  301,
      249,  250,  304,  248,  245,  244,  243,  249,  248,  249,
      244,  245,    0,  247,  248,  303,  246,  251,  250,  251,
      247,  248,  252,  253,  247,  250,  251,  249,  250,  304,
      248,    0,  252,  254,  251,  248,  253,  254,  258,  251,
      247,  248,  252,  253,  251,  250,  251,  256,  255,  252,
      253,  255,  305,  251,  256,    0,  306,  254,  258,  252,
      254,  251,  260,  253,  254,  258,  251,  256,  257,  252,
      253,  255,  259,  260,  256,  255,  257,  261,  255,  305,

      259,  256,  260,  306,  254,  258,  307,  257,  257,  260,
      263,  263,  259,  261,  256,  257,    0,  261,  255,  259,
      260,  262,  264,  257,  261,  262,  264,  259,  262,  260,
        0,  263,    0,  307,  257,  257,    0,  263,  263,  259,
      261,  262,  264,  265,  261,  267,  266,  268,  262,  264,
      265,  308,  262,  264,    0,  262,  265,  269,  263,  266,
      309,  269,  268,  265,  310,  267,  266,  268,  262,  264,
      265,  311,  267,  266,  268,  313,  314,  265,  308,  315,
      316,  269,  317,  265,  269,  318,  266,  309,  269,  268,
      265,  310,  267,  266,  268,  319,  320,  321,  311,  322,

      323,  324,  313,  314,  325,  326,  315,  316,  269,  317,
      327,  328,  318,  329,  331,  332,  333,  334,  335,  336,
      327,  337,  319,  320,  321,  338,  322,  323,  324,  339,
      340,  325,  326,  342,  343,  344,  345,  327,  328,  346,
      329,  331,  332,  333,  334,  335,  336,  327,  337,  347,
      348,  349,  338,  350,  351,  352,  339,  340,  353,  354,
      342,  343,  344,  345,  355,  356,  346,  358,  359,  360,
      361,  363,  364,  365,  366,  368,  347,  348,  349,  370,
      350,  351,  352,  371,  368,  353,  354,  369,  372,  369,
      373,  355,  356,  374,  358,  359,  360,  361,  363,  364,

      365,  366,  368,  375,  376,  377,  370,  378,  379,  377,
      371,  368,    0,  382,  369,  372,  369,  373,  383,  384,
      374,  385,  386,  387,    0,    0,  489,  490,    0,  386,
      375,  376,  377,  382,  378,  379,  377,  389,  383,  384,
      382,  385,  386,  387,    0,  383,  384,  388,  385,  386,
      387,  388,  390,  489,  490,  391,  386,  389,  491,  393,
      382,  393,  390,  492,  389,  383,  384,  394,  385,  386,
      387,  388,  390,  391,  388,  391,  392,  395,  388,  390,
      394,  393,  391,  392,  389,  491,  393,  394,  393,  390,
      492,  396,  399,  395,  394,  398,  392,  395,  388,  390,

      391,  397,  391,  392,  395,  397,  396,  394,  393,  398,
      392,  396,  399,    0,  394,  398,    0,  400,  396,  399,
      395,  401,  398,  392,  395,  397,  403,  402,  397,  406,
      403,  404,  397,  396,  402,  493,  398,  400,  396,  399,
      407,  401,  398,  405,  400,  405,  404,  402,  401,  406,
      403,  404,  397,  403,  402,  407,  406,  403,  404,    0,
      407,  402,  493,  408,  400,  405,  408,  407,  401,  409,
      405,  410,  405,  404,  402,  411,  406,  403,  404,  412,
      409,  413,  407,  412,  419,    0,  408,  407,    0,  409,
      408,  410,  405,  408,  494,  411,  409,  414,  410,  414,

      415,  413,  411,  412,  419,  416,  412,  409,  413,    0,
      412,  419,  416,  408,  415,  418,  409,  496,  410,  414,
      415,  494,  411,  417,  414,  416,  414,  415,  413,  418,
      412,  419,  416,  420,  421,  418,  417,  420,    0,  416,
        0,  415,  418,  417,  496,  422,  414,  415,  423,  499,
      417,  425,  416,  422,  421,  423,  418,  420,    0,    0,
      420,  421,  418,  417,  420,  422,  424,  425,  423,  424,
      417,  425,  422,    0,    0,  423,  499,  433,  425,  434,
      422,  421,  423,  426,  420,  428,  426,  427,  430,  424,
        0,  427,  422,  424,  425,  423,  424,  433,  425,  434,

      428,  430,  429,  426,  433,  428,  434,  427,  430,    0,
      426,  432,  428,  426,  427,  430,  424,  429,  427,  431,
      435,  432,  429,  436,  433,  431,  434,  428,  430,  429,
      426,  432,  428,  436,  427,  430,  438,  437,  432,  431,
      435,  439,    0,  436,  429,  438,  431,  435,  432,  429,
      436,  441,  431,  437,  440,  442,  438,  437,  432,  442,
      436,  439,    0,  438,  437,    0,  431,  435,  439,  440,
      436,  441,  438,  500,  440,  442,  443,  443,  441,  447,
      437,  440,  442,  438,  437,  444,  442,  450,  439,  444,
      445,  446,  445,  446,    0,  447,  440,  443,  441,  447,

      500,  440,  442,  443,  443,  449,  447,  450,  448,  444,
      445,  446,  444,    0,  450,    0,  444,  445,  446,  445,
      446,  449,  447,  448,  443,  449,  447,  453,  448,  452,
        0,  454,  449,  451,  450,  448,  444,  445,  446,  455,
      451,  453,  452,  501,    0,    0,  502,  453,  449,  452,
      448,  454,  449,  451,  453,  448,  452,  456,  454,  455,
      451,  456,  457,    0,    0,    0,  455,  451,  453,  452,
      501,  457,  458,  502,  453,  461,  452,  459,  454,    0,
      451,  456,  457,  458,  456,  459,  455,  460,  456,  457,
      461,  460,  458,  462,    0,  461,  462,  459,  457,  458,

        0,  463,  461,    0,  459,  464,  465,  466,  456,  457,
      458,  460,  459,  462,  460,  464,  468,  461,  460,  458,
      462,  463,  461,  462,  459,  464,  465,  466,  463,  467,
      469,  468,  464,  465,  466,  471,  468,    0,  460,  470,
      462,  504,  464,  468,    0,  469,  470,  467,  463,  467,
      469,  505,  464,  465,  466,  471,  467,  469,  468,  470,
      472,  474,  471,  468,  473,  475,  470,    0,  504,  476,
      474,  472,  469,  470,  467,  506,  467,  469,  505,  473,
      472,  474,  471,    0,  473,  475,  470,  472,  474,  476,
      477,  473,  475,  478,  479,    0,  476,  474,  472,  477,

        0,  507,  506,  478,  479,  478,  473,  472,  474,  481,
      477,  473,  475,  478,  479,  480,  476,  477,  481,  480,
      478,  479,  483,  509,  483,    0,  477,  482,  507,  481,
      478,  479,  478,    0,    0,  484,  481,  477,    0,  480,
      478,  479,  480,  482,  483,  481,  480,  482,  485,  483,
      509,  483,  486,  484,  482,  484,  481,  487,  510,    0,
      487,  486,  484,  485,  511,  486,  480,  514,  485,  515,
      482,  483,  486,  488,  482,  485,  516,  487,  517,  486,
      484,  518,  484,  519,  487,  510,  488,  487,  486,  520,
      485,  511,  486,  488,  514,  485,  515,  522,  525,  486,

      488,  526,  528,  516,  487,  517,  530,  532,  518,  533,
      519,  534,  535,  488,  536,  537,  520,  539,  543,  545,
      488,  547,  548,  548,  522,  525,  537,  549,  526,  528,
      550,  552,  553,  530,  532,  554,  533,  555,  534,  535,
      556,  536,  537,  558,  539,  543,  545,  559,  547,  548,
      548,  560,  561,  537,  549,  562,  563,  550,  552,  553,
      564,  565,  554,  567,  555,  568,  569,  556,  570,  573,
      558,  575,  576,  577,  559,  578,  579,  580,  560,  561,
      581,  582,  562,  563,  584,  586,  591,  564,  565,  592,
      567,    0,  568,  569,    0,  570,  573,  589,  575,  576,

      577,  590,  578,  579,  580,  593,  591,  581,  582,  592,
      589,  584,  586,  591,  590,  594,  592,  589,  593,  595,
        0,  590,    0,  596,  589,  593,    0,  596,  590,  597,
        0,  598,  593,  591,    0,  594,  592,  589,    0,  595,
      603,  590,  594,    0,  589,  593,  595,  596,  590,  597,
      596,  598,  593,  599,  596,  600,  597,  601,  598,    0,
      603,  599,  594,  604,    0,  602,  595,  603,  600,  691,
      604,  606,  601,  599,  596,  600,  597,  601,  598,  602,
      599,  608,  600,  604,  601,  602,  606,  603,  599,  605,
      604,  606,  602,    0,  612,  600,  691,  604,  606,  601,

      599,  608,  600,  607,  601,  605,  602,  607,  608,  605,
      604,    0,  602,  606,  612,  609,  605,  609,  606,  610,
      613,  612,    0,  610,    0,  620,  693,  607,  608,  694,
      607,  611,  605,    0,  607,  621,  605,  609,  611,  610,
      613,  612,  609,    0,  609,  620,  610,  613,  614,  615,
      610,  611,  620,  693,  607,  621,  694,  616,  611,  614,
      615,  623,  621,    0,  609,  611,  610,  613,  614,  615,
      617,  624,  620,  616,    0,  614,  615,  616,  611,  618,
        0,  623,  621,  618,  616,  617,  614,  615,  623,  619,
      617,  624,    0,  619,  622,  614,  615,  617,  624,  627,

      616,  625,  695,  618,  616,  625,  618,  629,  623,  622,
      618,  626,  617,  619,  622,  628,  619,  617,  624,  627,
      619,  622,  626,  630,  628,  625,  627,  629,  625,  695,
      618,  626,  625,  630,  629,  628,  622,  631,  626,  632,
      619,  622,  628,  630,    0,    0,  627,  638,  633,  626,
      630,  628,  625,  634,  629,    0,  635,  631,  626,  632,
      630,  633,  628,    0,  631,  636,  632,  638,  633,  635,
      630,  640,  634,  634,  638,  633,  635,  637,  636,  637,
      634,  641,  639,  635,  631,  636,  632,  642,  633,  639,
      637,  640,  636,  644,  638,  633,  635,  637,  640,  634,

      634,  641,  639,  635,  637,  636,  637,  642,  641,  639,
      643,  646,  636,  644,  642,  645,  639,  637,  640,  647,
      644,    0,  645,  650,  637,  643,    0,    0,  641,  639,
      643,  646,    0,  648,  642,  645,  650,  643,  646,  647,
      644,  649,  645,  650,  649,  651,  647,  648,  648,  645,
      650,  696,  643,  648,  652,    0,  652,  643,  646,  653,
      648,  649,  645,  650,  654,  651,  647,  657,  649,  655,
      650,  649,  651,  697,  648,  648,  652,  654,  696,  653,
      648,  652,  655,  652,  654,  656,  653,  657,  649,  655,
      660,  654,  651,  656,  657,  658,  655,  659,  660,  658,

      697,  659,  698,  652,  654,  656,  653,  700,    0,  655,
      660,  654,  656,  701,  657,  662,  655,  660,  661,  658,
      656,  659,  658,  666,  659,  660,  658,  664,  659,  698,
      662,  661,  656,  663,  700,  662,  664,  660,  661,  667,
      701,  663,  662,  666,    0,  661,  658,  664,  659,  665,
      666,  665,  668,  663,  664,  669,  668,  662,  661,  667,
      663,  671,  662,  664,  672,  661,  667,  670,  663,  702,
      666,  665,  668,  674,  664,  669,  665,  670,  665,  668,
      663,  671,  669,  668,  672,    0,  667,  670,  671,  673,
      675,  672,  675,  674,  670,    0,  702,    0,  665,  668,

      674,  676,  669,  673,  670,  704,  677,  705,  671,  673,
      676,  672,  675,    0,  670,  681,  673,  675,    0,  675,
      674,  676,  677,  678,  683,  679,  677,  678,  676,    0,
      673,    0,  704,  677,  705,  681,  673,  676,  706,  675,
      679,  680,  681,  680,  683,  679,    0,  678,  676,  677,
      678,  683,  679,  677,  678,  682,  685,  684,  682,  686,
      687,  680,  681,  707,  708,  706,  709,  679,  680,  688,
      680,  683,  679,  684,  678,  682,  685,  684,  710,  686,
      687,  711,  682,  685,  684,  682,  686,  687,  680,  688,
      707,  708,  712,  709,  715,  717,  688,  718,  720,  723,

      684,  724,  682,  685,  684,  710,  686,  687,  711,  725,
      726,  731,  733,  734,  735,  738,  688,  739,  740,  712,
      741,  715,  717,  742,  718,  720,  723,  744,  724,  745,
      746,  747,  748,  749,  750,  751,  725,  726,  731,  733,
      734,  735,  738,  752,  739,  740,  754,  741,  755,  756,
      742,  758,  759,  760,  744,    0,  745,  746,  747,  748,
      749,  750,  751,  762,  763,  764,  835,  765,  766,  767,
      752,  837,    0,  754,  838,  755,  756,  839,  758,  759,
      760,  768,  768,  762,  763,  764,  764,  765,  766,  767,
      762,  763,  764,  835,  765,  766,  767,  769,  837,  771,

      772,  838,  768,    0,  839,  775,  769,    0,  768,  768,
      762,  763,  764,  764,  765,  766,  767,  769,  770,  771,
      772,  773,  776,  774,  769,  775,  771,  772,  770,  768,
      774,  773,  775,  769,  779,    0,  777,    0,  770,  780,
        0,  773,  776,  774,  769,  770,  771,  772,  773,  776,
      774,  777,  775,  778,  779,  770,  777,  774,  773,  780,
        0,  779,  778,  777,  781,  770,  780,  782,  773,  776,
      774,  840,  842,  778,    0,  785,  783,  785,  777,  781,
      778,  779,  782,  777,  781,  786,  780,  782,  784,  778,
      783,  781,  784,  787,  782,    0,  783,  785,  840,  842,

      778,  789,  785,  783,  785,  786,  781,  843,  784,  782,
      792,  781,  786,  787,  782,  784,  793,  783,  788,  784,
      787,  789,  794,  783,  785,  788,  791,  790,  789,  790,
      792,  793,  786,    0,  843,  784,  793,  792,  788,  791,
      787,  795,  794,  793,  796,  788,  791,  790,  789,  794,
      797,    0,  788,  791,  790,    0,  790,  792,  793,  796,
      799,  795,  798,  793,  796,  788,  791,  799,  795,  794,
      797,  796,  800,  791,  790,  801,  798,  797,  802,    0,
      799,  803,  798,    0,  804,    0,  796,  799,  795,  798,
      805,  796,  800,    0,  799,  801,  806,  797,  802,  800,

      806,  803,  801,  798,  804,  802,  808,  799,  803,  798,
      805,  804,  807,    0,  809,  807,  810,  805,  811,  800,
      806,  808,  801,  806,    0,  802,  808,  806,  803,  846,
        0,  804,  807,  808,  809,    0,  810,  805,  811,  807,
      814,  809,  807,  810,  812,  811,  815,  806,  808,  813,
      815,  817,  816,  808,    0,  817,  846,  812,    0,  807,
      814,  809,  813,  810,  812,  811,  815,  814,  819,  813,
      850,  812,  816,  815,    0,  817,  813,  815,  817,  816,
      818,  818,  817,  819,  812,  820,  820,  814,  819,  813,
      821,  812,  852,  815,  821,  819,  813,  850,    0,  816,

      853,  818,  817,  823,  822,  824,  820,  818,  818,  826,
      819,    0,  820,  820,  821,  819,  823,  821,  822,  852,
      824,  821,  825,  823,  822,  824,  825,  853,  818,  826,
      823,  822,  824,  820,  827,  829,  826,  828,  828,  830,
        0,  821,    0,  823,    0,  822,  825,  824,  856,  825,
      823,  822,  824,  825,  827,  829,  826,  831,  828,  830,
        0,  827,  829,  832,  828,  828,  830,  832,  833,  834,
      859,  831,  833,  825,  860,  856,  863,  831,  864,  866,
      867,  827,  829,  868,  831,  828,  830,  832,  870,  834,
      832,  871,  833,  875,  832,  833,  834,  859,  831,  833,

      877,  860,  878,  863,  831,  864,  866,  867,  879,  884,
      868,  885,  886,  887,  832,  870,  834,  888,  871,  833,
      875,  889,  892,  891,    0,    0,  888,  877,    0,  878,
      891,  890,  886,  887,    0,  879,  884,  888,  885,  886,
      887,  889,  892,  891,  888,  890,  894,    0,  889,  892,
      891,  890,  893,  888,  893,  895,  896,  891,  890,  886,
      887,  894,  942,  897,  888,  897,  894,  898,  889,  892,
      891,  899,  890,  894,  893,  895,  896,  900,  890,  893,
      901,  893,  895,  896,    0,  897,  902,  898,  894,  942,
      897,  899,  897,  894,  898,  904,  903,  900,  899,  905,

      901,  893,  895,  896,  900,  903,  902,  901,  906,  907,
      904,  908,  897,  902,  898,  904,  903,    0,  899,  905,
      909,  910,  904,  903,  900,  911,  905,  901,  906,  907,
      912,  908,  903,  902,  910,  906,  907,  904,  908,  913,
      909,  910,  904,  903,  914,  911,  905,  909,  910,  915,
      912,  914,  911,  915,  916,  906,  907,  912,  908,  913,
      944,  910,    0,  918,  914,  919,  913,  909,  910,  917,
        0,  914,  911,  915,  916,  920,  915,  912,  914,  950,
      915,  916,    0,  918,  917,  919,  913,  944,  923,  917,
      918,  914,  919,  922,  924,  920,  917,  921,  925,  921,

      915,  916,  920,    0,    0,    0,  950,  922,  923,  927,
      918,  917,  919,  922,  924,  923,  917,  931,  925,  921,
      922,  924,  920,  926,  921,  925,  921,  928,  929,  927,
      926,  928,  929,  930,  922,  923,  927,  931,    0,  952,
      922,  924,  932,  926,  931,  925,  921,  933,  930,    0,
      926,  928,  929,  930,  928,  929,  927,  926,  928,  929,
      930,  934,  932,  935,  931,  936,  952,  933,  953,  932,
      926,  956,  936,  959,  933,  930,  935,  960,  928,  929,
      930,  934,  961,  935,    0,  936,  964,  965,  934,  932,
      935,  966,  936,    0,  933,  953,  967,  968,  956,  936,

      959,  969,  970,  935,  960,  969,  964,  965,  934,  961,
      935,  966,  936,  964,  965,  971,  967,  968,  966,  972,
      973,  974,  970,  967,  968,  969,    0,  991,  969,  970,
      971,  975,  969,  964,  965,  971,  976,    0,  966,  972,
      973,  974,  971,  967,  968,  978,  972,  973,  974,  970,
      980,  975,  969,  977,  991,  977,  976,  971,  975,  981,
        0,  979,  971,  976,  982,  978,  972,  973,  974,  984,
      980,    0,  978,    0,  979,  977,    0,  980,  975,  981,
      977,  979,  977,  976,  982,  983,  981,  985,  979,  984,
      986,  982,  978,  993,    0,  988,  984,  980,  989,  990,

      983,  979,  977,  986,  995,  983,  981,  985,  979,  997,
      986,  982,  983,  987,  985,  988,  984,  986,  989,  990,
      993,  987,  988,  998, 1000,  989,  990,  983,    0, 1001,
      986,  995,  983,  987,  985, 1003,  997,  986, 1002, 1000,
      987, 1004,  988, 1005, 1000,  989,  990, 1006,  987, 1001,
      998, 1000, 1008, 1002, 1004, 1003, 1001,    0, 1002, 1009,
      987, 1004, 1003, 1005, 1007, 1002, 1000, 1006, 1004, 1011,
     1005, 1000, 1008, 1014, 1006, 1007, 1001, 1015, 1016, 1008,
     1002, 1004, 1003, 1017, 1007, 1002, 1009, 1018, 1004, 1021,
     1005, 1007, 1016, 1014, 1006, 1022, 1011, 1015, 1016, 1008,

     1014,    0, 1007, 1017, 1015, 1016,    0, 1018,    0, 1021,
     1017, 1007,    0,    0, 1018, 1022, 1021,    0,    0, 1016,
     1014,    0, 1022,    0, 1015, 1016,    0,    0,    0,    0,
     1017,    0,    0,    0, 1018,    0, 1021,    0,    0,    0,
        0,    0, 1022, 1024,    0,    0, 1024, 1025,    0, 1025,
     1025, 1027,    0, 1027, 1027, 1028,    0, 1028, 1028, 1029,
        0, 1029, 1029, 1030,    0, 1030, 1030, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

#line 1921 "flex_lexer.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1934 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2220 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1024 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1023 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 135:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 142:
#line 201 "flex_lexer.l"
case 143:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3035 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1024 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1024 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1023);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 231 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

