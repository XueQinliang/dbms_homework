#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1072] =
    {   0,
        0,    0,  153,  153,    2,    2,  157,  155,    4,    4,
      155,  155,  145,  151,  145,  145,  148,  145,  145,  145,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  145,  153,  154,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  140,    0,    1,  148,
      147,  146,  142,  141,  139,  143,  150,  150,  150,  150,

      150,  150,  118,  150,  119,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  120,
      150,  150,  121,  122,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  123,  124,  125,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  126,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  144,  153,  152,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      149,  146,  106,  150,  107,  150,  150,  108,  150,  109,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  130,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  110,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  111,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  112,  150,  150,
      113,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  114,  150,  150,  115,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  116,  150,
      150,  150,  150,  150,  150,  150,  150,  117,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  150,  150,  150,  150,  150,  150,  150,   77,

      150,   78,   79,  150,  150,  150,   80,  150,  150,   81,
      150,  150,  150,  150,   82,  150,  150,  150,   83,   84,
      150,  150,  150,  150,  150,  150,  150,   85,  150,  150,
       86,   87,  150,  150,   88,  150,   89,  129,  150,  150,
      150,  150,  150,  150,   90,  150,   91,   92,   93,  150,
       95,  150,   96,  150,  150,  150,  150,   97,  150,  150,
      150,  150,  150,   98,  150,  150,  150,  150,  150,  150,
      150,  150,  150,   99,  150,  150,  150,  150,  100,  101,
      102,  150,  133,  150,  150,  150,  150,  150,  150,  150,
      150,  103,  150,  104,  150,  105,  132,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,   57,   58,  150,   59,  150,  136,  150,  150,
      150,  150,  150,  150,   60,  150,  150,  150,   61,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  134,
       62,  150,  150,   63,  150,   94,  150,   64,   65,  150,
      150,  150,  150,   66,   67,   68,   69,  150,  131,  150,
      150,  150,   70,   71,  150,  150,  150,  150,  150,   72,
      150,  150,  150,  150,  150,  150,   73,  150,  150,  150,
      150,   74,  150,  150,  150,   75,  150,  150,  150,   76,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  150,   31,
      150,  150,   32,  138,  150,   33,  150,  150,   34,  150,
       35,  150,   36,   37,   38,  150,   39,  150,  150,   41,
       42,   43,   44,   45,  150,  150,   46,  128,  150,  150,
       47,  150,  150,  150,   48,  150,  150,   49,  127,   50,

       51,  150,   52,  150,  150,  150,  150,   53,   54,   55,
       56,  150,  150,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   15,   16,
       17,   18,   19,  150,   20,  150,  150,   21,   22,   40,
       23,  150,   24,  150,  150,   25,   26,  150,  150,   27,
       28,  150,  150,  150,  150,   29,   30,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  150,   10,   11,  150,
       12,  150,   13,  137,  150,  150,  150,   14,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      150,    7,  150,    8,    9,  150,    2,    2,    2,    2,
        2,    2,    5,    6,  150,    2,    2,    2,  135,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1079] =
    {   0,
        0,    0,  422,  414,   67,    0,  410, 4278,  133,  135,
      368,    0, 4278, 4278,  131,  345,  133,  132,  312,  300,
      129,  129,  137,  135,  145,  196,  171,  184,  188,  124,
      141,  183,  228,  230,  236,  235,    0,  250,  280,  323,
      257,  194,  231,  144,  243,    0,  297,    0,  259,  272,
      276,  276,    0,    0,  161,  259,  293,  294,  247,  224,
      381,  448,  502,  554,  602,  654,  301,  377,  702,  302,
      304,  379,  440,  754,  802,  449,  358,  453,  852,  904,
      499,  524,  553,  366,  164,  312, 4278,  221, 4278,  308,
      212,  209, 4278, 4278, 4278, 4278,    0,  147,  267,  296,

      317,  302,  322,  450,    0,  318,  338,  552,  391,  439,
      596,  406,  341,  386,  384,  403,  457,  641,  451,  454,
      454,  453,  464,  487,  493,  494,  492,  498,  495,    0,
      510,  505,  691,  509,  544,  532,  561,  560,  608,  556,
      563,  569,  583,  592,  601,  617,  614,    0,  621,  611,
      615,  636,  665,  637,  655,  653,  659,  700,  676,  680,
      703,  707,  700,  712,  706,  707,  732,  749,  725,  736,
      745,  759,  757,  745,  765, 4278,    0, 4278,    0,  360,
        0,  212,    0,  364,  193,  190,    0,    0,    0,    0,
      762,  793,  790,  824,  847,  794,  856,  891,  806,  895,

      905,  953,  930,  939, 1005,  955,  956,  984,  896, 1009,
     1017, 1067, 1007, 1023, 1048, 1049, 1053, 1059, 1081, 1097,
     1099, 1102, 1115,  993, 1121, 1112, 1170, 1127, 1133, 1083,
     1155, 1181, 1195, 1210, 1224, 1225, 1221, 1238, 1239, 1247,
     1172, 1151, 1255, 1249, 1277, 1283, 1288, 1298, 1293, 1309,
     1311, 1344, 1347, 1333, 1352, 1365, 1368, 1350, 1382, 1393,
     1405, 1419, 1407, 1418, 1444, 1442, 1416, 1441, 1474,    0,
     4278,  145,    0,  768,    0,  769,  766,    0,  812,    0,
      838,  853,  841,  853,  965,  848,  869,  913,  932,  938,
      974,  957, 1018,    0, 1017, 1051, 1161, 1063, 1077, 1152,

     1189, 1194, 1229,    0, 1239, 1278, 1301, 1286, 1294, 1341,
     1369, 1408, 1462, 1451, 1452, 1465, 1476, 1459, 1473, 1473,
     1464, 1467, 1475, 1480, 1492, 1493, 1495, 1505, 1480, 1489,
        0, 1494, 1510, 1507, 1513, 1517, 1512, 1514, 1502, 1509,
     1510,    0, 1520, 1515, 1515, 1530, 1531, 1537, 1525, 1524,
     1536, 1550, 1532, 1545, 1542, 1550, 1542, 1559,    0, 1545,
     1549, 1550, 1559, 1556, 1553, 1560, 1570,    0, 1563, 1578,
     1570, 1571, 1587, 1575, 1569, 1590, 1571, 1583, 1591, 1598,
     1589,    0,  140, 1603, 1606, 1617, 1618, 1632, 1620, 1655,
     1621, 1636, 1654, 1642, 1670, 1686, 1680, 1672, 1708, 1676,

     1694, 1709, 1710, 1722, 1725, 1739, 1738, 1747, 1750, 1744,
     1763, 1779, 1781, 1760, 1768, 1800, 1782, 1813, 1798, 1814,
     1804, 1816, 1822, 1850, 1854, 1856, 1852, 1858, 1868, 1887,
     1892, 1893, 1909, 1898, 1906, 1910, 1921, 1924, 1932, 1938,
     1946, 1947, 1960, 1950, 1972, 1963, 1988, 1996, 2004, 2001,
     2012, 2014, 2009, 2038, 2040, 2049, 2046, 2050, 2068, 2062,
     2081, 2086, 2103, 2102, 2104, 2105, 2100, 2135, 2116, 2137,
     2138, 2146, 2154, 2160, 2148, 2177, 2189, 2179, 2190, 2191,
     2203, 2221, 2222, 2244, 2234, 2235, 2265, 2256, 2257, 2266,
     2294, 2295, 1609, 1621, 1651, 1706, 1840, 1858, 1875,    0,

     1904,    0,    0, 1956, 1974, 1973,    0, 1980, 2006,    0,
     2045, 2067, 2069, 2118, 2165, 2204, 2216, 2239,    0,    0,
     2242, 2278, 2280, 2283, 2304, 2309, 2307,    0, 2294, 2314,
        0,    0, 2315, 2306,    0, 2309,    0,    0, 2319, 2307,
     2307, 2315, 2316, 2337,    0, 2323,    0,    0,    0, 2316,
        0, 2326,    0, 2340, 2334, 2340, 2338,    0, 2354, 2354,
     2346, 2348, 2354,    0, 2367, 2368, 2357, 2355, 2354, 2374,
     2364, 2364, 2376,    0, 2380, 2378, 2383, 2374,    0,    0,
     2371, 2373,    0, 2395, 2385, 2381, 2406, 2388, 2402, 2405,
     2403,    0, 2392,    0, 2413,    0,    0, 2423, 2425, 2417,

     2419, 2428, 2442, 2427, 2453, 2461, 2456, 2459, 2477, 2467,
     2482, 2490, 2496, 2493, 2499, 2521, 2515, 2530, 2536, 2547,
     2551, 2561, 2566, 2564, 2569, 2579, 2601, 2602, 2604, 2607,
     2636, 2615, 2620, 2623, 2637, 2641, 2652, 2673, 2671, 2658,
     2677, 2674, 2675, 2687, 2690, 2692, 2715, 2716, 2731, 2725,
     2741, 2726, 2727, 2749, 2750, 2759, 2780, 2764, 2781, 2789,
     2790, 2785, 2795, 2821, 2813, 2834, 2838, 2835, 2829, 2857,
     2863, 2844, 2875, 2872, 2869, 2897, 2898, 2903, 2900, 2906,
     2909, 2911, 2939, 2921, 2935, 2937, 2960, 2943, 2969, 2952,
     2965, 2975, 2991, 3003, 2973, 3014, 2977, 3009, 3015, 3019,

     3027, 3028,    0,    0, 2401,    0, 2491,    0, 2525, 2528,
     2544, 2555, 2572, 2653,    0, 2671, 2733, 2799,    0, 2814,
     2808, 2858, 2983, 3013, 3011, 3016, 3023, 3039, 3047,    0,
        0, 3034, 3044,    0, 3055,    0, 3044,    0,    0, 3045,
     3063, 3051, 3060,    0,    0,    0,    0, 3068,    0, 3073,
     3068, 3058,    0,    0, 3077, 3066, 3067, 3081, 3078,    0,
     3087, 3089, 3089, 3074, 3092, 3097, 3083, 3086, 3086, 3106,
     3107,    0, 3105, 3112, 3113,    0, 3100, 3121, 3123,    0,
     3122, 3123, 3127, 3125, 3131, 3133, 3135, 3137, 3156, 3166,
     3167, 3168, 3171, 3179, 3190, 3185, 3200, 3219, 3221, 3202,

     3225, 3231, 3240, 3242, 3256, 3261, 3273, 3259, 3274, 3275,
     3304, 3285, 3307, 3296, 3299, 3310, 3313, 3329, 3315, 3325,
     3348, 3347, 3350, 3353, 3358, 3359, 3361, 3369, 3384, 3383,
     3393, 3399, 3401, 3402, 3423, 3407, 3433, 3412, 3445, 3451,
     3456, 3466, 3485, 3477, 3475, 3494, 3510, 3519, 3527, 3479,
     3509, 3518, 3528, 3531, 3549, 3564, 3572, 3553, 3134,    0,
     3192, 3207, 3239,    0, 3257,    0, 3365, 3349,    0, 3420,
        0, 3437,    0,    0,    0, 3461,    0, 3460, 3520,    0,
        0,    0,    0,    0, 3527, 3543,    0,    0, 3552, 3565,
        0, 3556, 3577, 3559,    0, 3583, 3584, 3569,    0,    0,

        0, 3578,    0, 3593, 3597, 3596, 3582,    0,    0,    0,
        0, 3588, 3595, 3603, 3605, 3613, 3607, 3617, 3615, 3636,
     3618, 3641, 3657, 3626, 3651, 3647, 3681, 3669, 3680, 3682,
     3685, 3690, 3711, 3703, 3695, 3713, 3714, 3719, 3724, 3735,
     3736, 3749, 3752, 3757, 3774, 3753, 3778, 3765, 3768, 3786,
     3789, 3810, 3818, 3802, 3807, 3819, 3824, 3823, 3852, 3860,
     3842, 3861, 3864, 3873, 3874, 3877, 3882, 3878,    0,    0,
        0,    0,    0, 3663,    0, 3754, 3775,    0,    0,    0,
        0, 3828,    0, 3815, 3841,    0,    0, 3848, 3880,    0,
        0, 3879, 3888, 3891, 3910,    0,    0, 3914, 3915, 3916,

     3918, 3926, 3931, 3928, 3930, 3932, 3940, 3944, 3949, 3966,
     3970, 3972, 3981, 3980, 3982, 3983, 4005, 4006, 3984, 4014,
     4022, 4016, 4040, 4018, 4037, 4046, 3973,    0,    0, 4008,
        0, 4031,    0,    0, 4028, 4043, 4052,    0, 4059, 4058,
     4068, 4076, 4070, 4089, 4072, 4080, 4094, 4111, 4108, 4110,
     4077,    0, 4084,    0,    0, 4103, 4124, 4126, 4134, 4132,
     4142, 4150,    0,    0, 4111, 4145, 4156, 4182,    0, 4166,
     4278, 4247, 4252,  135, 4257, 4262, 4267, 4272
    } ;

static const flex_int16_t yy_def[1079] =
    {   0,
     1071,    1, 1072, 1072, 1071,    5, 1071, 1071, 1071, 1071,
     1071, 1073, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1071, 1075, 1071, 1076, 1076, 1071,
     1076, 1077, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1078, 1078,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1076, 1071, 1071, 1073, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1071, 1075, 1071, 1076, 1076,
     1076, 1077, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62, 1076,
     1071, 1071, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1076, 1076,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1074, 1074, 1074, 1074, 1074, 1074,   62,   62,   62,   62,
       62,   62, 1074, 1074, 1074,   62,   62,   62, 1074,   62,
        0, 1071, 1071, 1071, 1071, 1071, 1071, 1071
    } ;

static const flex_int16_t yy_nxt[4346] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  110,  383,
      106,  135,  111,  100,  272,  101,  112,  107,  136,  102,
      103,  175,  113,  273,  108,  114,  105,  109,  183,  115,
      184,  116,   98,  104,   99,  110,  117,  106,  135,  111,
      100,  118,  101,  112,  107,  136,  102,  103,  175,  113,
      273,  108,  114,  105,  109,  125,  115,  127,  116,  383,

      137,  126,  185,  117,  138,  128,  130,  171,  118,  119,
      139,  129,  131,  132,  133,  172,  382,  120,  272,  134,
      121,   91,  125,  122,  127,  271,  123,  137,  126,  124,
      270,  138,  128,  130,  171,  190,  119,  139,  129,  131,
      132,  133,  172,  143,  120,  140,  134,  121,  151,  141,
      122,  173,  174,  123,  147,  142,  124,  144,  189,  152,
      180,   86,  148,  145,  146,  153,  149,  154,  185,  150,
      143,  155,  140,   86,   86,  151,  141,  156,  173,  174,
      179,  147,  142,  168,  144,  169,  152,  181,  170,  148,
      145,  146,  153,  149,  154,  157,  150,  158,  155,  274,

      159,  186,  184,  178,  156,  187,  188,  160,  161,  176,
      168,   96,  169,   86,   86,  170,   92,   90,  191,  191,
      275,  230,  157,   95,  158,  219,  274,  159,  276,  229,
      277,  220,  279,  278,  160,  161,  162,  280,  191,  191,
      163,  191,  284,  164,  165,  191,  191,  275,  230,  285,
      166,  286,  219,  167,   91,  276,  229,  277,  220,  279,
      278,  180,   86,  162,  280,  191,  191,  163,  191,  284,
      164,  165,  186,  184,  301,  191,  285,  166,  286,   87,
      167,  179,  179,  269,  179,  179,  179,  179,  179,  179,
      221,  179,  179,  179,  191,  191,  231,  192,  222,  193,

      232,  301,  191,  191,  223,  194,  233,  195,  291, 1071,
      269,  196,  197,  302,  191,  303,  191,  221,  292,  304,
       47,  191,  191,  231,  192,  222,  193,  232,   47, 1071,
      191,  223,  194,  233,  195,  291,  299,  300,  196,  197,
      302,  191,  303,  191, 1071,  292,  304,  179,  179,  179,
     1071,  179,  179,  179,  179,  179,  179,  234,  179,  179,
      179,  235,  245,  299,  300,  198,  191,  236,  281,  282,
      248,  293,  305,  246,  249,  311,  294,  191,  312,  247,
      250,  313,  283,  314,  234,  199,  191, 1071,  235,  245,
      191,  315,  198,  191,  236,  281,  282,  248,  293,  305,

      246,  249,  311,  294,  191,  312,  247,  250,  313,  283,
      314,  316,  199,  191,  179,  200,  191,  191,  315,  191,
      317,  318,  201,  319,  321,  262,  320,  263,  322,  202,
      264,  323,  203,  324, 1071,  329,  191,  265,  316,  191,
     1071,  191,  200,  191, 1071,  266,  191,  317,  318,  201,
      319,  321,  262,  320,  263,  322,  202,  264,  323,  203,
      324,  191,  329,  191,  265,  330,  191,  204,  191,  331,
      191,  205,  266,  267,  268,  206,  287,  288,  289,  332,
      290,  207, 1071,  333,  208,  334,  338, 1071,  191,  339,
      191,  191,  330, 1071,  204,  340,  331,  191,  205, 1071,

      267,  268,  206,  287,  288,  289,  332,  290,  207,  295,
      333,  208,  334,  338,  296,  341,  339,  191,  191,  191,
      297,  335,  340,  336,  342,  343,  209,  298,  210, 1071,
      344, 1071,  345,  211,  337, 1071,  295,  346,  212,  191,
     1071,  296,  341,  347, 1071,  348,  191,  297,  335,  349,
      336,  342,  343,  209,  298,  210,  306,  344,  307,  345,
      211,  337,  308,  352,  346,  212,  191,  213,  353,  309,
      347,  191,  348,  310,  354,  214,  349,  355,  215,  356,
     1071,  216,  350,  306,  217,  307,  351,  218, 1071,  308,
      352,  191, 1071, 1071,  213,  353,  309, 1071,  191, 1071,

      310,  354,  214,  360,  355,  215,  356,  325,  216,  350,
      361,  217, 1071,  351,  218,  357,  362,  326,  191,  191,
      224,  363,  327,  328,  358,  364,  225,  226,  227,  366,
      360,  367,  359,  228,  325,  368,  365,  361, 1071,  191,
     1071,  373,  357,  362,  326,  369,  191,  224,  363,  327,
      328,  358,  364,  225,  226,  227,  366,  374,  367,  359,
      228, 1071,  368,  365, 1071,  370,  191,  237,  373,  375,
      371,  191,  369,  372,  379,  376,  377,  380,  381,  191,
     1071,  238, 1071, 1071,  374,  493,  494,  239,  240,  378,
      495,  191,  370, 1071,  237, 1071,  375,  371,  191,  191,

      372,  379,  376,  377,  380,  381,  191,  191,  238,  384,
      191,  191,  493,  494,  239,  240,  378,  495,  191,  191,
      241, 1071,  385,  191,  390,  496,  191,  191,  242, 1071,
      191,  191,  243, 1071,  191,  244,  384,  191,  191,  191,
     1071,  191, 1071,  191, 1071, 1071,  191,  241,  386,  385,
      191,  390,  496, 1071,  191,  242,  387,  191,  191,  243,
      388,  191,  244,  389,  191,  497,  191,  251,  191,  252,
      191,  391,  253,  191,  498,  386,  499,  500,  503,  254,
      255, 1071, 1071,  387,  191, 1071, 1071,  388,  191,  191,
      389,  191,  497,  191,  251, 1071,  252, 1071,  391,  253,

      191,  498,  504,  499,  500,  503,  254,  255,  191,  392,
      393,  191,  191,  191, 1071, 1071,  191,  256,  397,  395,
      191,  257,  191,  394,  258,  259,  396,  414,  191,  504,
     1071,  260,  191,  191,  261,  191,  392,  393,  505,  191,
      191,  191,  191, 1071,  256,  397,  395,  402,  257,  191,
      394,  258,  259,  396,  414,  191,  191,  403,  260,  191,
      191,  261, 1071, 1071,  506,  505, 1071,  191,  191,  191,
      191,  404,  191,  191,  402,  507,  405,  398,  399,  400,
      501,  401,  502,  191,  403,  410,  411,  508,  509,  412,
      191,  506,  191,  191,  191, 1071, 1071,  191,  404,  191,

      191,  191,  507,  405,  398,  399,  400,  501,  401,  502,
      191,  413,  410,  411,  508,  509,  412,  191,  406,  191,
      191,  191,  191,  407,  191,  415,  191, 1071,  191,  408,
      191,  422,  416, 1071,  191,  510,  409,  191,  413, 1071,
      191,  511,  191, 1071,  191,  406,  191,  423,  191,  191,
      407,  191,  415,  191,  191, 1071,  408,  191,  422,  416,
      191,  191,  510,  409,  512,  191,  191,  191,  511,  191,
      191,  191, 1071,  191,  423,  424,  191, 1071,  515,  425,
      426,  191,  417,  427,  418,  191,  191,  191,  419, 1071,
      191,  512,  191,  191,  516,  420,  191,  191,  191,  421,

      191, 1071,  424,  191,  191,  515,  425,  426,  428,  417,
      427,  418,  191,  191,  191,  419,  191,  191,  191,  191,
      442,  516,  420,  191,  429,  191,  421,  191,  432,  191,
      430,  191,  191,  431,  191,  428,  191, 1071,  191,  191,
      435,  191,  434,  191,  191,  191,  191,  442,  433,  191,
      191,  429,  191,  440,  441,  432,  191,  430,  191,  191,
      431,  191, 1071,  191,  191,  191,  191,  435,  191,  434,
      191,  191,  191,  443, 1071,  433,  191,  191,  513,  191,
      440,  441, 1071, 1071,  517,  191,  436,  191,  191,  191,
      456,  191,  191,  514, 1071,  191,  437,  191,  191,  191,

      443,  438,  439,  518,  444,  513,  445,  191,  446,  191,
      447,  517,  191,  436,  191,  191,  191,  456,  191,  191,
      514,  448,  519,  437, 1071,  191, 1071,  191,  438,  439,
      518,  444,  191,  445,  191,  446,  191,  447,  191,  191,
      449,  191,  191, 1071, 1071,  191,  520,  191,  448,  519,
      450,  451,  521,  452,  191,  191,  191, 1071,  191,  191,
      455,  191,  191,  454,  191,  191,  191,  449,  191,  191,
      453,  457,  191,  520,  191,  191,  191,  450,  451,  521,
      452,  458,  191,  191,  191,  191,  191,  455,  191,  191,
      454,  191,  191,  191,  191,  522,  460,  453,  457,  191,

      191, 1071,  191,  191, 1071,  461, 1071,  459,  458,  462,
      191,  191,  465,  191,  191,  191,  523,  524,  525,  191,
      191,  191,  522,  460,  463,  191,  191,  191,  191,  464,
      191,  467,  461,  466,  459,  191,  462,  191, 1071,  465,
     1071,  191,  191,  523,  524,  525,  191,  191,  191, 1071,
      191,  463,  191,  191, 1071,  191,  464,  191,  467,  468,
      466,  191,  191,  472,  191,  473, 1071,  477,  469,  191,
      191,  526, 1071,  191,  471,  191,  470,  191, 1071,  474,
     1071,  191,  191, 1071,  191,  191,  468,  191,  191,  191,
      472,  191,  473,  475,  477,  469,  191,  191,  526,  191,

      527,  471,  191,  470,  476,  191,  474,  478,  191,  191,
      191,  191,  191, 1071,  191, 1071,  191, 1071,  480,  191,
      475,  479,  191,  484,  191,  528,  191,  527, 1071,  191,
      191,  476,  191,  490,  478,  191,  191,  191,  481,  485,
      482, 1071,  191,  483,  191,  480,  191, 1071,  479,  191,
      484,  191,  528,  191, 1071,  191,  191,  191,  191,  488,
      490,  191,  191,  191, 1071,  481,  485,  482,  486,  191,
      483,  191,  489,  491,  487,  529,  530,  531,  191,  191,
      191,  191,  191,  191, 1071,  191,  488,  492,  191,  532,
      533,  191,  534,  535,  536,  486,  537,  538,  539,  489,

      491,  487,  529,  530,  531,  191,  191,  540,  191,  541,
      542,  191,  543,  546,  492,  547,  532,  533,  191,  534,
      535,  536,  544,  537,  538,  539,  548,  549,  550,  551,
      552,  553,  545,  554,  540,  555,  541,  542,  191,  543,
      546,  556,  547,  557,  558,  559,  560,  561,  562,  544,
      563,  564,  565,  548,  549,  550,  551,  552,  553,  545,
      554,  566,  555,  567,  568,  569,  570,  571,  556,  572,
      557,  558,  559,  560,  561,  562,  573,  563,  564,  565,
      574,  575,  576,  577,  578,  579,  580,  581,  566,  582,
      567,  568,  569,  570,  571,  583,  572,  585,  587,  586,

      588,  589,  590,  573,  584,  591,  592,  574,  575,  576,
      577,  578,  579,  580,  581,  593,  582,  594,  596,  597,
      191,  595,  583,  598,  585,  587,  586,  588,  589,  590,
     1071,  584,  591,  592,  191,  599, 1071,  191,  191,  703,
      191, 1071,  593,  191,  594,  596,  597,  191,  595,  191,
      598,  704, 1071,  191,  191,  191,  600,  191,  191,  191,
     1071,  191,  599,  602,  191,  191,  703,  191,  601,  191,
      191,  191,  191,  191, 1071,  603,  191,  604,  704,  191,
      191,  191,  191,  600,  191,  191,  191,  191,  705,  191,
      602,  191,  191,  191,  605,  601,  191,  191,  191,  191,

      191,  606,  603,  607,  604,  609,  191,  191,  611,  191,
      608,  191, 1071,  191,  191,  705,  191,  191,  191,  191,
      191,  605,  613,  191,  191,  191,  191,  191,  606, 1071,
      607,  612,  609,  610,  191,  611,  191,  608,  191,  615,
      191,  614,  191,  706,  191,  191,  191,  191, 1071,  613,
      191,  617,  191,  191,  191,  191,  191, 1071,  612,  191,
      610,  621,  191,  616,  618,  620,  615,  191,  614,  191,
      706, 1071,  191,  191,  191,  191,  191,  625,  617,  619,
      191,  191,  191,  191,  191,  191,  191,  191,  621,  191,
      616,  618,  620,  623,  191,  622,  191,  191,  191,  627,

      191, 1071,  191,  191,  625,  191,  619,  191,  191,  624,
     1071,  191,  191,  626,  191,  191,  191,  191,  191,  191,
      623,  191,  622,  191,  191,  191,  627,  191,  628,  629,
      191,  191,  191,  191,  631,  191,  624,  191,  630,  633,
      626,  191,  191,  191,  191,  191,  191,  632,  191, 1071,
      191,  191, 1071,  191, 1071,  628,  629,  191,  191,  191,
      191,  631,  191,  634,  191,  630,  633,  191,  191,  191,
      707,  191,  638,  191,  632,  191,  637,  191,  191,  635,
      191,  636, 1071, 1071,  708,  191,  191,  191, 1071,  191,
      634,  191,  709,  191,  191,  191,  191,  707,  191,  638,

      191,  639,  191,  637,  191,  191,  635,  640,  636,  191,
      191,  708,  191,  641,  191,  191,  191,  710,  191,  709,
      191,  644,  191,  191,  191,  642,  191,  646,  639,  191,
      191,  191,  191,  645,  640,  191,  191,  191,  647,  643,
      641,  648,  191,  191,  710, 1071,  191,  191,  644,  649,
      191,  191,  642,  191,  646,  191,  191,  191,  191,  650,
      645,  191,  191,  191,  191,  647,  643,  654,  648,  191,
      191,  651,  652,  191,  191,  191,  649,  191, 1071,  656,
      191,  711,  191,  191,  191,  191,  650,  191,  191,  191,
      191,  191,  653,  655,  654,  712,  191,  191,  651,  652,

      191,  657,  191,  713,  191,  191,  656,  191,  711,  191,
      191,  191,  714,  191,  191,  658,  191, 1071,  191,  653,
      655,  191,  712,  659,  191,  191,  191,  191,  657,  191,
      713,  191,  191,  191,  660, 1071,  191,  715,  191,  714,
      191,  191,  658, 1071,  661,  191,  191,  662,  191,  191,
      659,  191,  191,  191, 1071,  191,  191,  191,  191, 1071,
      191,  660,  663,  666,  715,  191,  191,  667,  191,  716,
      664,  661, 1071,  191,  662,  191,  191,  191,  191,  191,
      665,  668,  191,  191,  191,  191,  191,  191,  669,  663,
      666, 1071, 1071,  191,  667, 1071,  716,  664,  191,  191,

      717,  718,  191,  191,  191,  191,  191,  665,  668,  670,
      191,  671,  191,  191,  191,  669,  672,  676,  191,  191,
      191,  191,  191,  191,  674,  191,  191,  717,  718,  675,
      191,  719,  191,  678,  673, 1071,  670,  191,  671,  191,
      191,  191,  191,  672,  676,  191,  191,  191,  191,  191,
      191,  674,  191,  191,  191,  191,  675, 1071,  719, 1071,
      678,  673,  677,  191,  191,  191,  191,  191,  191,  191,
     1071,  191,  191,  679,  191,  191,  683,  191,  680,  191,
      191,  191,  191,  191,  682,  191,  681, 1071, 1071,  677,
      191,  191,  191, 1071,  191,  720,  686,  191,  191,  191,

      679,  191,  191,  683,  191,  680,  191,  191,  191,  684,
      191,  682,  191,  681,  191,  685,  191,  687,  191,  721,
      688,  191,  720,  686,  191, 1071,  191,  191,  191,  689,
     1071, 1071, 1071,  191,  191,  191,  684,  722,  191,  191,
      191,  191,  685,  191,  687, 1071,  721,  688,  690,  692,
      691,  191,  191,  191,  191,  191,  689,  693,  191,  191,
      694,  191, 1071,  723,  722,  191,  191,  191,  695, 1071,
      724,  191,  191,  191,  191,  690,  692,  691,  191,  191,
      696,  191,  191,  191,  693,  191,  191,  694,  191,  698,
      723,  697,  699,  191,  191,  695,  700,  724,  191,  191,

      191,  191,  191,  191, 1071, 1071,  725,  696,  191,  191,
      191,  191,  191,  726,  701,  727,  698,  728,  697,  699,
      191,  191,  729,  700,  730,  702,  731,  732,  733,  191,
      191,  191,  191,  725,  734,  735,  736,  737,  191,  191,
      726,  701,  727,  738,  728,  739,  740,  743,  744,  729,
      745,  730,  702,  731,  732,  733,  741,  746,  191,  191,
      749,  734,  735,  736,  737,  747,  748,  742,  750,  751,
      738,  752,  739,  740,  743,  744,  753,  745,  754,  755,
      756,  757,  758,  741,  746,  759,  760,  749,  761,  762,
      763,  764,  747,  748,  742,  750,  751,  765,  752,  766,

      767,  768,  769,  753,  770,  754,  755,  756,  757,  758,
      771,  772,  759,  760,  773,  761,  762,  763,  764,  774,
      775,  776,  777,  778,  765,  779,  766,  767,  768,  769,
      780,  770, 1071, 1071,  191, 1071,  191,  771,  772,  859,
      191,  773,  191, 1071,  787,  191,  774,  775,  776,  777,
      778, 1071,  779,  781,  783,  782,  784,  780,  785,  191,
      191,  191,  191,  191,  191,  191,  859,  191,  786,  191,
      191,  787,  191,  191,  788, 1071,  191, 1071,  191,  191,
      781,  783,  782,  784,  191,  785,  191,  191,  790,  191,
      191,  191,  191,  191,  191,  786,  191,  191,  191,  191,

      191,  788,  789,  191,  191,  191,  191,  191,  860, 1071,
      191,  191,  791,  191,  191,  790,  191,  191, 1071,  191,
      191,  191, 1071,  191,  793,  191,  191,  191,  792,  789,
      191,  191,  191,  191,  191,  860,  191,  191,  191,  791,
      191,  191,  861,  191,  862,  794,  191,  191,  795,  797,
     1071,  793,  191,  191,  191,  792, 1071,  191,  191,  191,
      191, 1071,  796,  191,  191,  191,  799,  191,  191,  861,
      863,  862,  794,  191,  191,  795,  797,  798,  191,  191,
      191,  191,  800,  191,  191,  191,  191,  864,  191,  796,
      801,  191, 1071,  799,  191,  191,  191,  863,  191,  865,

      191,  191, 1071,  191,  798,  191,  191,  802,  191,  800,
      191,  191, 1071,  191,  864,  191,  191,  801,  191,  191,
      806,  191, 1071,  191,  191,  191,  865, 1071,  191,  803,
      191, 1071,  808,  191,  802,  804,  805,  191,  191,  191,
      191,  191, 1071,  191,  191,  191,  191,  806,  191,  807,
      810,  191,  191,  191,  191,  809,  803,  191,  191,  808,
      191, 1071,  804,  805,  191,  191,  191,  191,  191,  191,
      866,  191, 1071,  191,  191,  191,  807,  810,  191,  191,
      191,  191,  809, 1071,  191,  191,  811,  191,  191,  191,
      191,  191,  191, 1071,  191,  191,  191,  866,  867,  812,

      191,  191,  191,  813,  814,  191, 1071,  191,  191,  191,
      191,  191,  191,  811,  191,  191,  191,  191,  191,  191,
      815,  191,  191, 1071,  191,  867,  812,  191,  816,  191,
      813,  814,  191,  191,  191,  191,  191,  191,  191,  191,
     1071,  191,  191,  191,  191,  817,  818,  815,  191, 1071,
      819,  191,  191,  191,  191,  816,  191,  868,  191,  191,
      191,  820,  191,  191,  191,  821,  191,  191,  191,  191,
      191,  191,  817,  818, 1071,  191,  191,  819,  191,  191,
      191,  191,  822, 1071,  868,  191,  191,  191,  820,  191,
      191,  191,  821,  191,  191,  191,  191,  191,  824, 1071,

     1071,  191,  191,  191,  823,  191,  191,  191,  191,  822,
      827, 1071,  191,  191,  191,  828,  869,  191,  191, 1071,
      825,  826,  191,  191,  191,  824,  191,  191,  191,  191,
      830,  823,  191,  191,  191,  870,  829,  827,  191,  191,
      871, 1071,  828,  869,  191,  191,  191,  825,  826,  191,
      191,  191,  191,  191,  191,  191, 1071,  830,  191,  191,
      833,  191,  870,  829,  831,  191,  191,  871,  832,  836,
      834,  191,  191,  191,  191,  191,  835,  191,  191,  191,
      191,  191,  191,  839,  872,  191,  191,  833,  191,  191,
     1071,  831,  191,  191,  191,  832,  836,  834,  191,  191,

      191,  191,  191,  835,  838,  837,  191,  191,  191,  191,
      839,  872,  191,  191,  191,  191,  191,  191,  842,  191,
      191,  191,  840,  843,  841, 1071,  191,  191,  845, 1071,
      844,  838,  837,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  842,  191,  191,  191,  840,
      843,  841,  191,  191,  191,  845,  191,  844,  191, 1071,
      191,  191,  191, 1071,  191,  191,  846,  191,  847,  191,
      191, 1071,  191,  191,  191,  191,  191,  191,  850,  191,
      191,  191,  191,  191,  849,  191,  191,  191,  852,  191,
      855,  848,  191,  846,  191,  847,  191,  191,  851,  191,

      873,  191,  191,  191,  191,  850,  191,  191,  191,  191,
      191,  849,  191,  191,  191,  852,  191,  855,  848,  191,
      191,  191,  854,  853,  191,  851,  191,  873,  191,  191,
      874,  191,  191,  191,  856,  191,  858,  191, 1071,  191,
      191,  191,  857,  875,  191,  191,  191,  191,  876,  854,
      853,  191,  191,  191,  877,  191,  191,  874,  191,  191,
      878,  856,  879,  858,  191,  191,  880,  191,  881,  857,
      875,  191,  191,  191,  882,  876,  883,  884,  191,  191,
      885,  877,  886,  191,  887,  888,  889,  878,  890,  879,
      891,  191,  191,  880,  892,  881,  893,  894,  895,  896,

      897,  882,  898,  883,  884,  899,  900,  885,  901,  886,
      902,  887,  888,  889,  903,  890,  904,  891,  905,  906,
      907,  892,  908,  893,  894,  895,  896,  897,  909,  898,
      910,  911,  899,  900,  912,  901,  913,  902, 1071,  191,
      191,  903,  191,  904,  191,  905,  906,  907,  915,  908,
      191,  969,  916,  917,  191,  909, 1071,  910,  911,  191,
      191,  912,  191,  913,  191,  914,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  915, 1071,  191,  969,  916,
      917,  191,  918,  191,  191,  921,  191,  191,  191,  191,
     1071,  191,  914,  191,  920,  191,  191,  191,  919,  191,

      191,  191,  924,  191,  191,  191,  922,  191,  191,  918,
      191,  191,  921, 1071,  923,  191,  191,  191,  970,  191,
      191,  920,  191,  191,  971,  919, 1071,  191,  927,  924,
      191,  191,  191,  922,  191,  191,  191,  191,  191,  191,
      925,  923,  928,  191,  191,  970,  191, 1071,  929,  191,
     1071,  971, 1071,  926,  191,  927,  191,  191,  191,  191,
     1071, 1071,  191,  191,  191,  191,  191,  925,  191,  928,
      972, 1071,  930,  191,  931,  929,  191,  191,  191,  191,
      926,  973,  933,  191,  191,  191,  191,  932,  934,  191,
      191,  191,  191,  191, 1071,  191,  191,  972,  191,  930,

      191,  931,  191,  191,  191,  191,  191,  935,  973,  933,
      191,  191,  191,  191,  932,  934,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  937,  191,  936,  191,
      191,  938,  940,  191,  935, 1071,  191,  191,  191,  191,
      191,  191,  191,  191,  191, 1071,  191,  191,  191,  191,
      191,  191,  191,  937,  191,  936,  941,  191,  938,  940,
      191,  939,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  942,  191,  191,  191,  943,  191,  191,  191,
      974,  975,  944,  941,  191,  191,  191,  191,  939,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  942,

      191,  191,  191,  943,  945,  191,  191,  974,  975,  944,
      191,  191,  191,  191,  191,  946,  191,  191,  947,  191,
      191,  191,  191,  191,  950,  191, 1071,  191,  191,  191,
      191,  945,  948,  191,  976, 1071,  191,  191,  191,  191,
      191, 1071,  946,  191,  191,  947,  191,  191,  191,  191,
      191,  950,  977,  949,  951, 1071,  191,  191,  952,  948,
      191,  976,  191,  191,  953,  191,  191,  191,  191, 1071,
      191,  191,  954,  191, 1071, 1071,  191,  191,  978,  977,
      949,  951,  191,  191, 1071,  952,  979,  191,  191,  191,
      957,  953,  191,  191,  191,  191,  191,  191,  955,  954,

      191,  956,  191,  191, 1071,  978,  958, 1071, 1071,  191,
      191,  191,  191,  979,  191,  191,  191,  957, 1071,  191,
      191,  191,  191,  191,  959,  955,  963,  191,  956,  191,
      191,  191,  961,  958,  964,  191,  191, 1071,  191,  191,
      962,  191,  960,  191,  191,  965,  191,  191,  191,  191,
     1071,  959,  980,  963,  191,  191,  191,  981,  191,  961,
      982,  964,  191,  191,  191,  191,  191,  962,  191,  960,
      191,  191,  965,  191,  191,  191,  983,  967,  984,  980,
      966,  191,  191,  191,  981,  968,  191,  982,  985,  191,
      191,  191,  191,  191,  986,  191,  987,  191,  988,  989,

      990,  191,  991,  983,  967,  984,  992,  966,  191,  191,
      993,  994,  968,  191,  995,  985,  191,  191,  996,  997,
      998,  986,  191,  987, 1000,  988,  989,  990,  191,  991,
      191, 1071,  191,  992,  191,  191,  191,  993,  994,  999,
      191,  995,  191,  191,  191,  996,  997,  998, 1001,  191,
      191, 1000,  191,  191,  191,  191, 1003,  191,  191,  191,
     1002,  191,  191,  191,  191, 1005,  999,  191,  191,  191,
      191,  191, 1071,  191,  191, 1001, 1027,  191,  191,  191,
      191,  191,  191, 1003,  191,  191,  191, 1002,  191, 1004,
      191,  191, 1005, 1071,  191,  191, 1006,  191,  191,  191,

      191,  191, 1007, 1027, 1071,  191,  191,  191, 1071, 1071,
     1071,  191,  191,  191, 1071,  191, 1004,  191,  191,  191,
      191,  191,  191, 1006,  191,  191,  191,  191,  191, 1007,
      191,  191,  191,  191,  191, 1009,  191, 1008, 1071,  191,
      191,  191, 1071, 1071,  191,  191,  191,  191,  191,  191,
      191,  191,  191, 1011,  191,  191,  191,  191,  191,  191,
     1071,  191, 1009,  191, 1008, 1010,  191,  191,  191,  191,
      191, 1028,  191,  191,  191,  191, 1071,  191,  191,  191,
     1011, 1012, 1015,  191, 1071,  191,  191, 1013,  191,  191,
      191,  191, 1010,  191,  191,  191,  191,  191, 1028,  191,

      191,  191,  191,  191, 1017, 1016,  191, 1029, 1012, 1015,
     1014,  191,  191,  191, 1013,  191,  191,  191,  191,  191,
     1071,  191,  191,  191,  191, 1018,  191,  191, 1071,  191,
      191, 1017, 1016,  191, 1029,  191,  191, 1014,  191,  191,
      191,  191,  191, 1030,  191, 1031,  191,  191, 1020, 1019,
      191,  191, 1018,  191,  191,  191,  191, 1023, 1032,  191,
      191,  191,  191,  191, 1071, 1021,  191,  191,  191,  191,
     1030,  191, 1031, 1022,  191, 1020, 1019,  191,  191,  191,
     1033,  191,  191,  191, 1023, 1032,  191,  191,  191,  191,
      191,  191, 1021, 1024,  191,  191,  191,  191,  191,  191,

     1022,  191, 1026, 1034,  191,  191,  191, 1033,  191, 1035,
      191,  191, 1025, 1036,  191,  191,  191,  191,  191,  191,
     1024,  191,  191, 1037,  191,  191,  191, 1038,  191, 1026,
     1034,  191,  191,  191, 1071,  191, 1035,  191,  191, 1025,
     1036,  191,  191,  191, 1039,  191,  191, 1040,  191,  191,
     1037,  191,  191,  191, 1038,  191, 1071,  191,  191,  191,
      191,  191,  191,  191, 1041,  191,  191,  191,  191,  191,
      191, 1039,  191, 1071, 1040,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191, 1042,  191,  191,  191,  191,
      191, 1041,  191,  191,  191,  191,  191, 1044,  191,  191,

      191,  191, 1071,  191,  191, 1051, 1071,  191,  191,  191,
      191, 1043, 1042,  191,  191, 1071,  191,  191,  191,  191,
      191,  191,  191,  191, 1044,  191,  191,  191,  191, 1046,
      191,  191, 1051,  191,  191, 1050,  191, 1045, 1043,  191,
     1052, 1048,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191, 1047,  191,  191,  191, 1046,  191,  191,  191,
      191, 1053, 1050,  191, 1045, 1054,  191, 1052, 1048,  191,
      191, 1055, 1049, 1056,  191,  191,  191,  191,  191, 1047,
      191,  191,  191,  191,  191,  191,  191,  191, 1053,  191,
      191, 1057, 1054,  191, 1063,  191,  191,  191, 1055, 1049,

     1056,  191,  191,  191,  191,  191,  191,  191, 1058,  191,
      191,  191,  191,  191,  191, 1064,  191,  191, 1057, 1059,
      191, 1063,  191,  191,  191,  191,  191,  191,  191, 1062,
     1065, 1060,  191,  191,  191, 1058,  191, 1069,  191, 1061,
      191, 1066, 1064,  191,  191,  191, 1059,  191,  191,  191,
     1071,  191,  191,  191,  191,  191, 1062, 1065, 1060,  191,
     1071,  191,  191,  191, 1069, 1067, 1061,  191, 1066,  191,
      191,  191,  191,  191,  191,  191,  191, 1068,  191,  191,
     1071, 1071,  191,  191, 1071, 1071,  191,  191,  191,  191,
      191, 1071, 1067,  191,  191, 1071,  191, 1071,  191,  191,

      191, 1071, 1071,  191, 1068, 1071,  191, 1071, 1070,  191,
      191, 1071, 1071, 1071,  191, 1071, 1071, 1071, 1071,  191,
      191, 1071, 1071, 1071, 1071, 1071,  191, 1071, 1071, 1071,
      191, 1071, 1071, 1071, 1071, 1070, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071,  191,   46,   46,   46,
       46,   46,   88, 1071, 1071,   88,   88,  177,  177,  177,
     1071,  177,  179, 1071,  179,  179,  179,  182, 1071,  182,
      182,  182,  191, 1071,  191,  191,  191,    7, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071
    } ;

static const flex_int16_t yy_chk[4346] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1074,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  383,
       23,   30,   24,   21,  272,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   55,   25,
       55,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   27,   25,   28,   25,  186,

       32,   27,  185,   25,   32,   28,   29,   42,   25,   26,
       32,   28,   29,   29,   29,   42,  182,   26,   92,   29,
       26,   91,   27,   26,   28,   88,   26,   32,   27,   26,
       85,   32,   28,   29,   42,   60,   26,   32,   28,   29,
       29,   29,   42,   34,   26,   33,   29,   26,   36,   33,
       26,   43,   43,   26,   35,   33,   26,   34,   59,   36,
       49,   49,   35,   34,   34,   36,   35,   38,   56,   35,
       34,   38,   33,   50,   50,   36,   33,   38,   43,   43,
       52,   35,   33,   41,   34,   41,   36,   51,   41,   35,
       34,   34,   36,   35,   38,   39,   35,   39,   38,   99,

       39,   57,   57,   47,   38,   58,   58,   39,   39,   45,
       41,   20,   41,   86,   86,   41,   90,   90,   67,   70,
      100,   71,   39,   19,   39,   67,   99,   39,  100,   70,
      101,   67,  102,  101,   39,   39,   40,  103,   67,   70,
       40,   71,  106,   40,   40,   67,   70,  100,   71,  106,
       40,  107,   67,   40,   16,  100,   70,  101,   67,  102,
      101,  180,  180,   40,  103,   67,   70,   40,   71,  106,
       40,   40,  184,  184,  113,   77,  106,   40,  107,   11,
       40,   61,   61,   84,   61,   61,   61,   61,   61,   61,
       68,   61,   61,   61,   68,   77,   72,   61,   68,   61,

       72,  113,   77,   84,   68,   61,   72,   61,  109,    7,
       84,   61,   61,  114,   68,  115,   72,   68,  109,  116,
        4,   68,   77,   72,   61,   68,   61,   72,    3,    0,
       84,   68,   61,   72,   61,  109,  112,  112,   61,   61,
      114,   68,  115,   72,    0,  109,  116,   61,   62,   62,
        0,   62,   62,   62,   62,   62,   62,   73,   62,   62,
       62,   73,   76,  112,  112,   62,   76,   73,  104,  104,
       78,  110,  117,   76,   78,  119,  110,   73,  120,   76,
       78,  121,  104,  122,   73,   62,   76,    0,   73,   76,
       78,  123,   62,   76,   73,  104,  104,   78,  110,  117,

       76,   78,  119,  110,   73,  120,   76,   78,  121,  104,
      122,  124,   62,   76,   62,   63,   81,   78,  123,   63,
      125,  126,   63,  127,  128,   81,  127,   81,  129,   63,
       81,  131,   63,  132,    0,  134,   81,   82,  124,   63,
        0,   82,   63,   81,    0,   82,   63,  125,  126,   63,
      127,  128,   81,  127,   81,  129,   63,   81,  131,   63,
      132,   82,  134,   81,   82,  135,   63,   64,   82,  136,
       83,   64,   82,   83,   83,   64,  108,  108,  108,  137,
      108,   64,    0,  138,   64,  138,  140,    0,   82,  141,
       83,   64,  135,    0,   64,  142,  136,   83,   64,    0,

       83,   83,   64,  108,  108,  108,  137,  108,   64,  111,
      138,   64,  138,  140,  111,  143,  141,   83,   64,   65,
      111,  139,  142,  139,  144,  145,   65,  111,   65,    0,
      146,    0,  147,   65,  139,    0,  111,  149,   65,   65,
        0,  111,  143,  150,    0,  151,   65,  111,  139,  152,
      139,  144,  145,   65,  111,   65,  118,  146,  118,  147,
       65,  139,  118,  154,  149,   65,   65,   66,  154,  118,
      150,   66,  151,  118,  155,   66,  152,  156,   66,  157,
        0,   66,  153,  118,   66,  118,  153,   66,    0,  118,
      154,   66,    0,    0,   66,  154,  118,    0,   66,    0,

      118,  155,   66,  159,  156,   66,  157,  133,   66,  153,
      160,   66,    0,  153,   66,  158,  161,  133,   66,   69,
       69,  162,  133,  133,  158,  163,   69,   69,   69,  164,
      159,  165,  158,   69,  133,  166,  163,  160,    0,   69,
        0,  169,  158,  161,  133,  167,   69,   69,  162,  133,
      133,  158,  163,   69,   69,   69,  164,  170,  165,  158,
       69,    0,  166,  163,    0,  167,   69,   74,  169,  171,
      168,   74,  167,  168,  173,  171,  172,  174,  175,  191,
        0,   74,    0,    0,  170,  274,  276,   74,   74,  172,
      277,   74,  167,    0,   74,    0,  171,  168,   74,  191,

      168,  173,  171,  172,  174,  175,  191,  193,   74,  192,
      192,  196,  274,  276,   74,   74,  172,  277,   74,   75,
       75,    0,  193,  199,  196,  279,  191,  193,   75,    0,
      192,  196,   75,    0,  193,   75,  192,  192,  196,   75,
        0,  194,    0,  199,    0,    0,   75,   75,  194,  193,
      199,  196,  279,    0,  193,   75,  194,  192,  196,   75,
      195,  194,   75,  195,  195,  281,   75,   79,  194,   79,
      199,  197,   79,  197,  282,  194,  283,  284,  286,   79,
       79,    0,    0,  194,  195,    0,    0,  195,  194,   79,
      195,  195,  281,  197,   79,    0,   79,    0,  197,   79,

      197,  282,  287,  283,  284,  286,   79,   79,  198,  198,
      198,  195,  200,  209,    0,    0,   79,   80,  201,  200,
      197,   80,  201,  198,   80,   80,  200,  209,  198,  287,
        0,   80,  200,  209,   80,  198,  198,  198,  288,  200,
      209,   80,  201,    0,   80,  201,  200,  203,   80,  201,
      198,   80,   80,  200,  209,  198,  204,  203,   80,  200,
      209,   80,    0,    0,  289,  288,    0,  203,   80,  201,
      202,  204,  206,  207,  203,  290,  204,  202,  202,  202,
      285,  202,  285,  204,  203,  206,  206,  291,  292,  207,
      202,  289,  206,  207,  203,    0,    0,  202,  204,  206,

      207,  208,  290,  204,  202,  202,  202,  285,  202,  285,
      224,  208,  206,  206,  291,  292,  207,  202,  205,  206,
      207,  208,  205,  205,  213,  210,  210,    0,  208,  205,
      224,  213,  211,    0,  211,  293,  205,  224,  208,    0,
      214,  295,  205,    0,  213,  205,  210,  214,  208,  205,
      205,  213,  210,  210,  211,    0,  205,  224,  213,  211,
      214,  211,  293,  205,  296,  215,  216,  214,  295,  205,
      217,  213,    0,  210,  214,  215,  218,    0,  298,  216,
      217,  211,  212,  218,  212,  215,  216,  214,  212,    0,
      217,  296,  215,  216,  299,  212,  218,  217,  219,  212,

      230,    0,  215,  218,  212,  298,  216,  217,  219,  212,
      218,  212,  215,  216,  220,  212,  221,  217,  219,  222,
      230,  299,  212,  218,  220,  219,  212,  230,  222,  226,
      221,  212,  223,  221,  220,  219,  221,    0,  225,  222,
      226,  220,  225,  221,  228,  219,  222,  230,  223,  226,
      229,  220,  223,  228,  229,  222,  226,  221,  225,  223,
      221,  220,    0,  221,  228,  225,  222,  226,  242,  225,
      229,  228,  231,  231,    0,  223,  226,  229,  297,  223,
      228,  229,    0,    0,  300,  225,  227,  227,  242,  241,
      241,  228,  231,  297,    0,  242,  227,  229,  232,  231,

      231,  227,  227,  301,  232,  297,  232,  227,  233,  241,
      233,  300,  233,  227,  227,  242,  241,  241,  232,  231,
      297,  233,  302,  227,    0,  232,    0,  234,  227,  227,
      301,  232,  233,  232,  227,  233,  241,  233,  237,  233,
      234,  235,  236,    0,    0,  232,  303,  234,  233,  302,
      235,  236,  305,  237,  234,  238,  239,    0,  237,  233,
      240,  235,  236,  239,  240,  237,  244,  234,  235,  236,
      238,  243,  243,  303,  234,  238,  239,  235,  236,  305,
      237,  244,  238,  239,  240,  237,  244,  240,  235,  236,
      239,  240,  243,  244,  245,  306,  246,  238,  243,  243,

      246,    0,  238,  239,    0,  247,    0,  245,  244,  247,
      249,  240,  249,  244,  245,  248,  307,  308,  309,  243,
      246,  245,  306,  246,  248,  247,  250,  246,  251,  248,
      249,  251,  247,  250,  245,  248,  247,  249,    0,  249,
        0,  245,  248,  307,  308,  309,  250,  246,  251,    0,
      254,  248,  247,  250,    0,  251,  248,  249,  251,  252,
      250,  252,  248,  254,  253,  255,    0,  258,  252,  255,
      254,  310,    0,  250,  253,  251,  252,  254,    0,  256,
        0,  252,  256,    0,  253,  257,  252,  258,  252,  255,
      254,  253,  255,  257,  258,  252,  255,  254,  310,  259,

      311,  253,  256,  252,  257,  257,  256,  259,  252,  256,
      260,  253,  257,    0,  258,    0,  255,    0,  261,  259,
      257,  260,  261,  263,  263,  312,  259,  311,    0,  256,
      260,  257,  257,  267,  259,  264,  262,  260,  261,  264,
      262,    0,  261,  262,  263,  261,  259,    0,  260,  261,
      263,  263,  312,  267,    0,  264,  262,  260,  268,  266,
      267,  265,  264,  262,    0,  261,  264,  262,  265,  261,
      262,  263,  266,  268,  265,  313,  314,  315,  268,  266,
      267,  265,  264,  262,    0,  268,  266,  269,  265,  316,
      317,  269,  318,  319,  320,  265,  321,  322,  323,  266,

      268,  265,  313,  314,  315,  268,  266,  324,  265,  325,
      326,  269,  327,  329,  269,  330,  316,  317,  269,  318,
      319,  320,  328,  321,  322,  323,  332,  333,  334,  335,
      336,  337,  328,  338,  324,  339,  325,  326,  269,  327,
      329,  340,  330,  341,  343,  344,  345,  346,  347,  328,
      348,  349,  350,  332,  333,  334,  335,  336,  337,  328,
      338,  351,  339,  352,  353,  354,  355,  356,  340,  357,
      341,  343,  344,  345,  346,  347,  358,  348,  349,  350,
      360,  361,  362,  363,  364,  365,  366,  367,  351,  369,
      352,  353,  354,  355,  356,  370,  357,  371,  372,  371,

      373,  374,  375,  358,  370,  376,  377,  360,  361,  362,
      363,  364,  365,  366,  367,  378,  369,  379,  380,  381,
      384,  379,  370,  385,  371,  372,  371,  373,  374,  375,
        0,  370,  376,  377,  386,  387,    0,  389,  391,  493,
      384,    0,  378,  385,  379,  380,  381,  384,  379,  388,
      385,  494,    0,  392,  386,  387,  388,  389,  391,  394,
        0,  386,  387,  392,  389,  391,  493,  384,  390,  388,
      385,  393,  390,  392,    0,  393,  388,  394,  494,  394,
      392,  386,  387,  388,  389,  391,  394,  395,  495,  398,
      392,  393,  390,  400,  395,  390,  388,  397,  393,  390,

      392,  396,  393,  396,  394,  398,  394,  395,  400,  398,
      397,  401,    0,  400,  395,  495,  398,  397,  393,  390,
      400,  395,  402,  396,  397,  399,  402,  403,  396,    0,
      396,  401,  398,  399,  395,  400,  398,  397,  401,  404,
      400,  403,  405,  496,  397,  399,  402,  403,    0,  402,
      396,  407,  399,  402,  403,  407,  406,    0,  401,  404,
      399,  410,  405,  406,  408,  409,  404,  409,  403,  405,
      496,    0,  399,  402,  403,  407,  406,  414,  407,  408,
      411,  410,  407,  406,  408,  415,  404,  409,  410,  405,
      406,  408,  409,  412,  409,  411,  412,  414,  413,  417,

      411,    0,  407,  406,  414,  415,  408,  411,  410,  413,
        0,  408,  415,  416,  409,  419,  412,  416,  413,  417,
      412,  421,  411,  412,  414,  413,  417,  411,  418,  419,
      418,  420,  415,  422,  421,  419,  413,  416,  420,  423,
      416,  421,  419,  412,  416,  413,  417,  422,  421,    0,
      418,  420,    0,  422,    0,  418,  419,  418,  420,  423,
      422,  421,  419,  424,  416,  420,  423,  424,  421,  427,
      497,  425,  428,  426,  422,  428,  427,  418,  420,  425,
      422,  426,    0,    0,  498,  429,  423,  424,    0,  427,
      424,  425,  499,  426,  424,  428,  427,  497,  425,  428,

      426,  429,  428,  427,  430,  429,  425,  430,  426,  431,
      432,  498,  429,  431,  424,  434,  427,  501,  425,  499,
      426,  434,  428,  435,  430,  432,  433,  436,  429,  431,
      432,  430,  429,  435,  430,  434,  431,  432,  437,  433,
      431,  438,  434,  435,  501,    0,  433,  436,  434,  439,
      435,  430,  432,  433,  436,  440,  431,  432,  437,  439,
      435,  438,  434,  441,  442,  437,  433,  444,  438,  439,
      435,  440,  441,  433,  436,  440,  439,  443,    0,  446,
      446,  504,  440,  441,  442,  437,  439,  444,  438,  445,
      441,  442,  443,  445,  444,  505,  439,  443,  440,  441,

      446,  447,  440,  506,  443,  447,  446,  446,  504,  445,
      441,  442,  508,  448,  444,  448,  445,    0,  450,  443,
      445,  449,  505,  449,  443,  447,  453,  446,  447,  451,
      506,  452,  447,  448,  450,    0,  445,  509,  450,  508,
      448,  449,  448,    0,  451,  450,  453,  452,  449,  451,
      449,  452,  447,  453,    0,  454,  451,  455,  452,    0,
      448,  450,  454,  457,  509,  450,  456,  458,  449,  511,
      455,  451,    0,  453,  452,  454,  451,  455,  452,  460,
      456,  459,  454,  457,  455,  459,  456,  458,  460,  454,
      457,    0,    0,  456,  458,    0,  511,  455,  461,  460,

      512,  513,  454,  462,  455,  459,  460,  456,  459,  461,
      457,  462,  459,  456,  458,  460,  463,  467,  461,  464,
      463,  465,  466,  462,  465,  461,  460,  512,  513,  466,
      462,  514,  459,  469,  464,    0,  461,  467,  462,  464,
      463,  465,  466,  463,  467,  461,  464,  463,  465,  466,
      462,  465,  468,  469,  470,  471,  466,    0,  514,    0,
      469,  464,  468,  472,  467,  475,  464,  463,  465,  466,
        0,  473,  468,  471,  470,  471,  475,  474,  472,  468,
      469,  470,  471,  472,  474,  475,  473,    0,    0,  468,
      472,  473,  475,    0,  476,  515,  478,  474,  473,  468,

      471,  470,  471,  475,  474,  472,  477,  479,  480,  476,
      472,  474,  475,  473,  476,  477,  478,  480,  473,  516,
      481,  476,  515,  478,  474,    0,  477,  479,  480,  481,
        0,    0,    0,  477,  479,  480,  476,  517,  482,  483,
      481,  476,  477,  478,  480,    0,  516,  481,  482,  483,
      482,  485,  486,  477,  479,  480,  481,  484,  482,  483,
      485,  484,    0,  518,  517,  482,  483,  481,  486,    0,
      521,  485,  486,  488,  489,  482,  483,  482,  485,  486,
      487,  484,  487,  490,  484,  482,  483,  485,  484,  489,
      518,  488,  490,  488,  489,  486,  490,  521,  485,  486,

      488,  489,  487,  490,    0,    0,  522,  487,  484,  487,
      490,  491,  492,  523,  491,  524,  489,  525,  488,  490,
      488,  489,  526,  490,  527,  492,  529,  530,  533,  487,
      490,  491,  492,  522,  534,  536,  539,  540,  491,  492,
      523,  491,  524,  541,  525,  542,  543,  546,  550,  526,
      552,  527,  492,  529,  530,  533,  544,  554,  491,  492,
      556,  534,  536,  539,  540,  555,  555,  544,  557,  559,
      541,  560,  542,  543,  546,  550,  561,  552,  562,  563,
      565,  566,  567,  544,  554,  568,  569,  556,  570,  571,
      572,  573,  555,  555,  544,  557,  559,  575,  560,  576,

      577,  578,  581,  561,  582,  562,  563,  565,  566,  567,
      584,  585,  568,  569,  586,  570,  571,  572,  573,  587,
      588,  589,  590,  591,  575,  593,  576,  577,  578,  581,
      595,  582,    0,    0,  600,    0,  601,  584,  585,  705,
      598,  586,  599,    0,  604,  602,  587,  588,  589,  590,
      591,    0,  593,  598,  600,  599,  601,  595,  602,  603,
      598,  600,  599,  601,  604,  602,  705,  598,  603,  599,
      605,  604,  602,  607,  606,    0,  608,    0,  606,  603,
      598,  600,  599,  601,  610,  602,  603,  598,  610,  599,
      605,  604,  602,  607,  609,  603,  608,  605,  606,  611,

      607,  606,  609,  608,  610,  606,  603,  612,  707,    0,
      614,  610,  611,  613,  609,  610,  615,  605,    0,  611,
      607,  609,    0,  608,  614,  606,  611,  612,  613,  609,
      614,  610,  617,  613,  612,  707,  615,  614,  616,  611,
      613,  609,  709,  615,  710,  616,  611,  618,  617,  619,
        0,  614,  617,  619,  612,  613,    0,  614,  616,  617,
      613,    0,  618,  615,  620,  616,  621,  618,  621,  709,
      711,  710,  616,  619,  618,  617,  619,  620,  622,  617,
      619,  624,  622,  623,  620,  616,  625,  712,  621,  618,
      623,  620,    0,  621,  618,  621,  626,  711,  622,  713,

      619,  624,    0,  623,  620,  622,  625,  626,  624,  622,
      623,  620,    0,  625,  712,  621,  626,  623,  627,  628,
      630,  629,    0,  626,  630,  622,  713,    0,  624,  627,
      623,    0,  632,  625,  626,  628,  629,  633,  627,  628,
      634,  629,    0,  626,  630,  627,  628,  630,  629,  631,
      635,  630,  632,  631,  635,  634,  627,  633,  636,  632,
      634,    0,  628,  629,  633,  627,  628,  634,  629,  637,
      714,  630,    0,  631,  635,  640,  631,  635,  636,  632,
      631,  635,  634,    0,  633,  636,  638,  634,  639,  637,
      638,  642,  643,    0,  641,  640,  637,  714,  716,  639,

      631,  635,  640,  641,  644,  636,    0,  645,  639,  646,
      638,  642,  643,  638,  641,  639,  637,  638,  642,  643,
      645,  641,  640,    0,  644,  716,  639,  645,  646,  646,
      641,  644,  647,  648,  645,  639,  646,  638,  642,  643,
        0,  641,  650,  652,  653,  647,  648,  645,  649,    0,
      649,  644,  647,  648,  645,  646,  646,  717,  651,  647,
      648,  649,  650,  652,  653,  651,  654,  655,  649,  650,
      652,  653,  647,  648,    0,  649,  656,  649,  651,  647,
      648,  658,  655,    0,  717,  651,  654,  655,  649,  650,
      652,  653,  651,  654,  655,  649,  656,  657,  659,    0,

        0,  658,  662,  656,  657,  651,  660,  661,  658,  655,
      661,    0,  663,  654,  655,  662,  718,  657,  659,    0,
      660,  660,  662,  656,  657,  659,  660,  661,  658,  662,
      665,  657,  663,  660,  661,  720,  664,  661,  664,  663,
      721,    0,  662,  718,  657,  659,  669,  660,  660,  662,
      665,  666,  668,  660,  661,  667,    0,  665,  664,  663,
      668,  672,  720,  664,  666,  664,  669,  721,  667,  672,
      670,  666,  668,  669,  670,  667,  671,  665,  666,  668,
      671,  672,  667,  675,  722,  664,  675,  668,  672,  674,
        0,  666,  673,  669,  670,  667,  672,  670,  666,  668,

      671,  670,  667,  671,  674,  673,  675,  671,  672,  674,
      675,  722,  673,  675,  676,  677,  674,  679,  678,  673,
      678,  670,  676,  680,  677,    0,  681,  671,  682,    0,
      681,  674,  673,  675,  676,  677,  674,  679,  684,  673,
      678,  676,  677,  680,  679,  678,  681,  678,  682,  676,
      680,  677,  685,  681,  686,  682,  683,  681,  684,    0,
      688,  676,  677,    0,  679,  684,  683,  678,  686,  690,
      680,    0,  685,  681,  686,  682,  683,  687,  690,  685,
      688,  686,  691,  683,  689,  684,  689,  688,  692,  690,
      695,  687,  692,  683,  697,  686,  690,  687,  691,  685,

      723,  686,  691,  683,  687,  690,  689,  688,  693,  691,
      695,  689,  692,  689,  697,  692,  690,  695,  687,  692,
      694,  697,  694,  693,  687,  691,  698,  723,  693,  691,
      724,  696,  699,  689,  696,  693,  700,  695,    0,  692,
      694,  697,  698,  725,  701,  702,  698,  694,  726,  694,
      693,  696,  699,  698,  727,  693,  700,  724,  696,  699,
      728,  696,  729,  700,  701,  702,  732,  694,  733,  698,
      725,  701,  702,  698,  735,  726,  737,  740,  696,  699,
      741,  727,  742,  700,  743,  748,  750,  728,  751,  729,
      752,  701,  702,  732,  755,  733,  756,  757,  758,  759,

      761,  735,  762,  737,  740,  763,  764,  741,  765,  742,
      766,  743,  748,  750,  767,  751,  768,  752,  769,  770,
      771,  755,  773,  756,  757,  758,  759,  761,  774,  762,
      775,  777,  763,  764,  778,  765,  779,  766,    0,  781,
      782,  767,  784,  768,  783,  769,  770,  771,  785,  773,
      786,  859,  787,  788,  788,  774,    0,  775,  777,  781,
      782,  778,  784,  779,  783,  783,  781,  782,  785,  784,
      786,  783,  787,  789,  788,  785,    0,  786,  859,  787,
      788,  788,  789,  790,  791,  792,  781,  782,  793,  784,
        0,  783,  783,  789,  791,  785,  794,  786,  790,  787,

      789,  788,  796,  790,  791,  792,  794,  795,  793,  789,
      790,  791,  792,    0,  795,  793,  794,  797,  861,  800,
      789,  791,  796,  794,  862,  790,    0,  795,  800,  796,
      790,  791,  792,  794,  795,  793,  798,  797,  799,  800,
      798,  795,  801,  794,  797,  861,  800,    0,  802,  796,
        0,  862,    0,  799,  795,  800,  798,  803,  799,  804,
        0,    0,  801,  798,  797,  799,  800,  798,  802,  801,
      863,    0,  803,  805,  804,  802,  808,  803,  806,  804,
      799,  865,  806,  798,  803,  799,  804,  805,  807,  801,
      807,  809,  810,  805,    0,  802,  808,  863,  806,  803,

      805,  804,  812,  808,  803,  806,  804,  810,  865,  806,
      807,  809,  810,  814,  805,  807,  815,  807,  809,  810,
      805,  811,  812,  808,  813,  806,  813,  816,  811,  812,
      817,  815,  819,  814,  810,    0,  815,  807,  809,  810,
      814,  811,  820,  815,  813,    0,  818,  816,  811,  812,
      817,  813,  819,  813,  816,  811,  820,  817,  815,  819,
      814,  818,  820,  815,  822,  821,  818,  823,  811,  820,
      824,  813,  821,  818,  816,  825,  826,  817,  827,  819,
      867,  868,  828,  820,  822,  821,  828,  823,  818,  820,
      824,  822,  821,  818,  823,  825,  826,  824,  827,  821,

      830,  829,  825,  826,  829,  827,  828,  867,  868,  828,
      831,  822,  821,  828,  823,  830,  832,  824,  833,  834,
      830,  829,  825,  826,  836,  827,    0,  830,  829,  838,
      831,  829,  834,  828,  870,    0,  832,  831,  833,  834,
      835,    0,  830,  832,  836,  833,  834,  830,  829,  838,
      837,  836,  872,  835,  837,    0,  838,  831,  839,  834,
      835,  870,  839,  832,  840,  833,  834,  835,  840,    0,
      837,  836,  841,  841,    0,    0,  838,  837,  876,  872,
      835,  837,  839,  842,    0,  839,  878,  835,  840,  839,
      844,  840,  845,  841,  844,  840,  850,  837,  842,  841,

      841,  843,  843,  842,    0,  876,  845,    0,    0,  839,
      842,  846,  845,  878,  844,  840,  850,  844,    0,  845,
      841,  844,  843,  850,  846,  842,  851,  847,  843,  843,
      842,  846,  848,  845,  852,  852,  848,    0,  846,  845,
      849,  844,  847,  850,  849,  853,  851,  847,  854,  843,
        0,  846,  879,  851,  847,  852,  848,  885,  846,  848,
      886,  852,  852,  848,  849,  853,  855,  849,  854,  847,
      858,  849,  853,  851,  847,  854,  889,  856,  890,  879,
      855,  856,  852,  848,  885,  857,  855,  886,  892,  857,
      858,  849,  853,  855,  893,  854,  894,  858,  896,  897,

      898,  856,  902,  889,  856,  890,  904,  855,  856,  857,
      905,  906,  857,  855,  907,  892,  857,  858,  912,  913,
      914,  893,  915,  894,  917,  896,  897,  898,  856,  902,
      916,    0,  919,  904,  918,  921,  857,  905,  906,  916,
      914,  907,  915,  924,  917,  912,  913,  914,  918,  915,
      916,  917,  919,  920,  918,  921,  922,  916,  922,  919,
      920,  918,  921,  924,  926,  925,  916,  914,  925,  915,
      924,  917,    0,  920,  923,  918,  974,  916,  922,  919,
      920,  918,  921,  922,  926,  922,  928,  920,  925,  923,
      924,  926,  925,    0,  923,  925,  927,  929,  927,  930,

      920,  923,  931,  974,    0,  922,  928,  932,    0,    0,
        0,  926,  935,  928,    0,  925,  923,  929,  927,  930,
      934,  923,  931,  927,  929,  927,  930,  932,  933,  931,
      936,  937,  935,  928,  932,  934,  938,  933,    0,  935,
      934,  939,    0,    0,  929,  927,  930,  934,  933,  931,
      936,  937,  940,  941,  932,  933,  938,  936,  937,  935,
        0,  939,  934,  938,  933,  940,  942,  934,  939,  943,
      946,  976,  940,  941,  944,  933,    0,  936,  937,  940,
      941,  944,  948,  938,    0,  949,  942,  945,  939,  943,
      946,  945,  940,  942,  944,  947,  943,  946,  976,  940,

      941,  944,  948,  950,  951,  949,  951,  977,  944,  948,
      947,  945,  949,  942,  945,  947,  943,  946,  945,  954,
        0,  944,  947,  950,  955,  952,  951,  952,    0,  948,
      950,  951,  949,  951,  977,  953,  956,  947,  945,  954,
      958,  957,  947,  982,  955,  984,  954,  952,  957,  953,
      950,  955,  952,  951,  952,  953,  956,  961,  985,  961,
      958,  957,  953,  956,    0,  959,  954,  958,  957,  959,
      982,  955,  984,  960,  952,  957,  953,  960,  962,  961,
      988,  963,  953,  956,  961,  985,  961,  958,  957,  959,
      964,  965,  959,  962,  966,  968,  959,  960,  962,  967,

      960,  963,  968,  989,  960,  962,  961,  988,  963,  992,
      964,  965,  967,  993,  966,  968,  959,  964,  965,  967,
      962,  966,  968,  994,  960,  962,  967,  995,  963,  968,
      989,  998,  999, 1000,    0, 1001,  992,  964,  965,  967,
      993,  966,  968, 1002, 1003, 1004,  967, 1005, 1003, 1006,
      994,  998,  999, 1000,  995, 1001,    0, 1007,  998,  999,
     1000, 1008, 1001, 1002, 1006, 1004, 1009, 1005, 1003, 1006,
     1002, 1003, 1004,    0, 1005, 1003, 1006, 1007,  998,  999,
     1000, 1008, 1001, 1010, 1007, 1011, 1009, 1011, 1008, 1012,
     1002, 1006, 1004, 1009, 1005, 1003, 1006, 1014, 1013, 1015,

     1016, 1019,    0, 1010, 1007, 1027,    0, 1011, 1008, 1012,
     1010, 1013, 1011, 1009, 1011,    0, 1012, 1014, 1013, 1015,
     1016, 1019, 1017, 1018, 1014, 1013, 1015, 1016, 1019, 1018,
     1010, 1020, 1027, 1022, 1011, 1024, 1012, 1017, 1013, 1021,
     1030, 1022, 1017, 1018, 1014, 1013, 1015, 1016, 1019, 1017,
     1018, 1020, 1021, 1022, 1025, 1024, 1018, 1023, 1020, 1021,
     1022, 1032, 1024, 1026, 1017, 1035, 1021, 1030, 1022, 1017,
     1018, 1036, 1023, 1037, 1025, 1040, 1039, 1023, 1020, 1021,
     1022, 1025, 1024, 1026, 1023, 1041, 1021, 1043, 1032, 1045,
     1026, 1039, 1035, 1042, 1051, 1040, 1039, 1046, 1036, 1023,

     1037, 1025, 1040, 1039, 1023, 1041, 1044, 1043, 1042, 1045,
     1026, 1047, 1041, 1042, 1043, 1053, 1045, 1046, 1039, 1044,
     1042, 1051, 1040, 1039, 1046, 1049, 1044, 1050, 1048, 1049,
     1056, 1047, 1041, 1044, 1043, 1042, 1045, 1065, 1047, 1048,
     1042, 1057, 1053, 1058, 1046, 1049, 1044, 1050, 1048, 1060,
        0, 1059, 1049, 1044, 1050, 1048, 1049, 1056, 1047, 1061,
        0, 1057, 1066, 1058, 1065, 1059, 1048, 1062, 1057, 1060,
     1058, 1059, 1049, 1067, 1050, 1048, 1060, 1062, 1059, 1061,
        0,    0, 1066, 1070,    0,    0, 1061, 1062, 1057, 1066,
     1058,    0, 1059, 1067, 1062,    0, 1060,    0, 1059, 1068,

     1067,    0,    0, 1070, 1062,    0, 1061,    0, 1068, 1066,
     1070,    0,    0,    0, 1062,    0,    0,    0,    0, 1068,
     1067,    0,    0,    0,    0,    0, 1068,    0,    0,    0,
     1070,    0,    0,    0,    0, 1068,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1068, 1072, 1072, 1072,
     1072, 1072, 1073,    0,    0, 1073, 1073, 1075, 1075, 1075,
        0, 1075, 1076,    0, 1076, 1076, 1076, 1077,    0, 1077,
     1077, 1077, 1078,    0, 1078, 1078, 1078, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1986 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2000 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2287 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1072 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1071 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 146:
#line 210 "flex_lexer.l"
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 235 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3138 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1072 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1072 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1071);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 240 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

