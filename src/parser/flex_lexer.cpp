#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1002] =
    {   0,
        0,    0,    2,    2,  146,  144,    4,    4,  144,  144,
      137,  144,  137,  137,  140,  137,  137,  137,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  137,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    4,  132,    0,    0,  143,    1,  140,  139,  138,
      134,  133,  131,  135,  142,  142,  142,  142,  142,  142,

      116,  142,  117,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  118,  142,  142,  119,
      120,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  121,  122,  123,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  124,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  136,    2,    2,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  141,  138,  102,  142,
      103,  142,  142,  104,  142,  105,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  106,  142,  128,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  107,  142,  142,

      142,  142,  142,  142,  142,  108,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      109,  142,  142,  110,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  111,  142,  142,  112,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  113,
      142,  142,  142,  142,  114,  142,  142,  142,  142,  115,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  142,  142,
      142,  142,  142,  142,   75,  142,   76,   77,  142,  142,
      142,  142,   78,  142,  142,  142,  142,   79,  142,  142,

      142,   80,   81,  142,  142,  142,  142,  142,  142,   82,
       83,   84,  142,  142,   85,  142,   86,  142,  127,  142,
      142,  142,  142,  142,  142,   87,  142,   88,   89,   90,
      142,   92,  142,  142,  142,  142,  142,   93,  142,  142,
      142,  142,  142,   94,  142,  142,  142,  142,  142,  142,
      142,  142,   95,  142,  142,  142,  142,   96,   97,   98,
      142,  142,  142,  142,  142,  142,  142,  142,   99,  142,
      100,  142,  101,  130,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       56,   57,  142,   58,  142,  142,  142,  142,  142,  142,
       59,  142,  142,  142,   60,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,   61,  142,  142,   91,  142,

       62,   63,  142,  142,  142,  142,   64,   65,   66,   67,
      142,  129,  142,  142,  142,   68,   69,  142,  142,  142,
      142,  142,   70,  142,  142,  142,  142,  142,   71,  142,
      142,  142,   72,  142,  142,  142,   73,  142,  142,  142,
       74,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  142,   31,  142,  142,   32,  142,   33,  142,
      142,   34,   35,  142,   36,   37,   38,  142,   39,  142,
      142,   41,   42,  142,   43,   44,  142,  142,   45,  126,
      142,  142,   46,  142,  142,  142,   47,  142,   48,  125,
       49,   50,  142,   51,  142,  142,  142,   52,   53,   54,
       55,  142,  142,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   14,   15,   16,   17,   18,  142,
       19,  142,   20,   21,   40,   22,   23,  142,   24,  142,
      142,   25,   26,  142,   27,   28,  142,  142,  142,   29,
       30,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  142,   10,
      142,   11,  142,   12,  142,  142,   13,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  142,    7,  142,    8,
        9,    2,    2,    2,    2,    2,    5,    6,    2,    2,

        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static const flex_int16_t yy_base[1009] =
    {   0,
        0,    0,   67,    0,  426, 3957,  133,  135,  405,    0,
     3957,  373,  131,  366,  133,  132,  358,  357,  129,  129,
      137,  135,  145,  179,  175,  189,  189,  124,  141,  201,
      204,  217,  235,  243,    0,  242,  276,  319,  244,  198,
      261,  144,  284,    0,  222,  283,  311,  315,    0,  301,
      253,  289,  297,  299,  276,  268,  377,  444,  498,  550,
      598,  646,  297,  373,  694,  298,  153,  375,  436,  746,
      794,  445,  300,  449,  844,  896,  486,  544,  457,  354,
      210,  311, 3957,  265,  260, 3957, 3957,  320,  255,  245,
     3957, 3957, 3957, 3957,    0,  258,  257,  373,  393,  294,

      311,  447,    0,  314,  330,  496,  387,  313,  487,  551,
      441,  366,  384,  384,  424,  445,  551,  440,  438,  480,
      492,  499,  500,  539,  585,  498,    0,  511,  505,  587,
      548,  557,  548,  599,  598,  612,  590,  600,  602,  599,
      600,  609,  624,  621,    0,  625,  625,  635,  656,  653,
      646,  652,  655,  663,  653,  651,  669,  672,  664,  691,
      700,  696,  695,  691,  705,  712,  709,  710,  732,  716,
      705,  728, 3957,    0,  354,    0,  231,  198,    0,    0,
      349,  192,  154,    0,    0,    0,    0,  754,  758,  755,
      791,  836,  799,  850,  887,  796,  898,  804,  901,  930,

      924,  938,  990,  942,  972,  974,  946,  976, 1000, 1050,
     1009, 1022, 1053, 1032, 1058, 1064, 1082, 1094, 1104,  884,
     1040, 1107, 1156, 1113, 1112, 1117, 1152, 1142, 1188, 1174,
     1196, 1200, 1202, 1204, 1218, 1210, 1239, 1146, 1242, 1255,
     1258, 1254, 1256, 1279, 1290, 1291, 1309, 1312, 1327, 1308,
     1333, 1341, 1344, 1253, 1342, 1365, 1366, 1394, 1384, 1395,
     1416, 1407, 1397, 1418, 1439,    0, 3957,  145,    0,  725,
        0,  749,  746,    0,  764,    0,  751,  747,  779,  954,
      827,  829,  834,  856,  839,    0,  858,    0,  861,  890,
     1030,  892,  922,  963, 1009,  996, 1014,    0, 1032, 1083,

     1100, 1122, 1151, 1155, 1207,    0, 1288, 1338, 1349, 1362,
     1378, 1415, 1415, 1422, 1427, 1442, 1439, 1451, 1452, 1453,
     1458, 1439, 1452,    0, 1454, 1470, 1467, 1473, 1477, 1472,
     1461, 1466, 1467,    0, 1477, 1474, 1475, 1490, 1491, 1496,
     1484, 1483, 1494, 1507, 1490, 1503, 1507, 1499, 1512,    0,
     1495, 1500, 1507, 1516,    0, 1513, 1510, 1517, 1527,    0,
     1519, 1525, 1521, 1542, 1532, 1527, 1546, 1527, 1531, 1547,
     1544, 1535,    0,  140, 1557, 1559, 1561, 1569, 1578, 1580,
     1594, 1582, 1591, 1595, 1603, 1599, 1631, 1632, 1634, 1643,
     1633, 1635, 1645, 1657, 1686, 1668, 1683, 1669, 1685, 1687,

     1711, 1717, 1699, 1721, 1722, 1723, 1753, 1740, 1752, 1762,
     1736, 1757, 1785, 1788, 1774, 1776, 1807, 1813, 1811, 1828,
     1829, 1830, 1841, 1825, 1839, 1847, 1871, 1873, 1883, 1879,
     1882, 1884, 1901, 1913, 1927, 1915, 1925, 1936, 1937, 1887,
     1959, 1969, 1961, 1938, 1967, 1977, 1990, 1992, 2005, 1995,
     2021, 2031, 2023, 2035, 2027, 2029, 2046, 2060, 2069, 2079,
     2065, 2077, 2083, 2081, 2094, 2100, 2109, 2122, 2123, 2135,
     2137, 2151, 2154, 2148, 2165, 2163, 2186, 2191, 1553, 1660,
     1677, 1719, 1778, 1797,    0, 1899,    0,    0, 1935, 1936,
     1956, 1987,    0, 2004, 2028, 2172, 2192,    0, 2198, 2193,

     2193,    0,    0, 2191, 2194, 2192, 2194, 2221, 2223,    0,
        0,    0, 2224, 2210,    0, 2213,    0, 2215,    0, 2226,
     2215, 2211, 2221, 2224, 2237,    0, 2233,    0,    0,    0,
     2226,    0, 2235, 2243, 2244, 2242, 2238,    0, 2256, 2256,
     2247, 2249, 2255,    0, 2269, 2275, 2265, 2261, 2260, 2268,
     2270, 2282,    0, 2282, 2280, 2288, 2281,    0,    0, 2279,
     2296, 2286, 2280, 2301, 2284, 2302, 2305, 2305,    0, 2294,
        0, 2312,    0,    0, 2314, 2316, 2313, 2325, 2338, 2328,
     2330, 2346, 2344, 2347, 2362, 2368, 2383, 2386, 2384, 2392,
     2401, 2387, 2420, 2418, 2437, 2432, 2446, 2422, 2441, 2470,

     2471, 2456, 2474, 2500, 2506, 2458, 2487, 2492, 2515, 2525,
     2504, 2528, 2530, 2546, 2540, 2541, 2558, 2570, 2579, 2581,
     2582, 2549, 2600, 2603, 2604, 2612, 2618, 2615, 2636, 2637,
     2652, 2641, 2669, 2653, 2677, 2654, 2678, 2690, 2687, 2686,
     2712, 2723, 2720, 2729, 2711, 2744, 2745, 2762, 2721, 2757,
     2774, 2763, 2775, 2766, 2780, 2797, 2798, 2799, 2814, 2820,
     2833, 2829, 2832, 2851, 2842, 2850, 2863, 2864, 2865, 2868,
        0,    0, 2328,    0, 2353, 2396, 2425, 2441, 2476, 2495,
        0, 2522, 2579, 2649,    0, 2643, 2752, 2828, 2872, 2858,
     2859, 2868, 2882, 2889, 2887,    0, 2894, 2889,    0, 2888,

        0,    0, 2889, 2905, 2892, 2900,    0,    0,    0,    0,
     2908,    0, 2920, 2914, 2903,    0,    0, 2919, 2907, 2909,
     2924, 2921,    0, 2930, 2928, 2913, 2937, 2941, 2924, 2926,
     2925, 2945,    0, 2942, 2949, 2950,    0, 2942, 2961, 2962,
        0, 2959, 2960, 2961, 2970, 2971, 2972, 2974, 2993, 2995,
     2976, 3004, 3016, 3027, 3010, 3025, 3035, 3039, 3038, 3044,
     3068, 3069, 3067, 3093, 3078, 3092, 3080, 3102, 3117, 3101,
     3118, 3123, 3132, 3136, 3134, 3153, 3135, 3166, 3168, 3171,
     3172, 3176, 3177, 3189, 3187, 3205, 3201, 3202, 3206, 3230,
     3231, 3235, 3241, 3239, 3260, 3264, 3254, 3293, 3279, 3289,

     3285, 3295, 3304, 3294, 3308, 3318, 3323, 3329, 3333, 3352,
     3358, 3339, 2962,    0, 3005, 3033, 3032, 3072,    0, 3149,
     3169,    0,    0, 3212,    0,    0,    0, 3238,    0, 3231,
     3231,    0,    0, 3314,    0,    0, 3333, 3357,    0,    0,
     3355, 3367,    0, 3349, 3367, 3348,    0, 3371, 3357,    0,
        0,    0, 3370,    0, 3386, 3387, 3372,    0,    0,    0,
        0, 3375, 3385, 3393, 3397, 3402, 3401, 3412, 3416, 3407,
     3435, 3431, 3425, 3437, 3467, 3441, 3456, 3466, 3469, 3470,
     3471, 3485, 3475, 3479, 3481, 3504, 3509, 3510, 3515, 3519,
     3520, 3534, 3525, 3533, 3543, 3544, 3549, 3555, 3579, 3573,

     3574, 3578, 3583, 3588, 3589, 3611, 3617, 3612, 3623, 3628,
     3629, 3633, 3652, 3661,    0,    0,    0,    0,    0, 3407,
        0, 3432,    0,    0,    0,    0,    0, 3513,    0, 3546,
     3565,    0,    0, 3582,    0,    0, 3605, 3611, 3642,    0,
        0, 3647, 3651, 3657, 3662, 3663, 3691, 3666, 3685, 3696,
     3697, 3701, 3702, 3706, 3736, 3715, 3737, 3719, 3720, 3725,
     3754, 3731, 3755, 3760, 3768, 3759, 3765, 3770, 3688,    0,
     3756,    0, 3776,    0, 3771, 3782,    0, 3794, 3799, 3808,
     3804, 3825, 3810, 3813, 3842, 3827, 3805,    0, 3808,    0,
        0, 3839, 3843, 3844, 3848, 3856,    0,    0, 3861, 3867,

     3957, 3932, 3936,  136, 3940, 3944, 3948, 3952
    } ;

static const flex_int16_t yy_def[1009] =
    {   0,
     1001,    1, 1001,    3, 1001, 1001, 1001, 1001, 1001, 1002,
     1001, 1003, 1001, 1001, 1001, 1001, 1001, 1001, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1001, 1005, 1005, 1001, 1005, 1006, 1005, 1007,
     1005, 1005, 1005, 1005, 1005, 1005, 1008, 1008,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1005, 1001, 1001, 1002, 1003, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1004, 1004, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1001, 1005, 1005, 1005, 1006, 1007, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58, 1005, 1001, 1001, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1005, 1005,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004,   58,   58,   58,
       58,   58,   58,   58,   58,   58, 1004, 1004, 1004, 1004,
     1004,   58,   58,   58,   58,   58, 1004, 1004,   58,   58,

        0, 1001, 1001, 1001, 1001, 1001, 1001, 1001
    } ;

static const flex_int16_t yy_nxt[4025] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   35,   42,   35,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   35,   42,   35,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,

       77,   78,   79,   73,   80,   73,   44,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       73,   80,   73,   81,   82,   82,   82,   82,   87,   95,
       88,   90,   88,   91,   92,   96,  102,   97,  109,  374,
      104,  132,  110,   98,  268,   99,  111,  105,  133,  100,
      101,  172,  112,  374,  106,  113,  103,  107,  108,  114,
      226,  115,   96,  102,   97,  109,  116,  104,  132,  110,
       98,  117,   99,  111,  105,  133,  100,  101,  172,  112,
      188,  106,  113,  103,  107,  108,  114,  226,  115,  122,

      118,  182,  124,  116,  179,  123,  119,  127,  117,  120,
      125,  168,  121,  128,  129,  130,  126,  188,  134,  169,
      131,  137,  135,  175,   82,  138,  122,  118,  136,  124,
      140,  139,  123,  119,  127,  373,  120,  125,  168,  121,
      128,  129,  130,  126,  141,  134,  169,  131,  137,  135,
      142,  143,  138,  144,  268,  136,  148,  140,  139,  151,
      180,  145,  181,  152,   89,  146,   86,  149,  147,  267,
      165,  141,  166,  150,  269,  167,  266,  142,  143,  187,
      144,  170,  171,  148,   82,   82,  151,  186,  145,  270,
      152,  153,  146,  154,  149,  147,  155,  165,  182,  166,

      150,  269,  167,  156,  157,  183,  181,  179,  170,  171,
      184,  185,   82,   82,  188,  188,  270,  188,  153,  174,
      154,  215,  176,  155,  275,  225,  276,  216,   90,   88,
      156,  157,  158,  159,  188,  188,  160,  188,  279,  161,
      162,  188,  188,  281,  188,  280,  163,  286,  215,  164,
      173,  275,  225,  276,  216,  175,   82,  183,  181,  158,
      159,  188,  188,  160,  188,  279,  161,  162,   94,   93,
      281,  265,  280,  163,  286,   89,  164,  174,  174,   86,
      174,  174,  174,  174,  174,  174,  217,  174,  174,  174,
      188,  188,  227,  189,  218,  190,  228,  271,  265,  295,

      219,  191,  229,  192,  284,  272,  273,  193,  194,  274,
      188,  296,  188,  217,  285,  297,   83,  188,  188,  227,
      189,  218,  190,  228,  271, 1001,  295,  219,  191,  229,
      192,  284,  272,  273,  193,  194,  274,  188,  296,  188,
      298,  285,  297,  174,  174,  174, 1001,  174,  174,  174,
      174,  174,  174,  230,  174,  174,  174,  231,  241, 1001,
      299,  195,  188,  232,  305,  277,  244,  298,  306,  242,
      245,  293,  294,  188,  188,  243, 1001,  263,  264,  278,
      230,  196,  188, 1001,  231,  241,  188,  299,  195,  188,
      232,  305,  277,  244,  188,  306,  242,  245,  293,  294,

      188,  188,  243,  188,  263,  264,  278,  307,  196,  188,
      174,  197,  258,  188,  259,  188,  308,  260,  198,  287,
      282,  188,  283,  188,  288,  199,  309,  310,  200,  201,
      188,  315,  316,  317,  307,  188, 1001, 1001,  197,  258,
     1001,  259,  188,  308,  260,  198,  287,  282, 1001,  283,
      188,  288,  199,  309,  310,  200,  201,  261,  315,  316,
      317,  188,  188,  202,  289,  262,  300,  203,  301,  290,
      311,  204,  302,  312,  322,  291, 1001,  205,  323,  303,
      206,  188,  292,  304,  261,  324, 1001,  188,  188, 1001,
      202,  289,  262,  300,  203,  301,  290,  311,  204,  302,

      312,  322,  291,  318,  205,  323,  303,  206,  188,  292,
      304,  313,  324,  319,  188,  188,  314,  325,  320,  321,
      330,  326,  207,  327,  208,  328,  331,  329,  332,  209,
      318,  333,  334,  335,  210,  188, 1001,  336,  313,  337,
      319,  338,  188,  314,  325,  320,  321,  330,  326,  207,
      327,  208,  328,  331,  329,  332,  209,  339,  333,  334,
      335,  210,  188,  188,  336,  340,  337,  211,  338,  341,
      342,  346,  344,  212,  343,  347,  213,  345,  348,  214,
      351,  352,  353,  188,  339, 1001,  354,  349,  355, 1001,
      188, 1001,  340, 1001,  211,  350,  341,  342,  346,  344,

      212,  343,  347,  213,  345,  348,  214,  351,  352,  353,
      188,  188,  220,  354,  349,  355,  356,  358,  221,  222,
      223,  359,  350,  360,  361,  224,  362,  357,  364,  363,
      365,  188, 1001,  370,  366, 1001, 1001,  371,  188,  220,
      367,  372,  479,  356,  358,  221,  222,  223,  359,  368,
      360,  361,  224,  362,  357,  364,  363,  365,  188,  233,
      370,  366,  369,  188,  371, 1001,  480,  367,  372,  479,
      481,  188,  188,  234,  375,  188,  368,  482,  483,  235,
      236, 1001,  484,  188, 1001, 1001,  233,  376, 1001,  369,
      188,  188,  188,  480, 1001,  188, 1001,  481,  188,  188,

      234,  375,  188,  485,  482,  483,  235,  236,  188,  484,
      188,  188,  237,  188,  376,  377,  188,  387,  188,  188,
      238,  188,  188,  378,  239, 1001, 1001,  240,  188,  381,
      485,  188, 1001,  188, 1001,  188,  188, 1001,  188,  237,
      188,  188,  377,  188,  387, 1001, 1001,  238,  188,  379,
      378,  239,  380,  188,  240,  188,  381,  488,  188,  246,
      188,  247,  489,  188,  248,  382,  490,  188,  188,  491,
      492,  249,  250,  188, 1001,  493,  379, 1001, 1001,  380,
      188,  188, 1001, 1001,  488,  494,  246,  188,  247,  489,
     1001,  248,  382,  490,  188, 1001,  491,  492,  249,  250,

      188,  188,  493,  495,  188,  383, 1001,  498,  188,  251,
      252, 1001,  494,  253,  188,  188,  254,  255,  188,  384,
     1001,  188,  385,  256,  188,  388,  257,  389,  188,  386,
      495,  188,  383,  188,  498,  188,  251,  252,  188,  499,
      253,  188,  188,  254,  255,  188,  384,  390,  188,  385,
      256,  188,  388,  257,  389,  188,  386,  391,  392,  188,
      188,  188,  188,  188, 1001,  188,  499,  188,  188,  486,
      393,  487,  399,  400,  390,  394, 1001,  403, 1001,  188,
     1001, 1001,  188,  188,  391,  392,  188, 1001,  188,  188,
      188,  188,  404,  188,  188,  500,  486,  393,  487,  399,

      400,  402,  394,  395,  403,  401,  188,  188,  396,  188,
      188,  188, 1001,  188,  397,  405,  188,  188,  188,  404,
      188,  398,  500,  501,  502, 1001,  188,  188,  402, 1001,
      395,  503,  401,  411,  188,  396,  188,  188,  188,  188,
      188,  397,  405, 1001,  188,  504,  188,  496,  398,  188,
      501,  502,  412,  188,  188, 1001,  414,  188,  503,  188,
      411,  422,  497, 1001,  188,  406,  188,  407, 1001,  188,
      188,  408,  504,  188,  496,  188,  188,  188,  409,  412,
      413,  188,  410,  414,  188,  415,  188,  188,  422,  497,
      188,  416,  406, 1001,  407,  188,  188,  188,  408,  188,

      505,  188,  188, 1001,  188,  409, 1001,  413,  188,  410,
     1001,  188,  415,  417,  188,  506,  418,  188,  416,  188,
      419,  188,  188, 1001,  188,  420,  188,  505,  188,  188,
      188,  188, 1001,  429,  188,  423, 1001,  421,  188,  428,
      417,  188,  506,  418,  188, 1001,  188,  419,  188,  188,
      188,  188,  420,  507,  430, 1001,  188,  188,  188,  188,
      429,  188,  423,  188,  421,  432,  428,  433,  188,  188,
      431,  188,  424,  188, 1001,  508,  188,  188, 1001,  188,
      507,  430,  425,  188, 1001,  509,  188,  426,  427,  188,
      188,  188,  432,  188,  433, 1001,  188,  431, 1001,  424,

      188,  434,  508,  435,  436,  188,  188, 1001, 1001,  425,
      188,  188,  509,  188,  426,  427,  188,  188,  188,  188,
      188,  188,  437,  442,  510,  188,  438,  188,  434, 1001,
      435,  436,  188,  188,  439,  188,  440,  188,  188,  188,
      188,  188,  441, 1001,  188, 1001,  188,  188,  188,  437,
      442,  510,  188,  438,  188,  188,  188,  443,  444,  188,
      188,  439,  188,  440,  188, 1001,  188,  447,  188,  441,
      464,  188,  188,  448,  188,  188,  188,  449, 1001,  188,
     1001, 1001,  188,  188,  443,  444,  188,  445,  446, 1001,
      188,  188,  188,  188,  447,  188,  188,  464,  188,  188,

      448, 1001,  188,  188,  449,  450,  188,  188,  188,  452,
      451,  453, 1001,  511,  445,  446,  188,  188,  188,  188,
      188,  459,  188,  188,  454,  188,  188,  188,  188,  188,
     1001, 1001,  450,  455,  188,  188,  452,  451,  453,  457,
      511,  456, 1001,  188,  188,  188,  188,  460,  459,  188,
      188,  454,  188,  188,  188,  188,  188,  458,  188,  188,
      455,  188,  512,  513,  188,  461,  457,  465,  456,  462,
      188,  188,  188,  188,  460, 1001,  188,  188,  188,  188,
      463,  188,  188,  188,  458,  188,  188, 1001,  188,  512,
      513,  188,  461,  466,  465,  514,  462,  188,  515,  467,

      470,  188,  188,  188, 1001,  188,  188,  463,  188,  188,
      188,  188,  188, 1001,  476,  468,  471, 1001,  469, 1001,
      466,  188,  514, 1001,  474,  515,  467,  470,  188,  188,
      188,  188,  188,  188,  188,  188,  516,  475,  188,  188,
      472,  476,  468,  471,  188,  469,  473,  517,  188, 1001,
      477,  474,  478,  188,  518,  188,  188,  519,  188,  188,
      188,  188,  188,  516,  475,  520,  521,  472,  522,  523,
      524,  188,  527,  473,  517,  525,  188,  477,  528,  478,
      188,  518,  188,  188,  519,  526,  529,  530,  531,  532,
      533,  534,  520,  521,  535,  522,  523,  524,  536,  527,

      537,  538,  525,  188,  539,  528,  540,  541,  542,  543,
      544,  545,  526,  529,  530,  531,  532,  533,  534,  546,
      547,  535,  548,  549,  550,  536,  551,  537,  538,  552,
      553,  539,  554,  540,  541,  542,  543,  544,  545,  555,
      556,  557,  558,  559,  560,  561,  546,  547,  564,  548,
      549,  550,  562,  551,  563,  565,  552,  553,  566,  554,
      567,  568,  569,  570,  573,  574,  555,  556,  557,  558,
      559,  560,  561,  571,  188,  564,  575,  572,  188,  562,
     1001,  563,  565,  671, 1001,  566,  576,  567,  568,  569,
      570,  573,  574, 1001,  188,  188,  188,  188,  188,  188,

      571,  188,  577,  575,  572,  188,  188,  578,  188, 1001,
      671,  188,  188,  576,  582,  188,  583,  188,  579,  188,
      188,  188,  188,  188,  188,  188,  188,  581,  188,  577,
      580,  188,  188,  188,  578,  188,  188, 1001,  188,  188,
      188,  582,  188,  583,  188,  579,  188,  188,  188,  188,
      188,  188,  188, 1001,  581,  188,  587,  580,  188,  188,
      188,  584,  589,  188,  588,  585,  586,  188,  188,  188,
      188,  188,  188, 1001,  188,  188,  188,  188,  188,  188,
      188,  591,  188,  587,  594,  188,  188,  188,  584,  589,
      672,  588,  585,  586,  188,  188,  188,  188,  188,  188,

      592,  188,  595,  188,  188,  188,  188,  188,  591,  188,
      590,  594,  188,  188,  673,  593,  599,  672, 1001,  596,
      188,  188,  188,  188,  188,  597, 1001,  592,  188,  595,
      188,  188,  188,  188,  188,  600,  188,  590,  188,  188,
      601,  673,  593,  599, 1001,  598,  596,  188,  188,  188,
      188,  188,  597,  606,  188,  188,  674,  188,  188,  188,
      188,  188,  600,  188, 1001,  188,  188,  601,  602,  188,
      188,  603,  598,  188,  188,  188,  604,  188, 1001,  188,
      606,  188, 1001,  674,  188,  188,  188,  188,  609,  188,
      188,  188,  605,  188,  188,  602,  188,  188,  603,  188,

      188,  188,  188,  604,  188,  188,  188, 1001,  675,  610,
      607,  188,  608,  188,  676,  609,  188,  188,  188,  605,
      188,  188,  188, 1001,  188,  188,  188,  611,  188,  188,
      188, 1001,  188, 1001,  612,  675,  610,  607,  188,  608,
      188,  676,  618,  613,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  616,  611,  188,  619,  188,  188,  615,
      614,  612,  188, 1001,  620,  188,  188,  188,  617,  618,
      613,  188,  188,  188,  188,  188,  188,  188,  188, 1001,
      616, 1001, 1001,  619,  188,  188,  615,  614,  621,  188,
      188,  620,  188,  188,  188,  617,  188, 1001,  622,  188,

      188,  626, 1001,  188,  188,  188,  623, 1001,  188,  624,
      188,  188,  677, 1001,  625,  621,  188,  188,  188,  188,
      188,  188,  627,  188,  188,  622,  188,  188,  626,  628,
      188,  188,  188,  623,  630,  188,  624,  188,  188,  677,
      629,  625,  188,  188,  188,  188,  188,  188,  188,  627,
      188,  188,  188,  188,  188,  637,  628,  188,  631,  188,
      678,  630,  188, 1001,  188,  188,  679,  629,  632,  188,
      633,  188, 1001,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  637,  634,  638,  631,  188,  678,  680,  188,
      639,  188,  636,  679,  188,  632,  188,  633,  188,  635,

      188,  188,  188,  188,  188,  188,  188,  188,  643,  188,
      634,  638,  188,  188,  188,  680,  640,  639,  681,  636,
      641,  188,  188,  188, 1001,  188,  635,  188,  682,  188,
      642,  188,  188,  188,  188,  643,  188, 1001,  188,  188,
      646,  188,  188,  640,  648,  681,  188,  641,  188,  188,
     1001,  645,  188,  644,  188,  682,  188,  642,  188,  188,
      188,  683,  647,  188,  188,  188,  188,  646,  188,  188,
     1001,  648,  188,  188, 1001,  188, 1001,  188,  645,  188,
      644,  649,  188,  188, 1001,  188,  188,  188,  683,  647,
      188,  188,  650,  188,  188,  188,  188,  188,  188,  188,

      188,  651,  188,  652,  188,  653,  188,  655,  649,  188,
      188,  656, 1001,  188,  188,  654,  188,  188,  188,  650,
      188,  188, 1001,  188,  188,  188,  188,  188,  651,  188,
      652,  188,  653,  188,  655,  657, 1001,  188,  656,  188,
      188,  188,  654,  188,  188,  188,  188,  188,  661,  658,
      660,  659,  188,  188,  188, 1001, 1001, 1001,  188,  188,
      188, 1001,  657,  662,  188,  188,  188,  188,  188,  664,
     1001,  188,  188,  188,  188,  661,  658,  660,  659,  188,
      188,  188,  188,  665,  663,  188,  188,  188,  188,  667,
      662,  188,  188,  668, 1001,  188,  664,  666,  188,  188,

      188,  188,  188,  188,  684,  685,  669,  188,  188,  188,
      665,  663,  188,  686,  687,  188,  667,  688,  188,  689,
      668,  670,  690,  188,  666,  691,  692,  188,  188,  188,
      188,  684,  685,  669,  693,  188,  694,  695,  696,  697,
      686,  687,  698,  699,  688,  700,  689,  701,  670,  690,
      188,  702,  691,  692,  703,  188,  704,  706,  707,  708,
      709,  693,  712,  694,  695,  696,  697,  705,  713,  698,
      699,  714,  700,  715,  701,  710,  711,  716,  702,  717,
      718,  703,  719,  704,  706,  707,  708,  709,  720,  712,
      721,  722,  723,  724,  705,  713,  725,  726,  714,  727,

      715,  728,  710,  711,  716,  729,  717,  718,  730,  719,
      731,  732,  733,  734,  735,  720,  736,  721,  722,  723,
      724,  737,  738,  725,  726,  739,  727,  740,  728,  741,
      188,  188,  729,  188, 1001,  730, 1001,  731,  732,  733,
      734,  735,  188,  736,  742,  747,  743,  188,  737,  738,
      744,  188,  739,  188,  740,  188,  741,  188,  188,  748,
      188,  188,  745,  188,  188,  188,  813,  188,  746,  188,
      814,  742,  747,  743,  188,  188, 1001,  744,  188,  188,
      188,  188,  188,  188,  188,  188,  748,  749,  188,  745,
      188,  188,  188,  813,  188,  746, 1001,  814,  750,  188,

      188,  188,  188,  188,  188,  188,  188, 1001,  188,  188,
      188,  188,  188,  815,  749,  751,  753,  752,  188,  755,
      188,  188, 1001,  188,  188,  750,  188,  188,  188,  188,
      188,  188,  188,  756,  754,  188,  188,  188,  188,  188,
      815,  816,  751,  753,  752,  188,  755,  188,  188,  188,
      188,  188,  757,  758,  188,  188,  188,  188,  188,  188,
      756,  754,  188,  188,  188,  188,  188,  817,  816,  188,
      759, 1001, 1001,  188,  188,  188,  188, 1001,  188,  757,
      758,  188,  188,  188,  188,  188,  188,  188,  188,  762,
      188,  188, 1001,  188,  817,  188,  188,  759,  760,  761,

      188,  188,  188,  818,  188,  188,  763,  188,  188,  188,
      188,  188,  819,  764,  188,  188,  762,  188,  188,  765,
      188,  188,  188,  188,  188,  760,  761, 1001,  766,  188,
      818,  188,  188,  763,  188,  188,  188,  188,  188,  819,
      764,  188,  188,  188,  188,  188,  765,  188,  188,  820,
      188,  188,  188,  767,  768,  766,  188,  188,  770,  188,
     1001, 1001,  188,  188,  188,  188,  188,  188,  188,  188,
      188, 1001,  188,  769,  188,  188,  820,  188,  188,  188,
      767,  768, 1001,  188,  188,  770,  188,  188,  771,  188,
      188, 1001,  188,  188,  188,  188,  188, 1001,  188,  188,

      769,  775,  188,  821,  188,  188,  772,  188, 1001,  773,
      188,  774,  776,  188,  188,  771,  188,  188,  188,  188,
      188,  188,  188,  188,  777,  188,  188, 1001,  775,  188,
      821, 1001,  188,  772,  188,  188,  773,  188,  774,  776,
      188,  188, 1001,  188,  188,  188,  188,  188,  188,  188,
      778,  777,  188,  188,  780,  188,  188, 1001,  188,  188,
      779,  783,  188, 1001,  188, 1001,  822,  188,  188,  188,
      188,  786, 1001,  188,  188,  823,  188,  778,  188,  188,
      188,  780,  188,  781,  782,  188,  188,  779,  783,  188,
      188,  188,  785,  822,  188,  188,  188,  188,  786,  784,

      188,  188,  823,  188,  188,  188,  188,  188,  787, 1001,
      781,  782,  789,  188,  188,  188,  188,  188,  188,  785,
      788,  188,  188,  188,  188,  790,  784,  188,  188,  188,
      188,  188, 1001,  188,  188,  787,  791,  188,  188,  789,
      188,  188,  188,  794, 1001,  792,  188,  788,  188,  188,
      188,  188,  790, 1001,  188,  188,  188,  188,  188,  793,
      188,  188,  188,  791,  188,  188,  188,  188, 1001,  795,
      794,  796,  792,  188,  798,  188,  188,  797,  824,  188,
      800,  188,  188,  188,  188,  188,  793,  188,  188,  188,
     1001,  188,  188,  188,  188,  799,  795,  188,  796,  188,

      188,  798,  801,  188,  797,  824,  188,  800,  188,  188,
      188,  188,  188,  803,  188,  188,  188,  188,  188,  188,
     1001,  188,  799, 1001,  188,  804,  188,  188,  802,  801,
      188,  188, 1001,  806,  188,  188,  188,  188,  188,  188,
      803,  188,  188,  188,  188,  825,  188,  805,  808,  809,
      188,  188,  804, 1001, 1001,  802, 1001,  188,  188,  188,
      806,  188,  188,  188,  188,  807,  188,  188,  188,  188,
      188,  810,  825,  188,  805,  808,  809,  188,  188,  188,
      188,  812,  188,  811,  188,  188,  188,  188,  188,  826,
      827,  828,  807,  188,  188,  188,  188,  188,  810,  829,

      188,  188,  188,  830,  831,  188,  188,  188,  812,  188,
      811,  832,  188,  833,  188,  188,  826,  827,  828,  834,
      835,  836,  837,  838,  839,  840,  829,  188,  188,  188,
      830,  831,  188,  841,  842,  843,  844,  845,  832,  846,
      833,  847,  848,  849,  850,  851,  834,  835,  836,  837,
      838,  839,  840,  852,  853,  854,  855,  856,  857,  858,
      841,  842,  843,  844,  845,  859,  846,  860,  847,  848,
      849,  850,  851,  861,  862,  863,  188,  188,  188,  915,
      852,  853,  854,  855,  856,  857,  858,  188,  865,  866,
      867,  188,  859,  870,  860, 1001,  188,  188,  188,  864,

      861,  862,  863,  188,  188,  188,  915,  188,  188,  188,
      188,  188,  188,  188,  188,  865,  866,  867,  188,  868,
      870,  188,  869,  188,  188,  188,  864,  873, 1001, 1001,
      188,  916,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  871,  188, 1001,  868,  188,  188,  869,
      917,  872,  188,  188,  873,  876,  188,  188,  916,  188,
      188,  877,  188,  918,  188,  875, 1001,  874,  188,  188,
      871,  188,  188, 1001,  188,  188,  188,  917,  872,  188,
      188,  188,  876,  188,  188,  188,  188, 1001,  877,  188,
      918,  188,  875,  882,  874,  188,  919,  188,  880,  188,

      878,  879,  188,  188,  188,  188,  188, 1001,  188,  188,
      188,  188,  188,  188,  881,  188,  883,  188,  188,  188,
      882,  884,  188,  919,  188,  880, 1001,  878,  879,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  881,  188,  883,  188,  188,  188,  885,  884,  188,
      886,  888,  188,  188,  188,  188,  188,  188, 1001,  890,
      188,  188,  188, 1001,  920,  188,  188,  188,  887,  188,
      188,  188,  188,  188,  885, 1001,  188,  886,  888,  188,
      188,  188,  188,  188,  889,  188,  890,  188,  188,  188,
      188,  920, 1001,  891,  188,  887,  188,  188,  188,  188,

      188,  921,  892,  188,  188,  188,  188,  893,  188,  188,
      188,  889,  188,  188,  188,  188,  188,  188,  188,  188,
      891,  188,  188,  895,  188, 1001,  188,  922,  921,  892,
      188,  188,  188,  188,  893,  188,  188,  894,  188,  188,
      188,  188,  188,  188, 1001,  188,  188,  188,  188,  188,
      895,  188,  898,  188,  922,  923,  188,  924,  188, 1001,
      896,  897,  899,  925,  894,  188,  188,  188,  188,  188,
      188,  188,  188,  900,  188,  188,  188,  188,  188,  898,
      901,  188,  923,  188,  924,  188,  902,  896,  897,  899,
      925,  188,  904, 1001,  188,  188,  188,  188,  188,  188,

      900,  188,  188,  188,  188,  188,  188,  901,  188,  903,
      188,  188,  188,  902, 1001,  906,  188,  908,  188,  904,
      905,  188,  188,  188,  188,  909,  188,  907,  188,  188,
      188,  188,  188,  188,  910,  188,  903,  188,  188,  188,
      911,  188,  906,  188,  908,  188,  188,  905,  188,  188,
      188,  926,  909,  188,  907,  188,  188,  188,  188,  188,
      188,  910,  188,  927,  912,  913,  188,  911,  188,  188,
      188,  914,  188,  188,  928,  188,  188,  188,  926,  929,
      930,  931,  188,  188,  932,  933,  934,  188,  935,  188,
      927,  912,  913,  188,  936,  188,  188,  188,  914,  937,

      938,  928,  188,  188,  939,  940,  929,  930,  931,  941,
      942,  932,  933,  934,  188,  935,  188, 1001,  944,  188,
      969,  936,  188, 1001,  188, 1001,  937,  938,  943,  188,
      188,  939,  940,  188,  188, 1001,  941,  942,  188,  188,
      946,  188,  188,  945,  188,  944,  188,  969,  188,  188,
      947,  188,  188,  188,  188,  943,  188,  188,  188, 1001,
      188,  188,  188,  948,  970,  188,  188,  946,  188,  188,
      945,  188,  188,  188,  188,  188,  188,  947,  188,  188,
      188,  188,  949,  188,  188,  188,  950,  188,  188,  188,
      948,  970,  188,  188, 1001,  188,  188,  951,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  949,
      188,  188,  188,  950,  188,  188,  188,  952,  953,  188,
      188,  188,  188,  188,  951,  188,  188,  188,  971,  188,
      188,  188,  955,  188,  188,  188,  188,  188,  957,  188,
      954,  188,  188,  188,  952,  953,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  971,  188,  188,  956,  955,
      188,  959,  188,  188,  188,  957,  188,  954,  188,  188,
      188,  188,  188,  188,  188,  958,  972,  188,  188,  188,
      188,  188,  973,  188,  188,  956,  960,  188,  959,  188,
      188,  188,  188,  188,  961,  188,  188,  188,  188,  188,

      188, 1001,  958,  972,  962,  188,  188,  188,  188,  973,
      188,  188,  963,  960,  974,  188,  188,  188,  188,  188,
      188,  961,  188,  188,  964,  188,  188,  188,  188,  188,
      965,  962,  188,  188,  188,  975,  976,  188,  188,  963,
      188,  974,  188,  188,  966,  188,  188,  188,  188,  188,
      188,  964,  188,  188,  188,  188,  188,  965, 1001,  977,
      188,  188,  975,  976,  188,  188,  188,  188,  188,  188,
      188,  966,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  967,  188,  188,  968,  977,  188,  188,  188,
     1001,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  978,  188,  188,  188,  188,  967,
      188,  188,  968,  188,  188,  188,  188,  979,  188,  188,
      987,  188,  188,  188, 1001,  188,  188,  188,  188,  188,
      188,  978,  188,  188,  188,  188,  982,  188,  188,  188,
      188,  188,  188,  188,  979,  188,  188,  987,  188,  188,
      188,  980,  188,  188,  188,  188,  188,  188, 1001,  188,
      188,  188,  188,  982,  188,  188,  188,  981,  188,  188,
      188,  188,  188,  188,  188,  188,  986,  188,  980,  188,
      188,  188,  188,  188,  188,  188,  983,  188,  988,  188,
      984,  188,  188,  985,  981,  188,  188,  188,  188,  188,

      188,  188,  188,  986,  188,  188,  989,  188,  990,  188,
      991,  188,  188,  983,  188,  988,  188,  984,  188,  188,
      985,  188,  997,  188,  188,  188,  992,  188, 1001,  188,
      188,  188,  188,  989,  188,  990,  188,  991,  188,  998,
      993,  188,  188,  188,  188,  188, 1001,  188,  188,  997,
      995, 1001,  188,  992,  188,  994,  999,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  998,  993,  188,  188,
      996,  188,  188,  188,  188, 1000,  188,  995,  188,  188,
      188,  188,  994,  999,  188,  188,  188,  188,  188,  188,
     1001,  188,  188,  188, 1001, 1001, 1001,  996,  188, 1001,

      188, 1001, 1000,  188,  188,  188,  188,  188,  188, 1001,
     1001,  188,  188, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
      188, 1001, 1001, 1001, 1001,  188, 1001, 1001, 1001, 1001,
     1001,  188,   84, 1001, 1001,   84,   85, 1001,   85,   85,
      174, 1001,  174,  174,  177, 1001,  177,  177,  178, 1001,
      178,  178,  188, 1001,  188,  188,    5, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001
    } ;

static const flex_int16_t yy_chk[4025] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13, 1004,
       13,   15,   15,   16,   16,   19,   20,   19,   22,  374,
       21,   28,   22,   19,  268,   19,   22,   21,   29,   19,
       19,   42,   22,  183,   21,   22,   20,   21,   21,   23,
       67,   23,   19,   20,   19,   22,   23,   21,   28,   22,
       19,   23,   19,   22,   21,   29,   19,   19,   42,   22,
       67,   21,   22,   20,   21,   21,   23,   67,   23,   25,

       24,  182,   26,   23,  178,   25,   24,   27,   23,   24,
       26,   40,   24,   27,   27,   27,   26,   67,   30,   40,
       27,   31,   30,   45,   45,   31,   25,   24,   30,   26,
       32,   31,   25,   24,   27,  177,   24,   26,   40,   24,
       27,   27,   27,   26,   32,   30,   40,   27,   31,   30,
       32,   32,   31,   33,   90,   30,   34,   32,   31,   36,
       51,   33,   51,   36,   89,   33,   85,   34,   33,   84,
       39,   32,   39,   34,   96,   39,   81,   32,   32,   56,
       33,   41,   41,   34,   46,   46,   36,   55,   33,   97,
       36,   37,   33,   37,   34,   33,   37,   39,   52,   39,

       34,   96,   39,   37,   37,   53,   53,   50,   41,   41,
       54,   54,   82,   82,   63,   66,   97,   73,   37,   48,
       37,   63,   47,   37,  100,   66,  101,   63,   88,   88,
       37,   37,   38,   38,   63,   66,   38,   73,  104,   38,
       38,   63,   66,  105,   73,  104,   38,  108,   63,   38,
       43,  100,   66,  101,   63,  175,  175,  181,  181,   38,
       38,   63,   66,   38,   73,  104,   38,   38,   18,   17,
      105,   80,  104,   38,  108,   14,   38,   57,   57,   12,
       57,   57,   57,   57,   57,   57,   64,   57,   57,   57,
       64,   80,   68,   57,   64,   57,   68,   98,   80,  112,

       64,   57,   68,   57,  107,   98,   99,   57,   57,   99,
       64,  113,   68,   64,  107,  114,    9,   64,   80,   68,
       57,   64,   57,   68,   98,    5,  112,   64,   57,   68,
       57,  107,   98,   99,   57,   57,   99,   64,  113,   68,
      115,  107,  114,   57,   58,   58,    0,   58,   58,   58,
       58,   58,   58,   69,   58,   58,   58,   69,   72,    0,
      116,   58,   72,   69,  118,  102,   74,  115,  119,   72,
       74,  111,  111,   69,   79,   72,    0,   79,   79,  102,
       69,   58,   72,    0,   69,   72,   74,  116,   58,   72,
       69,  118,  102,   74,   79,  119,   72,   74,  111,  111,

       69,   79,   72,   77,   79,   79,  102,  120,   58,   72,
       58,   59,   77,   74,   77,   59,  121,   77,   59,  109,
      106,   79,  106,   77,  109,   59,  122,  123,   59,   59,
       77,  126,  128,  129,  120,   59,    0,    0,   59,   77,
        0,   77,   59,  121,   77,   59,  109,  106,    0,  106,
       77,  109,   59,  122,  123,   59,   59,   78,  126,  128,
      129,   78,   59,   60,  110,   78,  117,   60,  117,  110,
      124,   60,  117,  124,  131,  110,    0,   60,  132,  117,
       60,   78,  110,  117,   78,  133,    0,   60,   78,    0,
       60,  110,   78,  117,   60,  117,  110,  124,   60,  117,

      124,  131,  110,  130,   60,  132,  117,   60,   78,  110,
      117,  125,  133,  130,   60,   61,  125,  134,  130,  130,
      137,  135,   61,  135,   61,  136,  138,  136,  139,   61,
      130,  140,  141,  142,   61,   61,    0,  143,  125,  144,
      130,  146,   61,  125,  134,  130,  130,  137,  135,   61,
      135,   61,  136,  138,  136,  139,   61,  147,  140,  141,
      142,   61,   61,   62,  143,  148,  144,   62,  146,  149,
      150,  152,  151,   62,  150,  153,   62,  151,  154,   62,
      155,  156,  157,   62,  147,    0,  158,  154,  159,    0,
       62,    0,  148,    0,   62,  154,  149,  150,  152,  151,

       62,  150,  153,   62,  151,  154,   62,  155,  156,  157,
       62,   65,   65,  158,  154,  159,  160,  161,   65,   65,
       65,  162,  154,  163,  164,   65,  165,  160,  166,  165,
      167,   65,    0,  170,  168,    0,    0,  171,   65,   65,
      168,  172,  270,  160,  161,   65,   65,   65,  162,  169,
      163,  164,   65,  165,  160,  166,  165,  167,   65,   70,
      170,  168,  169,   70,  171,    0,  272,  168,  172,  270,
      273,  188,  190,   70,  189,  189,  169,  275,  277,   70,
       70,    0,  278,   70,    0,    0,   70,  190,    0,  169,
       70,  188,  190,  272,    0,  189,    0,  273,  188,  190,

       70,  189,  189,  279,  275,  277,   70,   70,  191,  278,
       70,   71,   71,  196,  190,  191,  193,  198,  188,  190,
       71,  198,  189,  191,   71,    0,    0,   71,  191,  193,
      279,   71,    0,  196,    0,  191,  193,    0,   71,   71,
      196,  198,  191,  193,  198,    0,    0,   71,  198,  192,
      191,   71,  192,  192,   71,  191,  193,  281,   71,   75,
      196,   75,  282,  193,   75,  194,  283,  194,  198,  284,
      285,   75,   75,  192,    0,  287,  192,    0,    0,  192,
      192,   75,    0,    0,  281,  289,   75,  194,   75,  282,
        0,   75,  194,  283,  194,    0,  284,  285,   75,   75,

      192,  220,  287,  290,  195,  195,    0,  292,   75,   76,
       76,    0,  289,   76,  194,  197,   76,   76,  199,  195,
        0,  220,  197,   76,  195,  199,   76,  199,  220,  197,
      290,  195,  195,   76,  292,  197,   76,   76,  199,  293,
       76,  201,  197,   76,   76,  199,  195,  200,  220,  197,
       76,  195,  199,   76,  199,  202,  197,  200,  201,  204,
       76,  201,  197,  207,    0,  199,  293,  200,  201,  280,
      202,  280,  204,  204,  200,  202,    0,  207,    0,  204,
        0,    0,  202,  207,  200,  201,  204,    0,  201,  205,
      207,  206,  208,  208,  200,  294,  280,  202,  280,  204,

      204,  206,  202,  203,  207,  205,  204,  203,  203,  205,
      207,  206,    0,  208,  203,  209,  205,  209,  206,  208,
      208,  203,  294,  295,  296,    0,  211,  203,  206,    0,
      203,  297,  205,  211,  203,  203,  205,  209,  206,  212,
      208,  203,  209,    0,  209,  299,  211,  291,  203,  214,
      295,  296,  212,  211,  203,    0,  214,  221,  297,  212,
      211,  221,  291,    0,  209,  210,  212,  210,    0,  214,
      213,  210,  299,  211,  291,  215,  214,  221,  210,  212,
      213,  216,  210,  214,  221,  215,  212,  210,  221,  291,
      213,  216,  210,    0,  210,  215,  214,  213,  210,  217,

      300,  216,  215,    0,  221,  210,    0,  213,  216,  210,
        0,  218,  215,  217,  210,  301,  217,  213,  216,  217,
      218,  219,  215,    0,  222,  218,  217,  300,  216,  225,
      224,  218,    0,  225,  226,  222,    0,  219,  218,  224,
      217,  219,  301,  217,  222,    0,  217,  218,  219,  225,
      224,  222,  218,  302,  226,    0,  225,  224,  218,  228,
      225,  226,  222,  238,  219,  228,  224,  228,  219,  227,
      227,  222,  223,  223,    0,  303,  225,  224,    0,  228,
      302,  226,  223,  238,    0,  304,  228,  223,  223,  227,
      238,  230,  228,  223,  228,    0,  227,  227,    0,  223,

      223,  229,  303,  229,  230,  229,  228,    0,    0,  223,
      238,  230,  304,  231,  223,  223,  227,  232,  230,  233,
      223,  234,  231,  236,  305,  229,  232,  236,  229,    0,
      229,  230,  229,  231,  233,  235,  234,  232,  230,  233,
      231,  234,  235,    0,  232,    0,  233,  236,  234,  231,
      236,  305,  229,  232,  236,  235,  237,  237,  239,  239,
      231,  233,  235,  234,  232,    0,  233,  242,  234,  235,
      254,  242,  240,  243,  236,  241,  237,  243,    0,  239,
        0,    0,  235,  237,  237,  239,  239,  240,  241,    0,
      254,  242,  240,  243,  242,  241,  244,  254,  242,  240,

      243,    0,  241,  237,  243,  244,  239,  245,  246,  245,
      244,  246,    0,  307,  240,  241,  244,  254,  242,  240,
      243,  250,  241,  244,  247,  250,  247,  245,  246,  248,
        0,    0,  244,  247,  245,  246,  245,  244,  246,  248,
      307,  247,    0,  244,  249,  250,  247,  251,  250,  248,
      251,  247,  250,  247,  245,  246,  248,  249,  252,  255,
      247,  253,  308,  309,  249,  252,  248,  255,  247,  253,
      251,  249,  250,  247,  251,    0,  248,  251,  252,  255,
      253,  253,  256,  257,  249,  252,  255,    0,  253,  308,
      309,  249,  252,  256,  255,  310,  253,  251,  311,  257,

      259,  259,  256,  257,    0,  252,  255,  253,  253,  256,
      257,  258,  260,    0,  263,  258,  260,    0,  258,    0,
      256,  259,  310,    0,  262,  311,  257,  259,  259,  256,
      257,  258,  260,  261,  263,  264,  312,  262,  258,  260,
      261,  263,  258,  260,  262,  258,  261,  313,  259,    0,
      264,  262,  265,  261,  314,  264,  265,  315,  258,  260,
      261,  263,  264,  312,  262,  316,  317,  261,  318,  319,
      320,  262,  322,  261,  313,  321,  265,  264,  323,  265,
      261,  314,  264,  265,  315,  321,  325,  326,  327,  328,
      329,  330,  316,  317,  331,  318,  319,  320,  332,  322,

      333,  335,  321,  265,  336,  323,  337,  338,  339,  340,
      341,  342,  321,  325,  326,  327,  328,  329,  330,  343,
      344,  331,  345,  346,  347,  332,  348,  333,  335,  349,
      351,  336,  352,  337,  338,  339,  340,  341,  342,  353,
      354,  356,  357,  358,  359,  361,  343,  344,  363,  345,
      346,  347,  362,  348,  362,  364,  349,  351,  365,  352,
      366,  367,  368,  369,  371,  372,  353,  354,  356,  357,
      358,  359,  361,  370,  375,  363,  376,  370,  377,  362,
        0,  362,  364,  479,    0,  365,  378,  366,  367,  368,
      369,  371,  372,    0,  375,  379,  376,  380,  377,  382,

      370,  375,  379,  376,  370,  377,  378,  381,  383,    0,
      479,  381,  384,  378,  386,  379,  386,  380,  383,  382,
      385,  375,  379,  376,  380,  377,  382,  385,  383,  379,
      384,  381,  384,  378,  381,  383,  386,    0,  381,  384,
      385,  386,  379,  386,  380,  383,  382,  385,  387,  388,
      391,  389,  392,    0,  385,  383,  390,  384,  381,  384,
      390,  387,  393,  386,  391,  388,  389,  385,  387,  388,
      391,  389,  392,    0,  394,  387,  388,  391,  389,  392,
      390,  396,  393,  390,  398,  396,  398,  390,  387,  393,
      480,  391,  388,  389,  394,  387,  388,  391,  389,  392,

      397,  394,  399,  395,  400,  396,  398,  390,  396,  393,
      395,  398,  396,  398,  481,  397,  403,  480,    0,  400,
      397,  394,  399,  395,  400,  401,    0,  397,  401,  399,
      395,  400,  396,  398,  402,  405,  403,  395,  404,  405,
      406,  481,  397,  403,    0,  402,  400,  397,  401,  399,
      395,  400,  401,  411,  402,  401,  482,  408,  404,  405,
      406,  402,  405,  403,    0,  404,  405,  406,  407,  409,
      407,  408,  402,  411,  412,  401,  409,  408,    0,  410,
      411,  402,    0,  482,  408,  404,  405,  406,  415,  409,
      407,  415,  410,  416,  412,  407,  409,  407,  408,  410,

      411,  412,  413,  409,  408,  414,  410,    0,  483,  416,
      413,  415,  414,  416,  484,  415,  409,  407,  415,  410,
      416,  412,  413,    0,  417,  414,  410,  417,  419,  413,
      418,    0,  414,    0,  418,  483,  416,  413,  415,  414,
      416,  484,  424,  419,  417,  420,  421,  422,  419,  413,
      418,  417,  414,  422,  417,  419,  425,  418,  423,  421,
      420,  418,  424,    0,  426,  420,  421,  422,  423,  424,
      419,  417,  420,  421,  422,  419,  425,  418,  423,    0,
      422,    0,    0,  425,  426,  423,  421,  420,  427,  424,
      428,  426,  420,  421,  422,  423,  430,    0,  427,  431,

      429,  432,    0,  425,  440,  423,  428,    0,  427,  429,
      428,  426,  486,    0,  431,  427,  430,  428,  433,  431,
      429,  432,  433,  430,  440,  427,  431,  429,  432,  434,
      434,  440,  436,  428,  436,  427,  429,  428,  433,  486,
      435,  431,  437,  430,  435,  433,  431,  429,  432,  433,
      434,  440,  436,  438,  439,  444,  434,  434,  437,  436,
      489,  436,  437,    0,  435,  433,  490,  435,  438,  437,
      439,  435,    0,  438,  439,  444,  441,  434,  443,  436,
      438,  439,  444,  441,  445,  437,  442,  489,  491,  437,
      446,  435,  443,  490,  446,  438,  441,  439,  443,  442,

      438,  439,  444,  441,  445,  443,  442,  447,  450,  448,
      441,  445,  450,  442,  446,  491,  447,  446,  492,  443,
      448,  446,  449,  441,    0,  443,  442,  447,  494,  448,
      449,  445,  450,  442,  447,  450,  448,    0,  451,  450,
      453,  446,  449,  447,  455,  492,  456,  448,  452,  449,
        0,  452,  454,  451,  447,  494,  448,  449,  451,  450,
      453,  495,  454,  457,  455,  451,  456,  453,  452,  449,
        0,  455,  454,  456,    0,  452,    0,  458,  452,  454,
      451,  457,  461,  457,    0,  451,  459,  453,  495,  454,
      457,  455,  458,  456,  462,  452,  460,  458,  464,  454,

      463,  459,  461,  460,  458,  462,  459,  464,  457,  461,
      457,  465,    0,  459,  462,  463,  460,  466,  464,  458,
      463,  462,    0,  460,  458,  464,  467,  463,  459,  461,
      460,  465,  462,  459,  464,  467,    0,  466,  465,  468,
      469,  462,  463,  460,  466,  464,  467,  463,  470,  468,
      469,  468,  470,  467,  471,    0,    0,    0,  465,  468,
      469,    0,  467,  471,  466,  474,  468,  469,  472,  473,
        0,  473,  470,  467,  471,  470,  468,  469,  468,  470,
      476,  471,  475,  474,  472,  474,  468,  469,  472,  476,
      471,  473,  474,  476,    0,  472,  473,  475,  473,  470,

      476,  471,  475,  477,  496,  497,  477,  476,  478,  475,
      474,  472,  474,  499,  500,  472,  476,  501,  473,  504,
      476,  478,  505,  477,  475,  506,  507,  476,  478,  475,
      477,  496,  497,  477,  508,  478,  509,  513,  514,  516,
      499,  500,  518,  520,  501,  521,  504,  522,  478,  505,
      477,  523,  506,  507,  524,  478,  525,  527,  531,  533,
      534,  508,  536,  509,  513,  514,  516,  525,  537,  518,
      520,  539,  521,  540,  522,  535,  535,  541,  523,  542,
      543,  524,  545,  525,  527,  531,  533,  534,  546,  536,
      547,  548,  549,  550,  525,  537,  551,  552,  539,  554,

      540,  555,  535,  535,  541,  556,  542,  543,  557,  545,
      560,  561,  562,  563,  564,  546,  565,  547,  548,  549,
      550,  566,  567,  551,  552,  568,  554,  570,  555,  572,
      577,  575,  556,  576,    0,  557,    0,  560,  561,  562,
      563,  564,  578,  565,  575,  580,  576,  581,  566,  567,
      577,  575,  568,  576,  570,  579,  572,  577,  575,  582,
      576,  583,  578,  582,  584,  580,  673,  581,  579,  578,
      675,  575,  580,  576,  581,  579,    0,  577,  575,  585,
      576,  583,  579,  582,  584,  586,  582,  585,  583,  578,
      582,  584,  580,  673,  581,  579,    0,  675,  586,  585,

      587,  589,  579,  588,  592,  586,  585,    0,  583,  590,
      582,  584,  586,  676,  585,  587,  590,  588,  591,  592,
      587,  589,    0,  588,  592,  586,  585,  587,  589,  590,
      588,  592,  586,  593,  591,  594,  590,  593,  591,  598,
      676,  677,  587,  590,  588,  591,  592,  587,  589,  596,
      588,  592,  595,  596,  595,  594,  590,  593,  599,  598,
      593,  591,  594,  597,  593,  591,  598,  678,  677,  596,
      597,    0,    0,  602,  595,  606,  596,    0,  599,  595,
      596,  595,  594,  597,  593,  599,  598,  600,  601,  602,
      597,  603,    0,  602,  678,  606,  596,  597,  600,  601,

      602,  595,  606,  679,  607,  599,  603,  600,  601,  608,
      597,  603,  680,  604,  600,  601,  602,  604,  603,  605,
      602,  611,  606,  605,  607,  600,  601,    0,  609,  608,
      679,  607,  609,  603,  600,  601,  608,  604,  603,  680,
      604,  611,  610,  605,  604,  612,  605,  613,  611,  682,
      605,  607,  609,  610,  612,  609,  608,  615,  616,  609,
        0,    0,  610,  614,  604,  612,  622,  613,  611,  610,
      605,    0,  612,  614,  613,  617,  682,  615,  616,  609,
      610,  612,    0,  614,  615,  616,  622,  618,  617,  610,
      614,    0,  612,  622,  613,  617,  619,    0,  620,  621,

      614,  621,  617,  683,  615,  616,  618,  618,    0,  619,
      614,  620,  621,  622,  618,  617,  619,  623,  620,  621,
      624,  625,  617,  619,  623,  620,  621,    0,  621,  626,
      683,    0,  628,  618,  618,  627,  619,  623,  620,  621,
      624,  625,    0,  619,  623,  620,  621,  624,  625,  626,
      627,  623,  628,  629,  630,  627,  626,    0,  632,  628,
      629,  632,  627,    0,  623,    0,  684,  624,  625,  631,
      634,  636,    0,  629,  630,  686,  626,  627,  632,  628,
      629,  630,  627,  631,  631,  632,  633,  629,  632,  631,
      634,  636,  635,  684,  635,  637,  631,  634,  636,  633,

      629,  630,  686,  640,  639,  632,  633,  638,  637,    0,
      631,  631,  639,  633,  635,  637,  631,  634,  636,  635,
      638,  635,  637,  640,  639,  641,  633,  638,  645,  641,
      640,  639,    0,  633,  638,  637,  642,  643,  649,  639,
      642,  635,  637,  645,    0,  643,  644,  638,  645,  641,
      640,  639,  641,    0,  638,  645,  641,  643,  649,  644,
      642,  646,  647,  642,  643,  649,  644,  642,    0,  646,
      645,  647,  643,  644,  650,  645,  641,  648,  687,  648,
      652,  646,  647,  654,  643,  649,  644,  642,  646,  647,
        0,  651,  653,  644,  650,  651,  646,  655,  647,  648,

      652,  650,  653,  654,  648,  687,  648,  652,  646,  647,
      654,  651,  653,  657,  656,  657,  658,  655,  651,  653,
        0,  650,  651,    0,  655,  658,  648,  652,  656,  653,
      654,  659,    0,  660,  656,  657,  658,  660,  651,  653,
      657,  656,  657,  658,  655,  688,  662,  659,  662,  663,
      661,  659,  658,    0,    0,  656,    0,  660,  659,  665,
      660,  656,  657,  658,  660,  661,  662,  666,  664,  663,
      661,  664,  688,  662,  659,  662,  663,  661,  659,  665,
      667,  668,  669,  666,  660,  670,  665,  666,  664,  689,
      690,  691,  661,  662,  666,  664,  663,  661,  664,  692,

      667,  668,  669,  693,  694,  670,  665,  667,  668,  669,
      666,  695,  670,  697,  666,  664,  689,  690,  691,  698,
      700,  703,  704,  705,  706,  711,  692,  667,  668,  669,
      693,  694,  670,  713,  714,  715,  718,  719,  695,  720,
      697,  721,  722,  724,  725,  726,  698,  700,  703,  704,
      705,  706,  711,  727,  728,  729,  730,  731,  732,  734,
      713,  714,  715,  718,  719,  735,  720,  736,  721,  722,
      724,  725,  726,  738,  739,  740,  742,  743,  744,  813,
      727,  728,  729,  730,  731,  732,  734,  745,  746,  747,
      748,  748,  735,  751,  736,    0,  742,  743,  744,  744,

      738,  739,  740,  742,  743,  744,  813,  745,  746,  747,
      749,  748,  750,  751,  745,  746,  747,  748,  748,  749,
      751,  752,  750,  742,  743,  744,  744,  755,    0,    0,
      749,  815,  750,  753,  745,  746,  747,  749,  748,  750,
      751,  752,  756,  753,  754,    0,  749,  755,  752,  750,
      816,  754,  757,  753,  755,  759,  758,  749,  815,  750,
      753,  760,  756,  817,  754,  758,    0,  757,  752,  756,
      753,  754,  757,    0,  755,  759,  758,  816,  754,  757,
      753,  760,  759,  758,  763,  761,  762,    0,  760,  756,
      817,  754,  758,  765,  757,  765,  818,  767,  763,  757,

      761,  762,  759,  758,  763,  761,  762,    0,  760,  766,
      764,  763,  761,  762,  764,  765,  766,  767,  770,  768,
      765,  768,  765,  818,  767,  763,    0,  761,  762,  766,
      764,  763,  761,  762,  769,  771,  766,  764,  770,  768,
      772,  764,  765,  766,  767,  770,  768,  769,  768,  773,
      771,  775,  777,  774,  769,  771,  766,  764,    0,  777,
      772,  769,  771,    0,  820,  770,  768,  772,  774,  773,
      776,  775,  777,  774,  769,    0,  773,  771,  775,  777,
      774,  769,  771,  778,  776,  779,  777,  772,  780,  781,
      776,  820,    0,  782,  783,  774,  773,  776,  775,  777,

      774,  821,  784,  778,  785,  779,  784,  785,  780,  781,
      778,  776,  779,  782,  783,  780,  781,  776,  787,  788,
      782,  783,  786,  789,  785,    0,  784,  824,  821,  784,
      778,  785,  779,  784,  785,  780,  781,  786,  787,  788,
      782,  783,  786,  789,    0,  787,  788,  790,  791,  786,
      789,  785,  792,  784,  824,  828,  794,  830,  793,    0,
      790,  791,  793,  831,  786,  787,  788,  790,  791,  786,
      789,  797,  792,  795,  790,  791,  794,  795,  793,  792,
      796,  796,  828,  794,  830,  793,  797,  790,  791,  793,
      831,  797,  799,    0,  790,  791,  799,  795,  797,  792,

      795,  796,  801,  794,  795,  793,  800,  796,  796,  798,
      798,  804,  802,  797,    0,  801,  799,  803,  797,  799,
      800,  803,  801,  799,  795,  805,  800,  802,  796,  801,
      798,  804,  802,  800,  806,  806,  798,  798,  804,  802,
      807,  803,  801,  799,  803,  805,  808,  800,  803,  801,
      809,  834,  805,  800,  802,  806,  812,  798,  804,  802,
      807,  806,  806,  837,  809,  810,  808,  807,  803,  810,
      809,  811,  805,  808,  838,  811,  812,  809,  834,  841,
      842,  844,  806,  812,  845,  846,  848,  807,  849,  810,
      837,  809,  810,  808,  853,  811,  810,  809,  811,  855,

      856,  838,  811,  812,  857,  862,  841,  842,  844,  863,
      864,  845,  846,  848,  865,  849,  810,    0,  867,  866,
      920,  853,  811,    0,  870,    0,  855,  856,  866,  868,
      864,  857,  862,  869,  865,    0,  863,  864,  867,  866,
      869,  865,  873,  868,  870,  867,  866,  920,  872,  868,
      871,  870,  871,  869,  874,  866,  868,  864,  876,    0,
      869,  865,  873,  872,  922,  867,  866,  869,  872,  873,
      868,  870,  871,  877,  874,  872,  868,  871,  876,  871,
      869,  874,  875,  878,  875,  876,  879,  880,  881,  873,
      872,  922,  883,  877,    0,  872,  884,  881,  885,  871,

      877,  874,  882,  878,  875,  876,  879,  880,  881,  875,
      878,  875,  883,  879,  880,  881,  884,  882,  885,  883,
      877,  886,  882,  884,  881,  885,  887,  888,  928,  882,
      878,  875,  889,  879,  880,  881,  890,  891,  893,  883,
      888,  886,  893,  884,  882,  885,  887,  888,  886,  882,
      894,  892,  889,  887,  888,  928,  890,  891,  892,  889,
      895,  896,  893,  890,  891,  893,  897,  888,  886,  893,
      894,  892,  898,  887,  888,  895,  930,  894,  892,  889,
      895,  896,  931,  890,  891,  892,  897,  895,  896,  893,
      900,  901,  898,  897,  899,  902,  899,  894,  892,  898,

      903,    0,  895,  930,  900,  904,  905,  895,  896,  931,
      900,  901,  904,  897,  934,  902,  899,  900,  901,  898,
      903,  899,  902,  899,  906,  904,  905,  903,  906,  908,
      907,  900,  904,  905,  907,  937,  938,  900,  901,  904,
      909,  934,  902,  899,  908,  910,  911,  903,  906,  908,
      912,  906,  904,  905,  907,  906,  908,  907,    0,  939,
      909,  907,  937,  938,  942,  910,  911,  909,  943,  913,
      912,  908,  910,  911,  944,  906,  908,  912,  914,  945,
      946,  907,  913,  948,  942,  914,  939,  909,  943,  913,
        0,  942,  910,  911,  944,  943,  913,  912,  914,  945,

      946,  944,  949,  948,  947,  914,  945,  946,  947,  913,
      948,  942,  914,  950,  951,  943,  913,  949,  952,  953,
      969,  944,  949,  954,    0,  914,  945,  946,  947,  949,
      948,  947,  956,  950,  951,  947,  958,  959,  952,  953,
      950,  951,  960,  954,  949,  952,  953,  969,  962,  949,
      954,  955,  956,  955,  957,  947,  958,  959,    0,  956,
      950,  951,  960,  958,  959,  952,  953,  957,  962,  960,
      954,  961,  963,  955,  957,  962,  966,  964,  955,  956,
      955,  957,  967,  958,  959,  965,  961,  968,  971,  960,
      964,  961,  963,  965,  957,  962,  966,  964,  961,  963,

      955,  957,  967,  966,  964,  965,  973,  968,  975,  967,
      976,  978,  965,  961,  968,  971,  979,  964,  961,  963,
      965,  981,  987,  966,  964,  980,  978,  983,    0,  967,
      984,  978,  965,  973,  968,  975,  979,  976,  978,  989,
      980,  981,  982,  979,  986,  980,    0,  983,  981,  987,
      984,    0,  980,  978,  983,  982,  992,  984,  978,  985,
      993,  994,  982,  979,  986,  995,  989,  980,  981,  982,
      985,  986,  980,  996,  983,  994,  992,  984,  999,  985,
      993,  994,  982,  992, 1000,  995,  985,  993,  994,  982,
        0,  986,  995,  996,    0,    0,    0,  985,  999,    0,

      996,    0,  994,  992, 1000,  999,  985,  993,  994,    0,
        0, 1000,  995,    0,    0,    0,    0,    0,    0,    0,
      996,    0,    0,    0,    0,  999,    0,    0,    0,    0,
        0, 1000, 1002,    0,    0, 1002, 1003,    0, 1003, 1003,
     1005,    0, 1005, 1005, 1006,    0, 1006, 1006, 1007,    0,
     1007, 1007, 1008,    0, 1008, 1008, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

#line 1891 "flex_lexer.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1904 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2190 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1002 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1001 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 131:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 138:
#line 197 "flex_lexer.l"
case 139:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2985 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1002 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1002 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1001);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 227 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

