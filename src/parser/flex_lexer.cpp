#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1014] =
    {   0,
        0,    0,    2,    2,  148,  146,    4,    4,  146,  146,
      139,  146,  139,  139,  142,  139,  139,  139,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  139,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    4,  134,    0,    0,  145,    1,  142,  141,  140,
      136,  135,  133,  137,  144,  144,  144,  144,  144,  144,

      118,  144,  119,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  120,  144,  144,
      121,  122,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  123,  124,  125,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  126,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  138,    2,    2,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  143,  140,
      104,  144,  105,  144,  144,  106,  144,  107,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  108,  144,  130,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  109,

      144,  144,  144,  144,  144,  144,  144,  144,  110,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  111,  144,  144,  112,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  113,  144,  144,
      114,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  115,  144,  144,  144,  144,  116,  144,
      144,  144,  144,  117,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  144,  144,  144,  144,  144,  144,
       76,  144,   77,   78,  144,  144,  144,  144,   79,  144,

      144,  144,  144,   80,  144,  144,  144,   81,   82,  144,
      144,  144,  144,  144,  144,   83,  144,   84,   85,  144,
      144,   86,  144,   87,  144,  129,  144,  144,  144,  144,
      144,  144,   88,  144,   89,   90,   91,  144,   93,  144,
       94,  144,  144,  144,  144,   95,  144,  144,  144,  144,
      144,   96,  144,  144,  144,  144,  144,  144,  144,  144,
       97,  144,  144,  144,  144,   98,   99,  100,  144,  144,
      144,  144,  144,  144,  144,  144,  101,  144,  102,  144,
      103,  132,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       56,   57,  144,   58,  144,  144,  144,  144,  144,  144,
       59,  144,  144,  144,   60,  144,  144,  144,  144,  144,

      144,  144,  144,  144,   61,  144,   62,  144,  144,   92,
      144,   63,   64,  144,  144,  144,  144,   65,   66,   67,
       68,  144,  131,  144,  144,  144,   69,   70,  144,  144,
      144,  144,  144,   71,  144,  144,  144,  144,  144,   72,
      144,  144,  144,   73,  144,  144,  144,   74,  144,  144,
      144,   75,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  144,   31,  144,  144,   32,  144,
       33,  144,  144,   34,   35,  144,   36,   37,   38,  144,
       39,  144,  144,   41,   42,  144,   43,   44,  144,  144,
       45,  128,  144,  144,   46,  144,  144,  144,   47,  144,
       48,  127,   49,   50,  144,   51,  144,  144,  144,   52,
       53,   54,   55,  144,  144,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   14,   15,   16,   17,
       18,  144,   19,  144,   20,   21,   40,   22,   23,  144,
       24,  144,  144,   25,   26,  144,   27,   28,  144,  144,
      144,   29,   30,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      144,   10,  144,   11,  144,   12,  144,  144,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  144,    7,

      144,    8,    9,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static const flex_int16_t yy_base[1021] =
    {   0,
        0,    0,   67,    0,  469, 4035,  133,  135,  446,    0,
     4035,  444,  131,  435,  133,  132,  414,  399,  129,  129,
      137,  135,  145,  180,  175,  193,  191,  124,  141,  202,
      218,  225,  237,  244,    0,  243,  261,  304,  249,  279,
      289,  144,  335,    0,  210,  223,  335,  339,    0,  329,
      193,  314,  245,  287,  303,  295,  362,  429,  483,  535,
      583,  631,  296,  358,  679,  295,  313,  421,  426,  731,
      779,  447,  339,  435,  829,  881,  491,  537,  495,  347,
      227,  327, 4035,  279,  267, 4035, 4035,  333,  262,  252,
     4035, 4035, 4035, 4035,    0,  147,  138,  357,  374,  191,

      254,  364,    0,  373,  298,  425,  480,  360,  422,  573,
      369,  385,  428,  430,  446,  452,  628,  478,  479,  479,
      491,  502,  524,  530,  529,  535,  534,    0,  547,  541,
      668,  545,  555,  565,  587,  583,  597,  581,  589,  591,
      594,  598,  616,  638,  636,    0,  643,  630,  633,  652,
      681,  675,  647,  660,  721,  681,  682,  700,  700,  691,
      721,  703,  697,  706,  717,  730,  736,  734,  732,  757,
      742,  734,  754, 4035,    0,  353,    0,  247,  224,    0,
        0,  613,  218,  209,    0,    0,    0,    0,  771,  783,
      781,  845,  794,  811,  848,  882,  816,  886,  903,  925,

      931,  919,  922,  983,  940,  955,  985,  974,  993, 1009,
     1059, 1018, 1031, 1026, 1044, 1028, 1067, 1072, 1088, 1098,
     1100,  842,  996, 1110, 1159, 1113, 1124, 1049, 1161, 1164,
     1167, 1196, 1193, 1198, 1204, 1212, 1210, 1242, 1221, 1233,
     1256, 1252, 1250, 1275, 1281, 1264, 1286, 1304, 1320, 1309,
     1310, 1321, 1352, 1353, 1355, 1338, 1361, 1366, 1378, 1403,
     1392, 1411, 1409, 1420, 1397, 1426, 1432,    0, 4035,  145,
        0,  759,    0,  773,  778,    0,  838,    0,  827,  826,
      840,  890,  840,  900,  920,  942,  963,    0, 1033,    0,
     1104, 1127, 1448, 1128, 1142, 1141, 1181, 1236, 1266,    0,

     1291, 1316, 1334, 1413, 1428, 1432, 1451, 1461,    0, 1453,
     1457, 1468, 1450, 1466, 1466, 1456, 1459, 1463, 1471, 1470,
     1481, 1482, 1483, 1485, 1470, 1478,    0, 1474, 1494, 1495,
     1501, 1506, 1503, 1504, 1495, 1500, 1501,    0, 1511, 1506,
     1506, 1523, 1524, 1529, 1519, 1519, 1523, 1538, 1520, 1533,
     1537, 1529, 1540,    0, 1523, 1528, 1533, 1542,    0, 1542,
     1539, 1547, 1559,    0, 1551, 1559, 1555, 1576, 1564, 1558,
     1579, 1560, 1564, 1575, 1579, 1572,    0,  140, 1590, 1593,
     1594, 1602, 1616, 1607, 1628, 1618, 1632, 1626, 1657, 1658,
     1647, 1666, 1661, 1672, 1696, 1670, 1680, 1698, 1714, 1706,

     1715, 1724, 1711, 1732, 1763, 1755, 1750, 1764, 1769, 1768,
     1778, 1780, 1799, 1804, 1781, 1818, 1809, 1812, 1823, 1840,
     1842, 1852, 1871, 1834, 1853, 1877, 1886, 1874, 1883, 1888,
     1896, 1912, 1909, 1928, 1907, 1926, 1920, 1938, 1951, 1961,
     1960, 1970, 1966, 1976, 1994, 1992, 1995, 2011, 2006, 2005,
     2016, 2034, 2035, 2045, 2040, 2050, 2049, 2085, 2059, 2074,
     2080, 2089, 2090, 2098, 2099, 2122, 2103, 2128, 2138, 2124,
     2134, 2143, 2159, 2162, 2157, 2187, 2188, 2176, 2193, 2211,
     2212, 2217, 2222, 2228, 1590, 1595, 1642, 1681, 1699, 1740,
        0, 1750,    0,    0, 1778, 1853, 1863, 1960,    0, 1993,

     2050, 2053, 2108,    0, 2122, 2169, 2171,    0,    0, 2205,
     2222, 2220, 2230, 2250, 2251,    0, 2235,    0,    0, 2255,
     2250,    0, 2253,    0, 2255,    0, 2266, 2254, 2251, 2258,
     2263, 2277,    0, 2273,    0,    0,    0, 2266,    0, 2275,
        0, 2283, 2270, 2283, 2274,    0, 2293, 2295, 2283, 2286,
     2292,    0, 2305, 2306, 2296, 2292, 2300, 2308, 2310, 2322,
        0, 2321, 2320, 2325, 2320,    0,    0, 2319, 2336, 2326,
     2320, 2341, 2323, 2337, 2340, 2338,    0, 2328,    0, 2345,
        0,    0, 2356, 2373, 2350, 2354, 2375, 2358, 2379, 2384,
     2389, 2390, 2419, 2408, 2414, 2418, 2423, 2433, 2442, 2457,

     2451, 2463, 2475, 2487, 2481, 2476, 2486, 2505, 2509, 2511,
     2497, 2530, 2541, 2535, 2545, 2546, 2549, 2563, 2574, 2551,
     2575, 2579, 2597, 2589, 2600, 2605, 2619, 2615, 2630, 2651,
     2613, 2641, 2629, 2654, 2659, 2667, 2663, 2685, 2669, 2673,
     2703, 2704, 2695, 2713, 2727, 2721, 2726, 2736, 2757, 2755,
     2771, 2785, 2779, 2780, 2795, 2789, 2819, 2813, 2803, 2821,
     2825, 2831, 2834, 2843, 2847, 2859, 2864, 2876, 2877, 2887,
     2898, 2899, 2875, 2927, 2888, 2916, 2917, 2921, 2929, 2931,
        0,    0, 2334,    0, 2398, 2452, 2493, 2485, 2530, 2581,
        0, 2594, 2665, 2684,    0, 2687, 2728, 2743, 2759, 2746,

     2754, 2776, 2849, 2867,    0, 2875,    0, 2931, 2925,    0,
     2924,    0,    0, 2927, 2950, 2938, 2946,    0,    0,    0,
        0, 2955,    0, 2965, 2959, 2952,    0,    0, 2970, 2958,
     2959, 2973, 2971,    0, 2985, 2984, 2969, 2986, 2990, 2973,
     2977, 2976, 2996,    0, 2993, 2996, 2996,    0, 2987, 3007,
     3008,    0, 3005, 3006, 3015, 3007, 3021, 3024, 3038, 3040,
     3046, 3050, 3055, 3059, 3074, 3072, 3078, 3080, 3103, 3084,
     3089, 3113, 3114, 3118, 3142, 3090, 3124, 3147, 3143, 3164,
     3172, 3148, 3182, 3176, 3178, 3186, 3180, 3216, 3214, 3188,
     3217, 3218, 3220, 3222, 3226, 3254, 3252, 3251, 3256, 3260,

     3268, 3284, 3289, 3285, 3286, 3294, 3300, 3319, 3310, 3335,
     3344, 3349, 3338, 3353, 3354, 3359, 3372, 3384, 3387, 3388,
     3389, 3397, 3398, 3402, 3016,    0, 3117, 3152, 3163, 3176,
        0, 3233, 3217,    0,    0, 3345,    0,    0,    0, 3348,
        0, 3396, 3397,    0,    0, 3393,    0,    0, 3410, 3426,
        0,    0, 3420, 3432,    0, 3418, 3437, 3418,    0, 3443,
     3428,    0,    0,    0, 3436,    0, 3450, 3451, 3433,    0,
        0,    0,    0, 3438, 3445, 3456, 3457, 3462, 3461, 3466,
     3485, 3467, 3497, 3491, 3496, 3500, 3501, 3510, 3515, 3525,
     3529, 3531, 3541, 3539, 3540, 3553, 3555, 3563, 3564, 3579,

     3569, 3574, 3585, 3597, 3607, 3593, 3608, 3595, 3598, 3609,
     3639, 3633, 3638, 3641, 3643, 3662, 3651, 3652, 3677, 3687,
     3681, 3683, 3691, 3692, 3693, 3715,    0,    0,    0,    0,
        0, 3467,    0, 3634,    0,    0,    0,    0,    0, 3659,
        0, 3654, 3705,    0,    0, 3701,    0,    0, 3704, 3713,
     3723,    0,    0, 3725, 3726, 3727, 3731, 3736, 3741, 3755,
     3765, 3757, 3759, 3767, 3769, 3770, 3793, 3781, 3809, 3799,
     3803, 3805, 3824, 3811, 3815, 3821, 3837, 3827, 3833, 3843,
     3756,    0, 3840,    0, 3846,    0, 3845, 3856,    0, 3873,
     3869, 3883, 3875, 3891, 3879, 3881, 3912, 3887, 3878,    0,

     3883,    0,    0, 3909, 3913, 3921, 3917, 3927,    0,    0,
     3943, 3945, 4035, 4010, 4014,  136, 4018, 4022, 4026, 4030
    } ;

static const flex_int16_t yy_def[1021] =
    {   0,
     1013,    1, 1013,    3, 1013, 1013, 1013, 1013, 1013, 1014,
     1013, 1015, 1013, 1013, 1013, 1013, 1013, 1013, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1013, 1017, 1017, 1013, 1017, 1018, 1017, 1019,
     1017, 1017, 1017, 1017, 1017, 1017, 1020, 1020,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1017, 1013, 1013, 1014, 1015, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1013, 1017, 1017, 1017, 1018, 1019, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58, 1017, 1013, 1013,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1017, 1017,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,   58,
       58,   58,   58,   58,   58,   58,   58,   58, 1016, 1016,

     1016, 1016, 1016,   58,   58,   58,   58,   58, 1016, 1016,
       58,   58,    0, 1013, 1013, 1013, 1013, 1013, 1013, 1013
    } ;

static const flex_int16_t yy_nxt[4103] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   35,   42,   35,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   35,   42,   35,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,

       77,   78,   79,   73,   80,   73,   44,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       73,   80,   73,   81,   82,   82,   82,   82,   87,   95,
       88,   90,   88,   91,   92,   96,  102,   97,  109,  378,
      104,  133,  110,   98,  270,   99,  111,  105,  134,  100,
      101,  173,  112,  271,  106,  113,  103,  107,  108,  114,
      272,  115,   96,  102,   97,  109,  116,  104,  133,  110,
       98,  117,   99,  111,  105,  134,  100,  101,  173,  112,
      271,  106,  113,  103,  107,  108,  114,  272,  115,  123,

      181,  118,  182,  116,  119,  124,  125,  120,  117,  128,
      121,  176,   82,  122,  126,  129,  130,  131,  378,  135,
      127,  277,  132,  136,   82,   82,  123,  183,  118,  137,
      180,  119,  124,  125,  120,  138,  128,  121,  141,  139,
      122,  126,  129,  130,  131,  140,  135,  127,  277,  132,
      136,  377,  142,  184,  182,  145,  137,  149,  143,  144,
      152,  270,  138,  146,  153,  141,  139,  147,  150,  278,
      148,   89,  140,   86,  151,  166,  154,  167,  155,  142,
      168,  156,  145,  269,  149,  143,  144,  152,  157,  158,
      146,  153,  169,  268,  147,  150,  278,  148,  185,  186,

      170,  151,  166,  154,  167,  155,  188,  168,  156,  171,
      172,  283,  189,  189,  187,  157,  158,  159,  160,  169,
      217,  161,  227,  183,  162,  163,  218,  170,   82,   82,
      228,  164,  189,  189,  165,  180,  171,  172,  283,  189,
      189,   90,   88,  175,  159,  160,  177,  217,  161,  227,
      189,  162,  163,  218,  176,   82,  189,  228,  164,  189,
      189,  165,  175,  175,  267,  175,  175,  175,  175,  175,
      175,  219,  175,  175,  175,  189,  189,  189,  190,  220,
      191,  273,  279,  189,  189,  221,  192,  275,  193,  274,
      276,  267,  194,  195,  288,  189,  280,  281,  219,  295,

      296,  174,  189,  189,  282,  190,  220,  191,  273,  279,
       94,  189,  221,  192,  275,  193,  274,  276,  297,  194,
      195,  288,  189,  280,  281,   93,  295,  296,  175,  175,
      175,  282,  175,  175,  175,  175,  175,  175,  229,  175,
      175,  175,  230,  232,   89,  297,  196,  233,  231,  284,
       86,  285,  246,  234,  289,  298,  247,   83,  189,  290,
      243,  299,  300,  189,  189,  229,  197,  301, 1013,  230,
      232,  244,  189,  196,  233,  231,  284,  245,  285,  246,
      234,  289,  298,  247,  189,  189,  290,  243,  299,  300,
      189,  189, 1013,  197,  301,  175,  198,  286,  244,  189,

      189, 1013,  307,  199,  245, 1013,  308,  287,  189,  309,
      200,  189,  189,  201,  202,  265,  266,  260,  310,  261,
      189, 1013,  262,  198,  286, 1013,  311,  189,  189,  307,
      199, 1013,  189,  308,  287,  189,  309,  200, 1013,  189,
      201,  202,  265,  266,  260,  310,  261,  189,  203,  262,
      263,  312,  204,  311,  189,  189,  205,  313,  264,  189,
      314,  316,  206,  315, 1013,  207,  317,  318,  319,  320,
     1013,  325,  189, 1013,  189,  203,  326,  263,  312,  204,
     1013,  189, 1013,  205,  313,  264,  291,  314,  316,  206,
      315,  292,  207,  317,  318,  319,  320,  293,  325,  189,

      189,  189,  327,  326,  294,  328,  329,  208,  330,  209,
      331,  334,  332,  291,  210,  335, 1013,  336,  292,  211,
      189,  184,  182,  333,  293, 1013,  337,  189, 1013,  327,
      338,  294,  328,  329,  208,  330,  209,  331,  334,  332,
      339,  210,  335,  302,  336,  303,  211,  189,  189,  304,
      333,  340,  212,  337,  341,  213,  305,  338,  214,  342,
      306,  215,  343,  344,  216,  345,  350,  339,  189, 1013,
      302, 1013,  303, 1013, 1013,  189,  304, 1013,  340,  212,
      351,  341,  213,  305,  321,  214,  342,  306,  215,  343,
      344,  216,  345,  350,  322,  189,  189,  222,  346,  323,

      324,  348,  347,  223,  224,  225,  349,  351,  355, 1013,
      226,  321,  356,  357,  358,  359,  189, 1013, 1013, 1013,
      362,  322,  363,  189,  222,  346,  323,  324,  348,  347,
      223,  224,  225,  349,  364,  355,  352,  226, 1013,  356,
      357,  358,  359,  189,  235,  353,  360,  362,  189,  363,
      365,  366,  368,  354,  367,  369,  370,  361,  236,  374,
     1013,  364,  371,  352,  237,  238,  375,  376,  189, 1013,
     1013,  235,  353,  360,  372,  189,  485,  365,  366,  368,
      354,  367,  369,  370,  361,  236,  374,  373,  189,  371,
      486,  237,  238,  375,  376,  189,  189,  239,  189,  379,

      189,  372,  487,  485, 1013,  240, 1013,  383,  189,  241,
      384,  189,  242,  380,  373,  189,  189,  486,  189, 1013,
      189, 1013, 1013,  189,  239,  189,  379,  189,  189,  487,
     1013,  189,  240,  189,  383,  189,  241,  384,  189,  242,
      380,  385, 1013,  189,  248,  189,  249,  189,  189,  250,
     1013,  488, 1013,  189,  489,  189,  251,  252,  189,  189,
      189,  490,  189,  386,  491,  189,  189, 1013,  385,  381,
      494,  248, 1013,  249, 1013,  189,  250,  382,  488,  189,
      189,  489,  189,  251,  252,  189,  189, 1013,  490,  189,
      386,  491,  189,  189,  253,  254,  381,  494,  255,  189,

      387,  256,  257,  189,  382,  492,  189,  493,  258,  189,
      389,  259,  189, 1013,  388, 1013,  391,  390,  189,  189,
      189,  253,  254,  189, 1013,  255,  189,  387,  256,  257,
      189, 1013,  492,  495,  493,  258,  189,  389,  259,  189,
      189,  388,  189,  391,  390,  189,  189,  189,  394,  392,
      189,  393,  496,  396,  397,  497,  189,  189,  395,  398,
      495, 1013,  189,  189, 1013, 1013,  189,  189,  189,  189,
      403,  404,  189, 1013, 1013,  394,  392,  189,  393,  496,
      396,  397,  497,  189,  189,  395,  398, 1013,  405,  189,
     1013,  189,  189, 1013,  498,  189,  399,  403,  404,  189,

      189,  400,  189, 1013,  189,  407, 1013,  401, 1013,  408,
      189,  189,  406,  189,  402,  405, 1013,  427,  189,  189,
      189,  498,  189,  399,  409, 1013,  189,  189,  400,  189,
      189, 1013,  407,  189,  401,  189,  408,  189,  189,  406,
      189,  402,  415,  189,  427,  189,  189,  189,  189,  189,
      499,  409,  419,  189, 1013,  189,  417,  189,  416, 1013,
      189,  189,  189,  189, 1013,  189,  189, 1013,  189,  415,
      189,  418,  189,  189,  410,  189,  411,  499, 1013,  419,
      412,  189,  189,  417,  189,  416,  435,  413,  189,  189,
      189,  414,  189,  189,  420,  189,  189, 1013,  418,  421,

     1013,  410, 1013,  411,  189,  189, 1013,  412,  189,  189,
     1013,  189, 1013,  435,  413,  189,  189,  189,  414,  422,
     1013,  420,  423,  189,  424,  189,  421,  189,  500,  425,
      189,  189,  189,  426, 1013,  189,  189,  189,  428,  433,
      501,  189,  189,  504,  189,  434,  422,  189, 1013,  423,
      189,  424,  189, 1013,  189,  500,  425,  189, 1013,  505,
      426,  189,  189, 1013,  189,  428,  433,  501,  189, 1013,
      504, 1013,  434,  506,  189,  429,  189,  189,  189,  436,
      439,  189,  440, 1013,  189,  430,  505,  437,  189,  438,
      431,  432, 1013,  441, 1013,  507,  189, 1013,  189, 1013,

      506,  189,  429,  189,  189,  189,  436,  439,  189,  440,
      189,  189,  430,  189,  437,  189,  438,  431,  432,  443,
      441,  189,  507,  189,  444,  189,  442,  189,  189,  189,
      189,  189, 1013,  189,  447,  189,  445,  189,  189,  449,
      189,  189,  189, 1013,  446, 1013,  443,  189,  189,  189,
      189,  444, 1013,  442,  189,  448,  189,  189,  189,  189,
      189,  447,  189,  445,  508,  189,  449,  189,  189,  189,
      189,  446,  450,  189,  189, 1013,  189,  189, 1013,  189,
      452,  189,  448,  509,  451,  189,  189,  189,  453,  189,
      456,  508,  189,  189,  189,  457,  189,  189,  454,  450,

      189,  189,  455,  189,  510,  458,  189,  452,  189, 1013,
      509,  451,  189, 1013,  189,  453,  189,  456,  189,  189,
      189,  189,  457,  189,  459,  454,  189,  189,  189,  455,
      189,  510,  458,  511,  465,  460,  463,  189,  189,  189,
      464,  189, 1013, 1013,  461,  189,  189,  189,  189,  512,
      189,  459,  462,  189,  189,  470, 1013,  189,  189, 1013,
      511,  465,  460,  463,  189,  189,  466,  464,  189,  189,
      189,  461,  189,  189,  189,  189,  512,  467,  189,  462,
      468, 1013,  470,  189,  189,  189,  471, 1013, 1013,  189,
      189,  469,  189,  466,  472,  189,  189,  189,  189,  189,

     1013, 1013,  189,  189,  467,  189, 1013,  468,  476,  189,
      189,  473, 1013,  471,  482,  189,  189,  189,  469,  189,
      189,  472,  189, 1013,  474,  189,  189,  475,  189,  189,
      189, 1013,  477,  478,  189,  476,  189,  480,  473,  479,
      189,  482,  189,  189,  513,  484,  189,  189,  189,  189,
      481,  474,  514,  189,  475,  189,  189,  189,  483,  477,
      478,  189,  515,  189,  480,  502,  479,  189,  516,  189,
      189,  513,  484,  189,  517,  189,  189,  481,  518,  514,
      503,  519,  520,  521,  189,  483,  522,  523,  524,  515,
      189,  525,  502,  526,  527,  516,  189,  528,  529,  530,

      531,  517,  532,  534,  535,  518,  536,  503,  519,  520,
      521,  537,  533,  522,  523,  524,  538,  539,  525,  540,
      526,  527,  541,  542,  528,  529,  530,  531,  543,  532,
      534,  535,  544,  536,  545,  546,  547,  548,  537,  533,
      549,  550,  551,  538,  539,  552,  540,  553,  554,  541,
      542,  555,  556,  557,  558,  543,  559,  560,  561,  544,
      562,  545,  546,  547,  548,  563,  564,  549,  550,  551,
      565,  566,  552,  567,  553,  554,  568,  569,  555,  556,
      557,  558,  572,  559,  560,  561,  570,  562,  571,  573,
      574,  575,  563,  564,  576,  577,  578,  565,  566,  581,

      567,  579,  582,  568,  569,  580, 1013,  189, 1013,  572,
      583,  189, 1013,  570, 1013,  571,  573,  574,  575,  584,
      681,  576,  577,  578,  189,  682,  581,  189,  579,  582,
      189,  189,  580,  189,  189,  189, 1013,  583,  189,  189,
      585,  586, 1013,  189,  189,  189,  584,  681, 1013,  189,
     1013,  189,  682,  189,  189,  189, 1013,  189,  189,  587,
      189,  588,  189,  189,  189,  189,  189,  585,  586,  189,
      189,  189,  189,  590,  189,  591,  189,  592,  189,  683,
      189,  589,  189,  189,  189,  595,  587,  189,  588,  189,
      189,  189,  189,  594,  189,  189,  189,  597,  189,  593,

      590,  189,  591,  189,  592,  189,  683,  189,  589,  189,
      189,  189,  595,  189,  189,  189,  189,  189,  684,  599,
      594,  189,  189,  189,  597,  189,  593,  596,  603,  685,
      189,  189,  600,  189,  189,  189,  189, 1013,  598,  602,
      189,  189,  189,  189,  189,  684,  599,  601,  189,  189,
      189,  189,  189, 1013,  596,  603,  685,  686,  189,  600,
      189,  189,  189,  687,  604,  598,  602,  607,  189,  189,
      189, 1013,  189, 1013,  601,  189,  189,  605,  189,  189,
      189,  189,  608,  606,  686,  609,  189,  189,  189, 1013,
      687,  604,  189,  610,  607,  189,  189,  189,  614,  189,

      189,  189, 1013,  688,  605,  189,  189,  189,  189,  608,
      606,  611,  609,  189,  189,  189,  189,  189,  189,  189,
      610,  189,  189,  612,  189,  614,  189,  189,  189,  189,
      688,  615,  189,  189,  613,  189,  189,  616,  611, 1013,
      189,  189,  189,  189,  189,  189,  189,  617,  189,  189,
      612,  189, 1013,  189,  618,  189,  189,  189,  615,  189,
      189,  613,  189,  189,  616, 1013,  622,  189,  189,  189,
      189,  189,  620,  189,  617,  619,  189,  189,  189,  189,
     1013,  618,  189,  689,  189,  623,  189,  189,  189,  189,
      189,  189,  621,  622,  189,  690,  189,  189,  189,  620,

      627,  626,  619,  189,  189,  628,  189,  624,  189,  625,
      689,  189,  623,  629,  189,  189,  189,  189,  189,  621,
      189,  189,  690,  189,  189,  189,  189,  627,  626,  630,
      189, 1013,  628,  189,  624,  189,  625,  635,  189,  631,
      629,  189,  632,  189,  189,  189,  189,  189, 1013,  189,
      189,  189,  189,  189,  633,  189,  630,  189,  634,  636,
      189, 1013, 1013,  189,  635,  189,  631,  637,  189,  632,
      189,  189,  189,  189,  638,  189,  189,  189,  189,  639,
     1013,  633,  189,  189,  189,  634,  636,  189,  189,  640,
      189,  691,  189,  189,  637,  189, 1013,  189,  189,  641,

     1013,  638,  189,  189,  189,  189,  639,  189,  642,  189,
      189,  189,  189,  189,  189,  189,  640,  692,  691,  644,
      189, 1013,  647,  189,  189,  189,  641,  643,  189,  189,
      189,  189,  189,  648,  189,  642,  189,  646,  189,  189,
      189,  645,  189,  189,  692, 1013,  644,  649,  189,  647,
      189,  189,  189,  189,  643,  189,  189,  189,  189,  189,
      648,  650,  189,  653,  646,  652,  189,  189,  645,  189,
      189,  189,  189,  651,  649,  189,  656,  189,  189,  189,
      189,  654,  189,  693,  189,  694,  189,  189,  650,  189,
      653,  189,  652,  189,  189, 1013,  189,  658,  189,  189,

      651,  657,  189,  656,  189,  655,  189,  189,  654,  189,
      693,  189,  694,  189,  189,  189,  189,  189,  189, 1013,
      189,  695,  189,  189,  658,  659,  189,  189,  657,  189,
      660,  661,  655,  189,  189,  189,  189,  696,  189,  189,
      189,  189,  189,  189,  189,  189,  662,  189,  695,  189,
      665,  666,  659,  189,  189,  189,  663,  660,  661,  189,
      189,  189,  189,  189,  696,  189,  189,  189,  189, 1013,
      664,  189,  189,  662,  189,  189,  189,  665,  666,  189,
      189, 1013,  189,  663,  670,  667,  189,  189,  189,  668,
      697,  669,  189,  189,  189,  698,  189,  664,  189,  189,

      671,  189,  189,  189,  189,  189,  189,  189,  674,  673,
      189,  670,  667,  189,  672, 1013,  668,  697,  669, 1013,
      189,  189,  698,  189,  189,  189,  189,  671,  189,  189,
      189,  189,  189,  699,  189,  674,  673,  189, 1013,  189,
      189,  672,  679,  677,  676,  189,  675,  678,  189,  189,
      700,  189,  189,  701,  189,  189,  189,  189,  680,  189,
      699,  189,  702,  703,  704,  189,  189,  705,  706,  679,
      677,  676,  189,  675,  678,  189,  189,  700,  707,  708,
      701,  189,  709,  710,  711,  680,  189,  712,  713,  702,
      703,  704,  189,  714,  705,  706,  715,  717,  718,  719,

      720,  721,  722,  723,  724,  707,  708,  716,  725,  709,
      710,  711,  726,  727,  712,  713,  728,  729,  730,  731,
      714,  732,  733,  715,  717,  718,  719,  720,  721,  722,
      723,  724,  734,  735,  716,  725,  736,  737,  738,  726,
      727,  739,  740,  728,  729,  730,  731,  741,  732,  733,
      742,  743,  744,  745,  746,  747,  748,  749,  750,  734,
      735,  751,  752,  736,  737,  738, 1013,  189,  739,  740,
     1013,  189,  825,  189,  741,  758, 1013,  742,  743,  744,
      745,  746,  747,  748,  749,  750,  753,  755,  751,  752,
      189,  756,  189,  189,  189,  189,  189,  759,  189,  825,

      189,  189,  758,  754, 1013,  757,  189,  189, 1013, 1013,
      189, 1013,  189,  753,  755,  826,  189,  189,  756,  189,
      189,  189,  189,  189,  759,  189,  189,  189,  189, 1013,
      754,  189,  757,  189,  189,  189,  189,  189,  761,  189,
      189, 1013,  826,  189,  760,  189,  762, 1013,  189,  763,
      189,  189,  189,  189,  189,  189,  189,  764,  189,  189,
      189, 1013,  189,  189,  767,  761, 1013,  189,  189,  827,
      189,  760,  189,  762,  189,  765,  763,  189,  189,  189,
      189, 1013,  189,  189,  764, 1013,  189,  189,  189,  766,
      768,  767,  189,  189,  189,  189,  827,  189,  189, 1013,

      189,  189,  765,  189,  189,  770,  189,  189,  769,  828,
     1013,  829,  189,  189,  189,  189,  766,  768,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  774,
      189,  189,  770,  771,  189,  769,  828,  772,  829,  189,
      189,  189,  189,  775,  773,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  776,  189,  774,  830,  189, 1013,
      771,  189,  189,  189,  772, 1013,  189,  189,  189,  189,
      775,  773,  189,  189,  189,  189,  778,  777,  189,  189,
      189,  776,  189,  189,  830,  189,  189, 1013,  189,  189,
      189,  189,  189,  189,  189,  189,  189, 1013,  831,  189,

      189,  780,  779,  778,  777,  189,  189,  189, 1013,  189,
      189,  189,  189,  189,  189,  189,  189,  782,  189,  189,
     1013,  832,  189,  189,  781,  831,  189,  189,  780,  779,
      189, 1013,  189,  189,  189,  783,  189,  189,  189,  189,
     1013,  189,  189,  189,  782,  785,  189,  189,  832,  189,
      189,  781,  189,  189, 1013,  784,  189,  189,  189,  189,
      786,  189,  783,  189,  189,  789,  189,  189,  189,  189,
      787,  189,  785,  189,  189, 1013,  189,  189,  189,  189,
      189,  788,  784,  189,  189,  189,  189,  786,  189,  833,
      792,  189,  789,  189,  189,  189,  189,  787,  189,  790,

      189,  834,  189,  189,  189,  189,  189,  189,  788,  791,
      189,  189,  189,  189, 1013,  189,  833,  792,  189,  835,
      189,  189,  189,  189,  795,  796,  790,  189,  834,  189,
      189,  189,  189,  189,  793,  794,  791,  189,  798,  189,
      189,  189,  797,  189,  189, 1013,  835,  189,  189,  189,
      189,  795,  796,  189,  836, 1013,  799,  189,  189,  189,
      837,  793,  794,  189,  189,  798,  800,  189,  189,  797,
      189,  189,  189,  189,  189, 1013,  838,  189,  839, 1013,
      189,  836,  801,  799,  802,  189,  840,  837,  189, 1013,
      189,  189,  189,  800,  189, 1013,  189,  189,  803,  189,

      189,  189,  189,  838,  804,  839,  189,  841,  189,  801,
      805,  802,  189,  840,  807,  189,  189,  189, 1013,  189,
      189,  189,  189,  189,  189,  803,  189,  806,  809,  189,
      189,  804,  189,  189,  841,  189,  189,  805,  810,  189,
      189,  807,  189,  189,  189,  808,  811,  189,  812,  189,
      189,  189, 1013,  189,  806,  809,  189,  189,  189,  189,
      189,  813,  189,  189,  189,  810, 1013,  189,  189,  189,
      842,  189,  808,  811, 1013,  812,  189,  189,  189,  815,
      189,  189,  843,  189,  189,  189, 1013,  189,  813,  189,
      814,  189,  821,  189,  189,  189,  189,  842,  189,  844,

      818,  189,  816,  189,  189,  189,  815,  189,  189,  843,
      817,  189,  189,  189,  189,  189,  189,  814,  820,  821,
      189,  189, 1013,  189,  189,  189,  844,  818,  189,  816,
      819,  189,  189,  189,  189,  189,  189,  817,  824,  189,
      189,  189,  189,  189,  189,  820,  189,  822,  189,  823,
      845,  189,  189,  189,  189,  846,  847,  819,  189,  848,
      189,  189,  189,  189,  189,  824,  189,  849,  189,  850,
      851,  189,  852,  189,  822,  189,  823,  845,  853,  854,
      189,  189,  846,  847,  855,  189,  848,  856,  857,  858,
      859,  189,  860,  189,  849,  189,  850,  851,  861,  852,

      862,  863,  864,  865,  866,  853,  854,  867,  868,  869,
      870,  855,  871,  872,  856,  857,  858,  859,  873,  860,
      874,  875,  189,  189,  189,  861, 1013,  862,  863,  864,
      865,  866,  189,  927,  867,  868,  869,  870,  877,  871,
      872,  878,  189,  189,  189,  873, 1013,  874,  875,  189,
      189,  189,  189,  876,  879,  189, 1013,  189,  189,  189,
      927,  189, 1013,  189, 1013,  877,  880,  882,  878,  189,
      189,  189,  189,  881, 1013,  189,  189,  189, 1013,  189,
      876,  879,  189,  189,  189,  189,  883,  189,  189,  885,
      189,  189,  189,  880,  882,  189,  189,  189,  884,  189,

      881,  888,  189,  189,  189,  894,  889,  189, 1013,  189,
      189,  189,  886,  883,  189,  189,  885,  189,  189,  189,
      189,  189,  189,  189,  189,  884,  189,  189,  888,  887,
      189,  189,  894,  889,  189,  189,  189, 1013,  189,  886,
      189,  189,  189,  928,  189,  890,  891,  189,  189,  892,
      189,  189, 1013,  189,  189,  189,  887,  189,  189,  189,
      189,  189,  189,  893,  189,  189, 1013,  189,  189,  929,
      928,  895,  890,  891, 1013, 1013,  892,  189,  189,  189,
      189,  189,  189,  896,  189,  189,  189,  189,  189,  189,
      893,  189,  189,  189,  930,  189,  929,  900,  895,  189,

      931,  189,  897,  189, 1013,  189,  189,  189,  189,  189,
      896,  189,  189,  189,  898,  189,  189,  189,  899,  189,
      189,  930,  189,  189,  900,  189,  189,  931,  189,  897,
      189,  189,  189,  189,  189,  189,  189,  189,  902,  903,
      189,  898,  189,  189,  189,  899,  189,  901,  932,  933,
      189,  189,  189,  189,  189,  189, 1013,  189,  189,  189,
      189,  189,  189,  189,  189,  902,  903,  904,  189,  189,
      189,  189,  905,  189,  901,  932,  933,  189,  189, 1013,
      189,  189,  189,  906,  189,  907,  189, 1013,  189,  189,
      189,  189, 1013,  189,  904,  189,  189,  189,  189,  905,

      189,  189,  910,  189,  189,  189,  189,  911, 1013, 1013,
      906,  189,  907,  912,  908,  189,  189,  189,  189,  909,
      189,  189,  189,  189,  189, 1013,  189,  189,  189,  910,
      189,  189,  189,  189,  911,  913,  189,  189,  189, 1013,
      912,  908,  914, 1013,  189, 1013,  909,  189,  189,  189,
      189,  915,  189,  189,  189,  189,  189,  916,  189, 1013,
      934,  189,  913,  189,  189,  935,  189,  920,  918,  914,
      189,  189,  189, 1013,  189,  189,  189, 1013,  915,  189,
      917,  189,  189,  189,  916,  919,  189,  934,  189,  921,
      189,  189,  935,  189,  920,  918,  189,  189,  189,  189,

      922,  189,  189,  189,  923,  189,  189,  917,  189,  189,
      925,  926,  919,  189,  189,  189,  921,  189,  189,  189,
      924,  189,  936,  189,  189,  189,  189,  922,  189,  937,
      938,  923,  189,  189,  189,  189,  189,  925,  926,  189,
      939,  189,  189,  940,  941,  942,  189,  924,  189,  936,
      943,  189,  189,  189,  944,  945,  937,  938,  946,  947,
      948,  189,  189,  949,  950,  951,  189,  939,  952,  953,
      940,  941,  942,  954,  189, 1013, 1013,  943,  956,  189,
      981,  944,  945,  189,  189,  946,  947,  948,  955, 1013,
      949,  950,  951,  189,  189,  952,  953,  957,  189,  189,

      954,  189,  189,  189,  189,  956,  189,  981,  189,  958,
      189,  189,  959,  189,  189,  955,  961,  189,  189, 1013,
      189,  189,  189,  960,  957,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  958,  189,  189,  959,
      189,  189,  189,  961,  189,  189,  962,  189,  189,  189,
      960, 1013,  189, 1013,  189,  189,  189,  189,  189,  189,
      189,  189,  189, 1013,  189,  189,  189,  963,  189,  189,
      189,  964,  189,  962,  189,  189,  189,  189,  189,  189,
      189,  189, 1013,  189,  189,  189,  967, 1013, 1013,  189,
      189,  189,  965,  189,  963,  189,  189,  189,  964,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  966,
      189,  189,  971,  967,  189,  189,  189,  189,  189,  965,
      969,  968,  189,  189,  189,  189,  189,  189,  189,  189,
      189, 1013,  189,  189,  189,  972,  966,  189,  189,  971,
      970,  189,  189,  189,  189,  189,  189,  969,  968,  189,
      189,  189,  189,  189,  973,  189,  189,  189,  189,  189,
      189,  189,  972, 1013,  974,  976,  982,  970,  189,  189,
      189,  189,  189,  189,  983,  189,  189,  189,  189,  189,
      189,  973,  189,  189,  984,  189,  975,  189,  189,  189,
      977,  974,  976,  982,  189,  189,  189,  189,  189,  189,

      189,  983,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  984, 1013,  975,  189,  189,  189,  977,  189,  978,
      189,  189,  985,  979,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  986,  987,  189,  189,  189,  988,  980,
      989,  189,  189,  189,  189,  189,  978,  189,  189,  985,
      979,  189,  189,  189,  990,  189,  189,  189,  189,  189,
      986,  987,  189,  189,  189,  988,  980,  989,  189,  189,
      189,  189,  189,  189,  189,  189,  189, 1013,  189,  189,
      189,  990,  189, 1013,  189,  189,  189,  189,  999,  189,
      189,  189,  189, 1013,  189,  189,  189,  991,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  992,  189,
      189,  189, 1013,  189,  189,  999,  994, 1013,  189,  189,
      189,  189,  189,  189,  991,  189,  189, 1013,  189,  189,
      189,  189,  189,  189,  189,  992,  189,  189,  189,  993,
      189,  189,  189,  994,  998,  189,  189,  189,  189,  189,
      189,  996,  189,  189,  189,  189,  995,  189,  189,  189,
      189,  189,  997,  189,  189,  189,  993,  189,  189,  189,
      189,  998, 1000,  189,  189,  189, 1001,  189,  996,  189,
      189,  189, 1002,  995, 1003,  189,  189,  189,  189,  997,
      189,  189,  189, 1013, 1013, 1009,  189,  189,  189, 1000,

      189,  189, 1013, 1001,  189, 1004,  189,  189,  189, 1002,
      189, 1003,  189,  189, 1010, 1005,  189,  189, 1007,  189,
      189, 1006, 1009,  189,  189,  189, 1011,  189,  189,  189,
      189,  189, 1004,  189,  189,  189, 1013,  189,  189,  189,
     1008, 1010, 1005,  189,  189, 1007,  189,  189, 1006,  189,
      189,  189, 1012, 1011,  189,  189,  189,  189,  189, 1013,
      189,  189,  189, 1013,  189,  189, 1013, 1008, 1013, 1013,
     1013,  189, 1013,  189, 1013, 1013,  189,  189, 1013, 1012,
      189,  189,  189, 1013, 1013,  189, 1013,  189, 1013,  189,
     1013,  189, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013,  189, 1013,  189,
       84, 1013, 1013,   84,   85, 1013,   85,   85,  175, 1013,
      175,  175,  178, 1013,  178,  178,  179, 1013,  179,  179,
      189, 1013,  189,  189,    5, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013
    } ;

static const flex_int16_t yy_chk[4103] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13, 1016,
       13,   15,   15,   16,   16,   19,   20,   19,   22,  378,
       21,   28,   22,   19,  270,   19,   22,   21,   29,   19,
       19,   42,   22,   96,   21,   22,   20,   21,   21,   23,
       97,   23,   19,   20,   19,   22,   23,   21,   28,   22,
       19,   23,   19,   22,   21,   29,   19,   19,   42,   22,
       96,   21,   22,   20,   21,   21,   23,   97,   23,   25,

       51,   24,   51,   23,   24,   25,   26,   24,   23,   27,
       24,   45,   45,   24,   26,   27,   27,   27,  184,   30,
       26,  100,   27,   30,   46,   46,   25,  183,   24,   30,
      179,   24,   25,   26,   24,   31,   27,   24,   32,   31,
       24,   26,   27,   27,   27,   31,   30,   26,  100,   27,
       30,  178,   32,   53,   53,   33,   30,   34,   32,   32,
       36,   90,   31,   33,   36,   32,   31,   33,   34,  101,
       33,   89,   31,   85,   34,   39,   37,   39,   37,   32,
       39,   37,   33,   84,   34,   32,   32,   36,   37,   37,
       33,   36,   40,   81,   33,   34,  101,   33,   54,   54,

       40,   34,   39,   37,   39,   37,   56,   39,   37,   41,
       41,  105,   66,   63,   55,   37,   37,   38,   38,   40,
       63,   38,   66,   52,   38,   38,   63,   40,   82,   82,
       67,   38,   66,   63,   38,   50,   41,   41,  105,   66,
       63,   88,   88,   48,   38,   38,   47,   63,   38,   66,
       67,   38,   38,   63,  176,  176,   73,   67,   38,   66,
       63,   38,   57,   57,   80,   57,   57,   57,   57,   57,
       57,   64,   57,   57,   57,   64,   73,   67,   57,   64,
       57,   98,  102,   73,   80,   64,   57,   99,   57,   98,
       99,   80,   57,   57,  108,   64,  102,  104,   64,  111,

      111,   43,   64,   73,  104,   57,   64,   57,   98,  102,
       18,   80,   64,   57,   99,   57,   98,   99,  112,   57,
       57,  108,   64,  102,  104,   17,  111,  111,   57,   58,
       58,  104,   58,   58,   58,   58,   58,   58,   68,   58,
       58,   58,   68,   69,   14,  112,   58,   69,   68,  106,
       12,  106,   74,   69,  109,  113,   74,    9,   68,  109,
       72,  114,  115,   69,   72,   68,   58,  116,    5,   68,
       69,   72,   74,   58,   69,   68,  106,   72,  106,   74,
       69,  109,  113,   74,   72,   68,  109,   72,  114,  115,
       69,   72,    0,   58,  116,   58,   59,  107,   72,   74,

       59,    0,  118,   59,   72,    0,  119,  107,   77,  120,
       59,   72,   79,   59,   59,   79,   79,   77,  121,   77,
       59,    0,   77,   59,  107,    0,  122,   59,   77,  118,
       59,    0,   79,  119,  107,   77,  120,   59,    0,   79,
       59,   59,   79,   79,   77,  121,   77,   59,   60,   77,
       78,  123,   60,  122,   78,   77,   60,  124,   78,   79,
      125,  126,   60,  125,    0,   60,  126,  127,  129,  130,
        0,  132,   60,    0,   78,   60,  133,   78,  123,   60,
        0,   78,    0,   60,  124,   78,  110,  125,  126,   60,
      125,  110,   60,  126,  127,  129,  130,  110,  132,   60,

       61,   78,  134,  133,  110,  135,  136,   61,  136,   61,
      137,  138,  137,  110,   61,  139,    0,  140,  110,   61,
       61,  182,  182,  137,  110,    0,  141,   61,    0,  134,
      142,  110,  135,  136,   61,  136,   61,  137,  138,  137,
      143,   61,  139,  117,  140,  117,   61,   61,   62,  117,
      137,  144,   62,  141,  145,   62,  117,  142,   62,  147,
      117,   62,  148,  149,   62,  150,  153,  143,   62,    0,
      117,    0,  117,    0,    0,   62,  117,    0,  144,   62,
      154,  145,   62,  117,  131,   62,  147,  117,   62,  148,
      149,   62,  150,  153,  131,   62,   65,   65,  151,  131,

      131,  152,  151,   65,   65,   65,  152,  154,  156,    0,
       65,  131,  157,  158,  159,  160,   65,    0,    0,    0,
      162,  131,  163,   65,   65,  151,  131,  131,  152,  151,
       65,   65,   65,  152,  164,  156,  155,   65,    0,  157,
      158,  159,  160,   65,   70,  155,  161,  162,   70,  163,
      165,  166,  167,  155,  166,  168,  169,  161,   70,  171,
        0,  164,  169,  155,   70,   70,  172,  173,   70,    0,
        0,   70,  155,  161,  170,   70,  272,  165,  166,  167,
      155,  166,  168,  169,  161,   70,  171,  170,  189,  169,
      274,   70,   70,  172,  173,   70,   71,   71,  191,  190,

      190,  170,  275,  272,    0,   71,    0,  193,  189,   71,
      193,  193,   71,  191,  170,  189,   71,  274,  191,    0,
      190,    0,    0,   71,   71,  191,  190,  190,  194,  275,
        0,  193,   71,  197,  193,  189,   71,  193,  193,   71,
      191,  194,    0,   71,   75,  191,   75,  190,  194,   75,
        0,  277,    0,  197,  279,  194,   75,   75,  193,  222,
      197,  280,  192,  195,  281,  195,   75,    0,  194,  192,
      283,   75,    0,   75,    0,  194,   75,  192,  277,  222,
      197,  279,  192,   75,   75,  195,  222,    0,  280,  192,
      195,  281,  195,   75,   76,   76,  192,  283,   76,  196,

      196,   76,   76,  198,  192,  282,  222,  282,   76,  192,
      198,   76,  195,    0,  196,    0,  199,  198,   76,  196,
      199,   76,   76,  198,    0,   76,  196,  196,   76,   76,
      198,    0,  282,  284,  282,   76,  202,  198,   76,  203,
      199,  196,  200,  199,  198,   76,  196,  199,  201,  200,
      198,  200,  285,  202,  203,  286,  202,  205,  201,  203,
      284,    0,  200,  202,    0,    0,  203,  199,  201,  200,
      205,  205,  206,    0,    0,  201,  200,  205,  200,  285,
      202,  203,  286,  202,  205,  201,  203,    0,  206,  200,
        0,  208,  206,    0,  287,  201,  204,  205,  205,  206,

      204,  204,  207,    0,  205,  208,    0,  204,    0,  209,
      209,  208,  207,  223,  204,  206,    0,  223,  208,  206,
      204,  287,  207,  204,  210,    0,  210,  204,  204,  207,
      209,    0,  208,  223,  204,  212,  209,  209,  208,  207,
      223,  204,  212,  214,  223,  216,  210,  204,  213,  207,
      289,  210,  216,  210,    0,  212,  214,  209,  213,    0,
      223,  215,  212,  214,    0,  216,  228,    0,  213,  212,
      214,  215,  216,  210,  211,  213,  211,  289,    0,  216,
      211,  215,  212,  214,  217,  213,  228,  211,  215,  218,
      214,  211,  216,  228,  217,  213,  211,    0,  215,  218,

        0,  211,    0,  211,  217,  219,    0,  211,  215,  218,
        0,  217,    0,  228,  211,  220,  218,  221,  211,  219,
        0,  217,  219,  211,  220,  219,  218,  224,  291,  220,
      226,  217,  219,  221,    0,  220,  218,  221,  224,  226,
      292,  227,  220,  294,  221,  227,  219,  224,    0,  219,
      226,  220,  219,    0,  224,  291,  220,  226,    0,  295,
      221,  227,  220,    0,  221,  224,  226,  292,  227,    0,
      294,    0,  227,  296,  224,  225,  225,  226,  229,  229,
      231,  230,  231,    0,  231,  225,  295,  230,  227,  230,
      225,  225,    0,  231,    0,  297,  225,    0,  229,    0,

      296,  230,  225,  225,  231,  229,  229,  231,  230,  231,
      233,  231,  225,  232,  230,  234,  230,  225,  225,  233,
      231,  235,  297,  225,  234,  229,  232,  237,  230,  236,
      233,  231,    0,  232,  237,  234,  235,  233,  239,  239,
      232,  235,  234,    0,  236,    0,  233,  237,  235,  236,
      240,  234,    0,  232,  237,  238,  236,  233,  239,  238,
      232,  237,  234,  235,  298,  239,  239,  243,  235,  242,
      240,  236,  241,  241,  237,    0,  236,  240,    0,  238,
      243,  246,  238,  299,  242,  239,  238,  243,  244,  242,
      246,  298,  244,  241,  243,  246,  242,  240,  245,  241,

      241,  246,  245,  247,  301,  247,  238,  243,  246,    0,
      299,  242,  244,    0,  243,  244,  242,  246,  245,  244,
      241,  248,  246,  247,  248,  245,  250,  251,  246,  245,
      247,  301,  247,  302,  252,  249,  250,  249,  252,  244,
      251,  248,    0,    0,  249,  245,  250,  251,  248,  303,
      247,  248,  249,  250,  251,  256,    0,  249,  252,    0,
      302,  252,  249,  250,  249,  252,  253,  251,  248,  253,
      254,  249,  255,  250,  251,  256,  303,  254,  257,  249,
      255,    0,  256,  258,  249,  252,  257,    0,    0,  253,
      254,  255,  255,  253,  258,  259,  253,  254,  257,  255,

        0,    0,  256,  258,  254,  257,    0,  255,  261,  261,
      258,  259,    0,  257,  265,  259,  253,  254,  255,  255,
      260,  258,  259,    0,  260,  257,  263,  260,  262,  261,
      258,    0,  262,  263,  265,  261,  261,  264,  259,  263,
      260,  265,  259,  266,  304,  267,  263,  260,  262,  267,
      264,  260,  305,  263,  260,  262,  261,  264,  266,  262,
      263,  265,  306,  266,  264,  293,  263,  260,  307,  267,
      266,  304,  267,  263,  308,  262,  267,  264,  310,  305,
      293,  311,  312,  313,  264,  266,  314,  315,  316,  306,
      266,  317,  293,  318,  319,  307,  267,  320,  321,  322,

      323,  308,  324,  325,  326,  310,  328,  293,  311,  312,
      313,  329,  324,  314,  315,  316,  330,  331,  317,  332,
      318,  319,  333,  334,  320,  321,  322,  323,  335,  324,
      325,  326,  336,  328,  337,  339,  340,  341,  329,  324,
      342,  343,  344,  330,  331,  345,  332,  346,  347,  333,
      334,  348,  349,  350,  351,  335,  352,  353,  355,  336,
      356,  337,  339,  340,  341,  357,  358,  342,  343,  344,
      360,  361,  345,  362,  346,  347,  363,  365,  348,  349,
      350,  351,  367,  352,  353,  355,  366,  356,  366,  368,
      369,  370,  357,  358,  371,  372,  373,  360,  361,  375,

      362,  374,  376,  363,  365,  374,    0,  379,    0,  367,
      380,  381,    0,  366,    0,  366,  368,  369,  370,  382,
      485,  371,  372,  373,  384,  486,  375,  379,  374,  376,
      380,  381,  374,  383,  379,  386,    0,  380,  381,  382,
      383,  385,    0,  388,  384,  385,  382,  485,    0,  387,
        0,  384,  486,  383,  379,  386,    0,  380,  381,  387,
      383,  388,  386,  388,  391,  385,  382,  383,  385,  387,
      388,  384,  385,  390,  389,  390,  387,  391,  393,  487,
      383,  389,  386,  392,  391,  394,  387,  396,  388,  394,
      388,  391,  385,  393,  389,  390,  387,  397,  393,  392,

      390,  389,  390,  392,  391,  393,  487,  396,  389,  394,
      392,  391,  394,  395,  396,  398,  394,  397,  488,  400,
      393,  389,  390,  400,  397,  393,  392,  395,  403,  489,
      392,  399,  401,  395,  396,  398,  394,    0,  399,  402,
      395,  402,  398,  400,  397,  488,  400,  401,  403,  404,
      400,  399,  401,    0,  395,  403,  489,  490,  399,  401,
      395,  402,  398,  492,  404,  399,  402,  407,  402,  404,
      400,    0,  406,    0,  401,  403,  404,  405,  399,  401,
      405,  408,  409,  406,  490,  410,  409,  407,  402,    0,
      492,  404,  406,  411,  407,  411,  404,  412,  415,  406,

      405,  408,    0,  495,  405,  410,  409,  405,  408,  409,
      406,  412,  410,  409,  407,  411,  413,  412,  415,  406,
      411,  414,  411,  413,  412,  415,  417,  405,  408,  418,
      495,  416,  410,  409,  414,  416,  413,  418,  412,    0,
      419,  414,  411,  413,  412,  415,  417,  419,  414,  418,
      413,  424,    0,  417,  420,  416,  418,  420,  416,  421,
      419,  414,  416,  413,  418,    0,  424,  419,  414,  422,
      425,  424,  422,  417,  419,  421,  418,  420,  424,  421,
        0,  420,  416,  496,  420,  425,  421,  419,  423,  422,
      425,  428,  423,  424,  426,  497,  422,  425,  424,  422,

      429,  428,  421,  427,  420,  430,  421,  426,  423,  427,
      496,  428,  425,  431,  426,  423,  422,  425,  428,  423,
      429,  426,  497,  427,  435,  430,  433,  429,  428,  432,
      427,    0,  430,  431,  426,  423,  427,  437,  428,  432,
      431,  426,  433,  436,  435,  434,  433,  429,    0,  432,
      427,  435,  430,  433,  434,  438,  432,  437,  436,  438,
      431,    0,    0,  436,  437,  434,  432,  439,  439,  433,
      436,  435,  434,  433,  440,  438,  432,  441,  440,  441,
        0,  434,  438,  443,  437,  436,  438,  442,  439,  442,
      436,  498,  434,  444,  439,  439,    0,  441,  440,  443,

        0,  440,  438,  443,  441,  440,  441,  442,  444,  446,
      443,  445,  447,  444,  442,  439,  442,  500,  498,  447,
      444,    0,  450,  449,  441,  440,  443,  445,  448,  446,
      443,  445,  447,  451,  442,  444,  446,  449,  445,  447,
      444,  448,  450,  449,  500,    0,  447,  452,  448,  450,
      449,  452,  453,  451,  445,  448,  446,  455,  445,  447,
      451,  453,  454,  456,  449,  455,  457,  456,  448,  450,
      449,  452,  453,  454,  452,  448,  459,  455,  452,  453,
      451,  457,  454,  501,  455,  502,  457,  456,  453,  454,
      456,  460,  455,  457,  456,    0,  459,  461,  452,  453,

      454,  460,  458,  459,  455,  458,  462,  463,  457,  454,
      501,  460,  502,  457,  456,  464,  465,  461,  460,    0,
      467,  503,  458,  459,  461,  463,  462,  463,  460,  458,
      464,  465,  458,  462,  463,  464,  465,  505,  460,  466,
      467,  470,  464,  465,  461,  468,  466,  467,  503,  458,
      470,  471,  463,  462,  463,  469,  468,  464,  465,  466,
      472,  470,  464,  465,  505,  468,  466,  467,  470,    0,
      469,  471,  468,  466,  475,  469,  473,  470,  471,  474,
      472,    0,  469,  468,  475,  473,  466,  472,  470,  474,
      506,  474,  468,  478,  475,  507,  473,  469,  471,  474,

      476,  475,  469,  473,  476,  477,  474,  472,  479,  478,
      479,  475,  473,  478,  477,    0,  474,  506,  474,    0,
      478,  475,  507,  473,  476,  477,  474,  476,  480,  481,
      479,  476,  477,  510,  482,  479,  478,  479,    0,  483,
      478,  477,  483,  482,  481,  484,  480,  482,  480,  481,
      511,  476,  477,  512,  482,  480,  481,  479,  484,  483,
      510,  482,  513,  514,  515,  484,  483,  517,  520,  483,
      482,  481,  484,  480,  482,  480,  481,  511,  521,  523,
      512,  482,  525,  527,  528,  484,  483,  529,  530,  513,
      514,  515,  484,  531,  517,  520,  532,  534,  538,  540,

      542,  543,  543,  544,  545,  521,  523,  532,  547,  525,
      527,  528,  548,  549,  529,  530,  550,  551,  553,  554,
      531,  555,  556,  532,  534,  538,  540,  542,  543,  543,
      544,  545,  557,  558,  532,  547,  559,  560,  562,  548,
      549,  563,  564,  550,  551,  553,  554,  565,  555,  556,
      568,  569,  570,  571,  572,  573,  574,  575,  576,  557,
      558,  578,  580,  559,  560,  562,    0,  585,  563,  564,
        0,  586,  683,  583,  565,  588,    0,  568,  569,  570,
      571,  572,  573,  574,  575,  576,  583,  585,  578,  580,
      584,  586,  587,  583,  585,  588,  589,  590,  586,  683,

      583,  590,  588,  584,    0,  587,  591,  592,    0,    0,
      584,    0,  587,  583,  585,  685,  589,  584,  586,  587,
      583,  590,  588,  589,  590,  594,  591,  592,  590,    0,
      584,  595,  587,  591,  592,  596,  593,  584,  594,  587,
      597,    0,  685,  589,  593,  594,  595,    0,  590,  596,
      598,  595,  594,  591,  592,  596,  593,  598,  595,  599,
      597,    0,  596,  593,  601,  594,    0,  597,  601,  686,
      598,  593,  594,  595,  600,  599,  596,  598,  595,  599,
      602,    0,  596,  593,  598,    0,  599,  597,  601,  600,
      603,  601,  603,  606,  600,  601,  686,  598,  605,    0,

      602,  600,  599,  607,  604,  605,  599,  602,  604,  687,
        0,  688,  603,  606,  611,  601,  600,  603,  605,  603,
      606,  600,  608,  607,  604,  605,  609,  602,  610,  611,
      607,  604,  605,  608,  611,  604,  687,  609,  688,  603,
      606,  611,  608,  612,  610,  605,  609,  612,  610,  608,
      607,  604,  614,  609,  613,  610,  611,  689,  613,    0,
      608,  611,  615,  616,  609,    0,  617,  612,  620,  608,
      612,  610,  614,  609,  612,  610,  618,  615,  613,  614,
      618,  613,  615,  616,  689,  613,  617,    0,  620,  615,
      616,  619,  621,  617,  612,  620,  622,    0,  690,  614,

      618,  621,  619,  618,  615,  613,  624,  618,    0,  615,
      616,  619,  621,  617,  623,  620,  622,  625,  619,  621,
        0,  692,  626,  622,  623,  690,  624,  618,  621,  619,
      631,    0,  628,  624,  623,  626,  627,  625,  619,  621,
        0,  623,  626,  622,  625,  628,  633,  629,  692,  626,
      631,  623,  628,  624,    0,  627,  627,  631,  632,  628,
      629,  623,  626,  627,  625,  632,  633,  629,  630,  626,
      630,  634,  628,  633,  629,    0,  635,  631,  632,  628,
      637,  630,  627,  627,  636,  632,  639,  629,  630,  693,
      640,  634,  632,  633,  629,  630,  635,  630,  634,  636,

      637,  694,  638,  635,  636,  632,  639,  637,  630,  638,
      640,  636,  643,  639,    0,  630,  693,  640,  634,  696,
      641,  642,  638,  635,  642,  643,  636,  637,  694,  638,
      644,  636,  643,  639,  641,  641,  638,  640,  646,  643,
      641,  642,  645,  647,  645,    0,  696,  641,  642,  638,
      644,  642,  643,  648,  697,    0,  647,  644,  646,  643,
      698,  641,  641,  647,  645,  646,  648,  641,  642,  645,
      647,  645,  650,  648,  649,    0,  699,  644,  700,    0,
      648,  697,  649,  647,  651,  646,  701,  698,  651,    0,
      647,  645,  650,  648,  649,    0,  653,  654,  652,  650,

      648,  649,  652,  699,  653,  700,  656,  702,  651,  649,
      654,  651,  655,  701,  656,  651,  653,  654,    0,  650,
      659,  649,  652,  653,  654,  652,  656,  655,  658,  652,
      658,  653,  655,  656,  702,  651,  657,  654,  660,  655,
      659,  656,  661,  653,  654,  657,  661,  659,  662,  652,
      658,  663,    0,  656,  655,  658,  657,  658,  660,  655,
      664,  663,  661,  657,  665,  660,    0,  659,  662,  661,
      703,  663,  657,  661,    0,  662,  666,  658,  663,  667,
      664,  667,  704,  657,  665,  660,    0,  664,  663,  661,
      666,  665,  673,  668,  669,  662,  666,  703,  663,  706,

      670,  667,  668,  666,  670,  675,  667,  664,  667,  704,
      669,  665,  673,  668,  669,  671,  672,  666,  672,  673,
      668,  669,    0,  666,  670,  675,  706,  670,  667,  668,
      671,  670,  675,  676,  677,  671,  672,  669,  678,  673,
      668,  669,  671,  672,  674,  672,  679,  674,  680,  676,
      708,  670,  675,  676,  677,  709,  711,  671,  678,  714,
      676,  677,  671,  672,  674,  678,  679,  715,  680,  716,
      717,  674,  722,  679,  674,  680,  676,  708,  724,  725,
      676,  677,  709,  711,  726,  678,  714,  729,  730,  731,
      732,  674,  733,  679,  715,  680,  716,  717,  735,  722,

      736,  737,  738,  739,  740,  724,  725,  741,  742,  743,
      745,  726,  746,  747,  729,  730,  731,  732,  749,  733,
      750,  751,  753,  754,  756,  735,    0,  736,  737,  738,
      739,  740,  755,  825,  741,  742,  743,  745,  757,  746,
      747,  758,  753,  754,  756,  749,    0,  750,  751,  753,
      754,  756,  755,  755,  759,  759,    0,  760,  757,  755,
      825,  758,    0,  761,    0,  757,  760,  762,  758,  753,
      754,  756,  763,  761,    0,  759,  764,  760,    0,  755,
      755,  759,  759,  761,  760,  757,  764,  762,  758,  766,
      761,  765,  763,  760,  762,  767,  764,  768,  765,  763,

      761,  770,  759,  764,  760,  776,  771,  776,    0,  766,
      761,  765,  768,  764,  762,  767,  766,  768,  765,  763,
      769,  770,  767,  764,  768,  765,  771,  776,  770,  769,
      772,  773,  776,  771,  776,  774,  766,    0,  765,  768,
      769,  777,  767,  827,  768,  772,  773,  769,  770,  774,
      772,  773,    0,  771,  776,  774,  769,  772,  773,  775,
      779,  777,  774,  775,  778,  782,    0,  769,  777,  828,
      827,  778,  772,  773,    0,    0,  774,  772,  773,  775,
      779,  780,  774,  780,  778,  782,  775,  779,  777,  781,
      775,  778,  782,  784,  829,  785,  828,  787,  778,  783,

      830,  780,  781,  786,    0,  790,  775,  779,  780,  781,
      780,  778,  782,  784,  783,  785,  781,  787,  786,  783,
      784,  829,  785,  786,  787,  790,  783,  830,  780,  781,
      786,  789,  790,  788,  791,  792,  781,  793,  789,  794,
      784,  783,  785,  795,  787,  786,  783,  788,  832,  833,
      786,  789,  790,  788,  791,  792,    0,  793,  789,  794,
      788,  791,  792,  795,  793,  789,  794,  796,  798,  797,
      795,  796,  797,  799,  788,  832,  833,  800,  789,    0,
      788,  791,  792,  798,  793,  801,  794,    0,  798,  797,
      795,  796,    0,  799,  796,  798,  797,  800,  796,  797,

      799,  802,  804,  805,  800,  801,  803,  805,    0,    0,
      798,  806,  801,  807,  802,  798,  797,  807,  796,  803,
      799,  802,  804,  805,  800,    0,  803,  809,  802,  804,
      805,  806,  801,  803,  805,  808,  808,  807,  806,    0,
      807,  802,  809,    0,  807,    0,  803,  809,  802,  804,
      805,  810,  810,  803,  809,  813,  808,  811,  806,    0,
      836,  811,  808,  808,  807,  840,  812,  815,  813,  809,
      814,  815,  810,    0,  809,  813,  816,    0,  810,  810,
      812,  811,  813,  808,  811,  814,  812,  836,  811,  817,
      814,  815,  840,  812,  815,  813,  816,  814,  815,  810,

      818,  818,  813,  816,  819,  820,  821,  812,  811,  817,
      822,  823,  814,  812,  822,  823,  817,  814,  815,  824,
      821,  818,  842,  816,  819,  820,  821,  818,  818,  843,
      846,  819,  820,  821,  822,  823,  817,  822,  823,  824,
      849,  822,  823,  850,  853,  854,  824,  821,  818,  842,
      856,  819,  820,  821,  857,  858,  843,  846,  860,  861,
      865,  822,  823,  867,  868,  869,  824,  849,  874,  875,
      850,  853,  854,  876,  877,    0,    0,  856,  879,  878,
      932,  857,  858,  880,  882,  860,  861,  865,  878,    0,
      867,  868,  869,  876,  877,  874,  875,  880,  879,  878,

      876,  877,  881,  880,  882,  879,  878,  932,  884,  881,
      880,  882,  883,  885,  883,  878,  887,  886,  887,    0,
      876,  877,  881,  884,  880,  879,  878,  888,  884,  881,
      880,  882,  889,  885,  883,  884,  881,  886,  887,  883,
      885,  883,  890,  887,  886,  887,  891,  888,  892,  881,
      884,    0,  889,    0,  888,  884,  894,  895,  893,  889,
      885,  883,  890,    0,  886,  887,  891,  893,  892,  890,
      896,  894,  897,  891,  888,  892,  894,  895,  893,  889,
      898,  899,    0,  894,  895,  893,  901,    0,    0,  890,
      896,  902,  897,  891,  893,  892,  900,  896,  894,  897,

      898,  899,  903,  894,  895,  893,  901,  898,  899,  900,
      906,  902,  908,  901,  904,  909,  900,  896,  902,  897,
      905,  904,  903,  900,  905,  907,  910,  898,  899,  903,
      906,    0,  908,  901,  904,  909,  900,  906,  902,  908,
      907,  904,  909,  900,  905,  907,  910,  905,  904,  903,
      912,  905,  907,  910,  911,  913,  911,  906,  914,  908,
      915,  904,  909,    0,  912,  918,  934,  907,  917,  918,
      912,  905,  907,  910,  940,  913,  911,  912,  914,  916,
      915,  911,  913,  911,  942,  914,  916,  915,  917,  918,
      919,  912,  918,  934,  919,  917,  918,  912,  921,  916,

      922,  940,  913,  911,  920,  914,  916,  915,  923,  924,
      925,  942,    0,  916,  919,  917,  918,  919,  921,  920,
      922,  919,  943,  925,  920,  921,  916,  922,  923,  924,
      925,  920,  926,  946,  949,  923,  924,  925,  950,  926,
      951,  919,  954,  955,  956,  921,  920,  922,  957,  943,
      925,  920,  926,  958,  959,  923,  924,  925,  959,  926,
      946,  949,  954,  955,  956,  950,  926,  951,  957,  954,
      955,  956,  960,  958,  962,  957,  963,    0,  959,  926,
      958,  959,  961,    0,  964,  959,  965,  966,  981,  954,
      955,  956,  960,    0,  962,  957,  963,  961,  968,  960,

      958,  962,  961,  963,  964,  959,  965,  966,  967,  961,
      967,  964,    0,  965,  966,  981,  970,    0,  968,  960,
      971,  962,  972,  963,  961,  968,  969,    0,  974,  961,
      967,  964,  975,  965,  966,  967,  970,  967,  976,  969,
      971,  973,  972,  970,  978,  968,  969,  971,  974,  972,
      979,  976,  975,  969,  977,  974,  973,  967,  976,  975,
      980,  973,  977,  970,  978,  976,  969,  971,  973,  972,
      979,  978,  983,  969,  977,  974,  985,  979,  976,  975,
      980,  977,  987,  973,  988,  976,  991,  980,  973,  977,
      990,  978,  993,    0,    0,  999,  995,  979,  996,  983,

      992,  977,    0,  985,  998,  990,  991,  980,  994,  987,
      990,  988,  993,  991, 1001,  992,  995,  990,  996,  993,
      992,  994,  999,  995,  998,  996, 1004,  992,  994,  997,
     1005,  998,  990,  991, 1007,  994,    0,  990, 1006,  993,
      997, 1001,  992,  995, 1008,  996, 1004,  992,  994,  997,
     1005,  998, 1006, 1004, 1007,  994,  997, 1005, 1006,    0,
     1011, 1007, 1012,    0, 1008, 1006,    0,  997,    0,    0,
        0, 1008,    0, 1004,    0,    0,  997, 1005,    0, 1006,
     1011, 1007, 1012,    0,    0, 1006,    0, 1011,    0, 1012,
        0, 1008,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1011,    0, 1012,
     1014,    0,    0, 1014, 1015,    0, 1015, 1015, 1017,    0,
     1017, 1017, 1018,    0, 1018, 1018, 1019,    0, 1019, 1019,
     1020,    0, 1020, 1020, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

#line 1912 "flex_lexer.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1925 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2211 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1014 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1013 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 133:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 140:
#line 199 "flex_lexer.l"
case 141:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3016 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1014 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1014 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1013);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 229 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

